{"version":3,"file":"default-libs_bookings_src_lib_booking-form_service_ts.js","mappings":"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","names":["BOOKING_URLS","BookingFormService","BaseClass","constructor","_router","_settings","_org","_dialog","_payments","super","this","BehaviorSubject","type","generateBookingForm","Booking","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","distinctUntilKeyChanged","switchMap","building","next","listChildMetadata","id","name","map","data","flatten","_","metadata","desks","details","Array","d","zone","of","tap","assets","list","features","forEach","push","unique","sort","a","b","localeCompare","combineLatest","_form","filter","_1","form","getRawValue","date","duration","debounceTime","queryBookings","period_start","getUnixTime","period_end","addMinutes","zones","zone_id","bookings","asset","bookable","every","includes","parent_id","find","bkn","asset_id","status","available_assets","groups","asset_list","members","length","currentUser","group","pop","subscription","events","subscribe","booking","NavigationEnd","url","clearForm","initialised","first","setOptions","view","_view","getValue","_booking","newForm","valueChanges","storeForm","setView","value","setFeature","feature","enable","splice","findIndex","e","resetForm","patchValue","extension_data","removeItem","setItem","stringify","loadForm","confirmPost","t","checkQuestions","content","asset_name","format","openConfirmModal","title","icon","reason","loading","n","postFormForGroup","catch","notifyError","close","postForm","ignore_check","valid","getInvalidFields","join","checkResourceAvailable","all_day","set","hours","minutes","valueOf","payment_module","receipt","makePayment","resource_name","success","invoice","invoice_id","result","saveBooking","approved","get","toPromise","booking_type","last_success","extra_members","email","take","active_asset","map_id","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","user_email","i","user","description","ref","open","DeskQuestionsModalComponent","race","componentInstance","event","afterClosed","key","allowed_bookings","current","map_url","count","nearby_assets","item","findNearbyFeature","i0","factory","EventEmitter","FormGroup","travelled","FormControl","unwell","contact","submit","markAllAsTouched","Object","keys","failure","emit","selectors"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from './booking.utilities';\nimport { PaymentsService } from 'libs/payments/src/lib/payments.service';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = ['book/desks', 'book/parking', 'book/newdesk', 'book/new-parking'];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: 'desk' | 'parking' | 'visitor' | 'locker';\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        distinctUntilKeyChanged('zone_id'),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return listChildMetadata(this._org.building.id, {\n                        name: 'desks',\n                    }).pipe(\n                        map((data) =>\n                            flatten(\n                                data.map((_) =>\n                                    (_.metadata.desks?.details instanceof Array\n                                        ? _.metadata.desks?.details\n                                        : []\n                                    ).map((d) => ({ ...d, zone: _.zone }))\n                                )\n                            )\n                        )\n                    );\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form,\n    ]).pipe(\n        filter(\n            ([_, _1, form]) =>\n                form.getRawValue().date > 0 && form.getRawValue().duration > 0\n        ),\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.getRawValue().date),\n                period_end: getUnixTime(\n                    addMinutes(\n                        form.getRawValue().date,\n                        form.getRawValue().duration || 24 * 60\n                    )\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            )\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _payments: PaymentsService\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean) {\n        if (!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if (enable && !features.includes(feature)) features.push(feature);\n        if (!enable && features.includes(feature))\n            features.splice(\n                features.findIndex((e) => e === feature),\n                1\n            );\n        this.setOptions({ features });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.getRawValue() || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const value = form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        const value = form.getRawValue();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                value,\n                this._options.getValue().type\n            );\n        }\n        if (value.duration >= 12 * 60 || value.all_day) {\n            form.patchValue({\n                date: set(value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        if (this._payments.payment_module) {\n            const receipt = await this._payments.makePayment({\n                type: 'space',\n                resource_name: value.asset_name,\n                date: value.date,\n                duration: value.duration,\n                all_day: value.all_day,\n            });\n            if (!receipt?.success) return;\n            (value as any).extension_data = { invoice: receipt, invoice_id: receipt.invoice_id };\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(\n            new Booking({\n                ...this._options.getValue(),\n                ...value,\n                approved: !!this._settings.get('app.bookings.no_approval'),\n            })\n        ).toPromise();\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form.getValue().patchValue({\n                ...form,\n                user: user as any,\n                asset_id: asset?.id,\n                asset_name: asset.name,\n                map_id: asset?.map_id || asset?.id,\n                description: asset.name,\n                zones: asset.zone\n                    ? [asset.zone?.parent_id, asset.zone?.id]\n                    : [],\n            });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: BookingType\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            throw `${asset_id} is not available at the selected time`;\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a desk booked`;\n        }\n        return true;\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_assets;\n    }\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\">COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\">Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\">\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n"],"x_google_ignoreList":[]}