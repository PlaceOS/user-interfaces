{"version":3,"file":"default-libs_bookings_src_lib_booking-form_service_ts.js","mappings":"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","names":["BOOKING_URLS","BookingFormService","BaseClass","constructor","_router","_settings","_org","_dialog","_payments","super","this","BehaviorSubject","type","generateBookingForm","Booking","JSON","parse","sessionStorage","getItem","_loading","asObservable","_options","pipe","shareReplay","options","debounceTime","switchMap","building","of","next","loadAssets","tap","assets","map","list","features","Array","forEach","_","push","unique","sort","a","b","localeCompare","combineLatest","_form","filter","_1","form","getRawValue","date","duration","queryBookings","period_start","getUnixTime","period_end","addMinutes","zones","zone_id","bookings","asset","bookable","every","includes","zone","id","parent_id","find","bkn","asset_id","status","available_assets","groups","asset_list","members","length","currentUser","group","pop","subscription","events","subscribe","booking","NavigationEnd","url","clearForm","initialised","first","setOptions","view","_view","getValue","_booking","newForm","valueChanges","storeForm","setView","value","setFeature","feature","enable","splice","findIndex","e","resetForm","patchValue","extension_data","removeItem","setItem","stringify","loadForm","openBookingLinkModal","force","markAllAsTouched","valid","event","open","BookingLinkModalComponent","data","confirmPost","o","checkQuestions","content","asset_name","format","details","openConfirmModal","title","icon","reason","loading","n","postFormForGroup","catch","notifyError","close","postForm","ignore_check","getInvalidFields","join","booking_type","checkResourceAvailable","all_day","set","hours","minutes","valueOf","payment_module","receipt","makePayment","resource_name","success","invoice","invoice_id","result","saveBooking","approved","get","toPromise","last_success","extra_members","email","take","active_asset","map_id","level","levelWithID","_getNearbyResources","group_members","Promise","all","idx","user_email","i","user","name","description","ref","DeskQuestionsModalComponent","race","componentInstance","afterClosed","key","allowed_bookings","l","current","listChildMetadata","flatten","metadata","d","map_url","count","nearby_assets","item","findNearbyFeature","i0","factory","_event","generateMicrosoftCalendarLink","generateGoogleCalendarLink","generateCalendarFileLink","MAT_DIALOG_DATA","selectors","$localize","EventEmitter","FormGroup","travelled","FormControl","unwell","contact","submit","Object","keys","failure","emit"],"sourceRoot":"webpack:///","sources":["./libs/bookings/src/lib/booking-form.service.ts","./libs/bookings/src/lib/booking-link-modal.component.ts","./libs/bookings/src/lib/desk-questions-modal.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Event, NavigationEnd, Router } from '@angular/router';\nimport {\n    BaseClass,\n    currentUser,\n    flatten,\n    getInvalidFields,\n    notifyError,\n    openConfirmModal,\n    SettingsService,\n    unique,\n} from '@placeos/common';\nimport { listChildMetadata, PlaceZone } from '@placeos/ts-client';\nimport { format, getUnixTime, addMinutes, set } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport {\n    debounceTime,\n    distinctUntilKeyChanged,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { User } from 'libs/users/src/lib/user.class';\nimport { Booking, BookingType } from './booking.class';\nimport { generateBookingForm } from './booking.utilities';\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\nimport { findNearbyFeature } from './booking.utilities';\nimport { PaymentsService } from 'libs/payments/src/lib/payments.service';\nimport { BookingLinkModalComponent } from './booking-link-modal.component';\n\nexport type BookingFlowView = 'form' | 'map' | 'confirm' | 'success';\n\nconst BOOKING_URLS = [\n    'book/desks',\n    'book/parking',\n    'book/newdesk',\n    'book/new-parking',\n];\n\nexport interface BookingFlowOptions {\n    /** Type of booking being made */\n    type: BookingType;\n    /** Zone to check available */\n    zone_id?: string;\n    /** List of features that the asset should associate */\n    features?: string[];\n    /** Whether booking is for a group */\n    group?: boolean;\n    /** Recurrence Pattern */\n    pattern?: 'none' | 'daily' | 'weekly' | 'monthly';\n    /** Recurrence ending */\n    recurr_end?: number;\n    /** List of group members to book for */\n    members?: User[];\n    /** Whether to only show favourite rooms */\n    show_fav?: boolean;\n}\n\nexport interface BookingAsset {\n    id: string;\n    map_id: string;\n    name: string;\n    bookable: boolean;\n    zone?: PlaceZone;\n    features: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class BookingFormService extends BaseClass {\n    private _view = new BehaviorSubject<BookingFlowView>('form');\n    private _options = new BehaviorSubject<BookingFlowOptions>({\n        type: 'desk',\n    });\n    private _form = new BehaviorSubject(generateBookingForm());\n    private _booking = new BehaviorSubject<Booking>(null);\n    private _loading = new BehaviorSubject<string>('');\n\n    public last_success: Booking = new Booking(\n        JSON.parse(\n            sessionStorage.getItem('PLACEOS.last_booked_booking') || '{}'\n        )\n    );\n    public readonly loading = this._loading.asObservable();\n    public readonly options = this._options.pipe(shareReplay(1));\n\n    public readonly assets: Observable<BookingAsset[]> = this.options.pipe(\n        debounceTime(300),\n        switchMap(({ type }) => {\n            if (!this._org.building) return of([]);\n            switch (type) {\n                case 'desk':\n                    this._loading.next(`Loading desks...`);\n                    return this.loadAssets('desks' as any);\n                case 'parking':\n                    this._loading.next(`Loading parking spaces...`);\n                    return this.loadAssets('parking_spaces' as any);\n            }\n            return of([]);\n        }),\n        tap(() => this._loading.next(``)),\n        shareReplay(1)\n    );\n\n    public readonly features: Observable<string[]> = this.assets.pipe(\n        map((assets) => {\n            const list: string[] = [];\n            for (const { features } of assets) {\n                features instanceof Array\n                    ? features.forEach((_) => list.push(_))\n                    : null;\n            }\n            return unique(list).sort((a, b) => a.localeCompare(b));\n        }),\n        shareReplay(1)\n    );\n\n    public readonly available_assets = combineLatest([\n        this.options,\n        this.assets,\n        this._form,\n    ]).pipe(\n        filter(\n            ([_, _1, form]) =>\n                form.getRawValue().date > 0 && form.getRawValue().duration > 0\n        ),\n        debounceTime(500),\n        tap(([{ type }]) =>\n            this._loading.next(`Checking ${type} availability...`)\n        ),\n        switchMap(([options, assets, form]) =>\n            queryBookings({\n                period_start: getUnixTime(form.getRawValue().date),\n                period_end: getUnixTime(\n                    addMinutes(\n                        form.getRawValue().date,\n                        form.getRawValue().duration || 24 * 60\n                    )\n                ),\n                type: options.type,\n                zones: options.zone_id,\n            }).pipe(\n                map((bookings) =>\n                    assets.filter(\n                        (asset) =>\n                            asset.bookable !== false &&\n                            (!options.features ||\n                                options.features?.every((_) =>\n                                    asset.features.includes(_)\n                                )) &&\n                            (!options.zone_id ||\n                                options.zone_id === asset.zone?.id ||\n                                options.zone_id === asset.zone?.parent_id) &&\n                            !bookings.find(\n                                (bkn) =>\n                                    bkn.asset_id === asset.id &&\n                                    bkn.status !== 'declined'\n                            )\n                    )\n                )\n            )\n        ),\n        tap(() => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly grouped_availability = combineLatest([\n        this.options,\n        this.available_assets,\n    ]).pipe(\n        map(([options, assets]) => {\n            const groups = [];\n            const asset_list = [...assets].sort((a, b) =>\n                a.zone?.id?.localeCompare(b.zone?.id)\n            );\n            const members = options.members?.length\n                ? options.members\n                : [currentUser()];\n            while (asset_list.length) {\n                const group = [];\n                let asset = asset_list.pop();\n                while (group.length < members.length) {\n                    if (\n                        group.length &&\n                        !group.find((_) => _.zone?.id === asset.zone?.id)\n                    ) {\n                        break;\n                    }\n                    group.push(asset);\n                    asset = asset_list.pop();\n                }\n                if (group.length < members.length) continue;\n                groups.push(group);\n            }\n            return groups;\n        })\n    );\n\n    public get view() {\n        return this._view.getValue();\n    }\n\n    public get form() {\n        return this._form.getValue();\n    }\n\n    public get booking() {\n        return this._booking.getValue();\n    }\n\n    public newForm(booking: Booking = new Booking()) {\n        this._form.next(generateBookingForm(booking));\n        this.subscription(\n            'form_change',\n            this._form.getValue().valueChanges.subscribe(() => this.storeForm())\n        );\n        this._booking.next(booking);\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    constructor(\n        private _router: Router,\n        private _settings: SettingsService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _payments: PaymentsService\n    ) {\n        super();\n        this.subscription(\n            'router.bookings',\n            this._router.events.subscribe((booking: Event) => {\n                if (\n                    booking instanceof NavigationEnd &&\n                    !BOOKING_URLS.find((_) => booking.url.includes(_))\n                ) {\n                    this.clearForm();\n                }\n            })\n        );\n        this._org.initialised\n            .pipe(first((_) => _))\n            .subscribe(() => this.setOptions({}));\n    }\n\n    public setView(value: BookingFlowView) {\n        this._view.next(value);\n    }\n\n    public setOptions(value: Partial<BookingFlowOptions>) {\n        this._options.next({ ...this._options.getValue(), ...value });\n    }\n\n    public setFeature(feature: string, enable: boolean) {\n        if (!feature?.length) return;\n        const features = this._options.getValue()?.features || [];\n        if (enable && !features.includes(feature)) features.push(feature);\n        if (!enable && features.includes(feature))\n            features.splice(\n                features.findIndex((e) => e === feature),\n                1\n            );\n        this.setOptions({ features });\n    }\n\n    public resetForm() {\n        if (!this._form.getValue()) this.newForm();\n        const booking = this._booking.getValue();\n        this._form.getValue().patchValue({\n            ...(booking || {}),\n            ...(booking?.extension_data || {}),\n        });\n        this._options.next({ type: this._options.getValue().type });\n    }\n\n    public clearForm() {\n        sessionStorage.removeItem('PLACEOS.booking_form');\n        sessionStorage.removeItem('PLACEOS.booking_form_options');\n        this.newForm();\n    }\n\n    public storeForm() {\n        sessionStorage.setItem(\n            'PLACEOS.booking_form',\n            JSON.stringify(this._form.getValue()?.getRawValue() || {})\n        );\n        sessionStorage.setItem(\n            'PLACEOS.booking_form_filters',\n            JSON.stringify(this._options.getValue() || {})\n        );\n    }\n\n    public loadForm() {\n        if (!this._form.getValue()) this.newForm();\n        this._form.getValue().patchValue({\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form') || '{}'\n            ),\n        });\n        this.setOptions({\n            zone_id: this._org.building?.id,\n            ...JSON.parse(\n                sessionStorage.getItem('PLACEOS.booking_form_filters') || '{}'\n            ),\n        });\n    }\n\n    public openBookingLinkModal(force: boolean = false) {\n        const form = this._form.getValue();\n        form.markAllAsTouched();\n        if (!form.valid && !force) return;\n        const event = new Booking({ ...this.booking, ...form.getRawValue() });\n        this._dialog.open(BookingLinkModalComponent, { data: event });\n    }\n\n    public async confirmPost() {\n        await this.checkQuestions();\n        const options = this._options.getValue();\n        const form = this._form.getValue();\n        const value = form.getRawValue();\n        let content = `Would you like to book the ${options.type} ${\n            value.asset_name\n        } for ${format(value.date, 'dd MMM yyyy')}${\n            value.duration < 12 * 60\n                ? ' at ' + format(value.date, 'h:mm a')\n                : ''\n        }`;\n        if (options.group) {\n            content = `${content}.<br>You group members will be assigned desks nearby your selected desk.`;\n        }\n        const details = await openConfirmModal(\n            {\n                title: `Book ${options.type}`,\n                content,\n                icon: { content: 'event_available' },\n            },\n            this._dialog\n        );\n        if (details?.reason !== 'done') throw 'User cancelled';\n        details.loading('Performing booking request...');\n        if (options.group) {\n            await this.postFormForGroup().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        } else\n            await this.postForm().catch((_) => {\n                notifyError(_);\n                details.close();\n                throw _;\n            });\n        details.close();\n    }\n\n    public async postForm(ignore_check = false) {\n        const form = this._form.getValue();\n        if (!form) throw 'No form for booking';\n        if (!form.valid)\n            throw `Some form fields are invalid. [${getInvalidFields(form).join(\n                ', '\n            )}]`;\n        form.patchValue({\n            booking_type:\n                form.getRawValue().booking_type ||\n                this._options.getValue().type,\n        });\n        const value = form.getRawValue();\n        if (!ignore_check) {\n            await this.checkResourceAvailable(\n                value,\n                this._options.getValue().type\n            );\n        }\n        if (value.duration >= 12 * 60 || value.all_day) {\n            form.patchValue({\n                date: set(value.date, { hours: 11, minutes: 59 }).valueOf(),\n                duration: 12 * 60,\n            });\n        }\n        if (this._payments.payment_module) {\n            const receipt = await this._payments.makePayment({\n                type: this._options.getValue().type,\n                resource_name: value.asset_name,\n                date: value.date,\n                duration: value.duration,\n                all_day: value.all_day,\n            });\n            if (!receipt?.success) return;\n            (value as any).extension_data = {\n                invoice: receipt,\n                invoice_id: receipt.invoice_id,\n            };\n        }\n        this._loading.next('Saving booking');\n        const result = await saveBooking(\n            new Booking({\n                ...this._options.getValue(),\n                ...value,\n                approved: !!this._settings.get('app.bookings.no_approval'),\n            })\n        ).toPromise();\n        this._loading.next('');\n        const { booking_type } = value;\n        this.clearForm();\n        form?.patchValue({ booking_type });\n        this.last_success = result;\n        sessionStorage.setItem(\n            'PLACEOS.last_booked_booking',\n            JSON.stringify(result)\n        );\n        this.setView('success');\n        return result;\n    }\n\n    public async postFormForGroup() {\n        const { members, group, type } = this._options.getValue();\n        if (!group) throw 'No group available to book for';\n        const extra_members = members.filter(\n            (_) => _.email !== currentUser().email\n        );\n        if (extra_members.length <= 0)\n            throw 'No members in your group to book for.';\n        const form = this._form.getValue().value;\n        const asset_list = await this.available_assets\n            .pipe(take(1))\n            .toPromise();\n        const active_asset = asset_list.find(\n            (_) => _.id === form.asset_id || _.map_id === form.asset_id\n        );\n        const level = this._org.levelWithID([active_asset.zone?.id]);\n        const assets = [\n            active_asset,\n            ...(await this._getNearbyResources(\n                level.map_id,\n                form.asset_id,\n                asset_list,\n                extra_members.length\n            )),\n        ];\n        const group_members = [currentUser(), ...extra_members];\n        await Promise.all(\n            group_members.map((_, idx) =>\n                this.checkResourceAvailable(\n                    {\n                        ...form,\n                        asset_id: assets[idx].map_id || assets[idx].id,\n                        user_email: _.email,\n                    },\n                    type\n                )\n            )\n        );\n        for (let i = 0; i < group_members.length; i++) {\n            const user = group_members[i];\n            const asset = assets[i];\n            this._form.getValue().patchValue({\n                ...form,\n                user: user as any,\n                asset_id: asset?.id,\n                asset_name: asset.name,\n                map_id: asset?.map_id || asset?.id,\n                description: asset.name,\n                zones: asset.zone\n                    ? [asset.zone?.parent_id, asset.zone?.id]\n                    : [],\n            });\n            this.postForm(true);\n        }\n    }\n\n    private async checkQuestions() {\n        if (this._settings.get('app.desks.ignore_questions') !== false) return;\n        const ref = this._dialog.open(DeskQuestionsModalComponent);\n        const result = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n            ref.afterClosed().toPromise(),\n        ]);\n        if (result?.reason !== 'done') throw 'User cancelled';\n        const form = ref.componentInstance.form.getRawValue();\n        for (const key in form) {\n            if (form[key]) throw 'User failed questionaire';\n        }\n        ref.close();\n    }\n\n    /** Check if the given resource is available for the selected user to book */\n    private async checkResourceAvailable(\n        { asset_id, date, duration, user_email, all_day }: Partial<Booking>,\n        type: BookingType\n    ) {\n        duration = all_day ? 12 * 60 : duration || 60;\n        const bookings = await queryBookings({\n            period_start: getUnixTime(date),\n            period_end: getUnixTime(date + duration * 60 * 1000),\n            type,\n        }).toPromise();\n        if (bookings.find((_) => _.asset_id === asset_id)) {\n            if (asset_id.includes('@')) {\n                throw `${asset_id} already has an invite for the selected time`;\n            } else {\n                throw `${asset_id} is not available at the selected time`;\n            }\n        }\n        const allowed_bookings =\n            this._settings.get(`app.booking.allowed_daily_${type}_count`) ?? 1;\n        if (\n            allowed_bookings > 0 &&\n            bookings.filter(\n                (_) =>\n                    _.user_email === (user_email || currentUser()?.email) &&\n                    _.status !== 'declined'\n            ).length >= allowed_bookings\n        ) {\n            const current = user_email === currentUser()?.email;\n            throw `${current ? 'You' : user_email} already ${\n                current ? 'have' : 'has'\n            } a ${type} booked`;\n        }\n        return true;\n    }\n\n    public loadAssets(type: BookingType) {\n        return listChildMetadata(this._org.building.id, {\n            name: type,\n        }).pipe(\n            map((data) =>\n                flatten(\n                    data.map((_) =>\n                        (_.metadata[type]?.details instanceof Array\n                            ? _.metadata[type]?.details\n                            : []\n                        ).map((d) => ({ ...d, zone: _.zone }))\n                    )\n                )\n            )\n        )\n    }\n\n    private async _getNearbyResources(\n        map_url: string,\n        id: string,\n        assets: BookingAsset[],\n        count: number\n    ): Promise<BookingAsset[]> {\n        const nearby_assets = [];\n        let asset_list = assets.filter((_) => _.id !== id && _.map_id !== id);\n        for (let i = 0; i < count; i++) {\n            const item = await findNearbyFeature(\n                map_url,\n                id,\n                asset_list.map((_) => _.map_id || _.id)\n            );\n            if (item) {\n                nearby_assets.push(\n                    assets.find((_) => _.id === item || _.map_id === item)\n                );\n                asset_list = asset_list.filter(\n                    (_) => _.id !== item && _.map_id !== item\n                );\n            }\n        }\n        return nearby_assets;\n    }\n}\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { SettingsService } from 'libs/common/src/lib/settings.service';\nimport {\n    generateCalendarFileLink,\n    generateGoogleCalendarLink,\n    generateMicrosoftCalendarLink,\n} from 'libs/common/src/lib/calendar-links';\nimport { Booking } from './booking.class';\n\n@Component({\n    selector: 'booking-link-modal',\n    template: `\n        <div class=\"p-4 w-full pb-2\">\n            Add event to your calendar\n        </div>\n        <div class=\"flex flex-col items-center space-y-4 p-4 relative\">\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"outlook_link | sanitize:'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/outlook.svg\" class=\"w-6\" />\n                <span i18n>Create in Outlook</span>\n            </a>\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"google_link | sanitize:'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <img src=\"assets/icons/gcal.svg\" class=\"w-6\" />\n                <span i18n>Create in Google Calendar</span>\n            </a>\n            <a\n                button\n                matRipple\n                class=\"flex items-center p-2 space-x-2 pr-4 w-64 rounded inverse\"\n                [href]=\"ical_link | safe:'url'\"\n                target=\"_blank\"\n                rel=\"noopener noreferer\"\n            >\n                <app-icon class=\"text-xl\">download</app-icon>\n                <span i18n>Download iCal File</span>\n            </a>\n        </div>\n        <button mat-icon-button mat-dialog-close class=\"absolute top-2 right-0\">\n            <app-icon>close</app-icon>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n            }\n        `,\n    ],\n})\nexport class BookingLinkModalComponent {\n    public readonly outlook_link = generateMicrosoftCalendarLink(\n        this._event as any\n    );\n    public readonly google_link = generateGoogleCalendarLink(\n        this._event as any\n    );\n    public readonly ical_link = generateCalendarFileLink(this._event as any);\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _event: Booking,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DialogEvent, notifyError } from '@placeos/common';\n\n@Component({\n    selector: 'desk-question-modal',\n    template: `\n        <div *ngIf=\"!failure; else fail_state\" class=\"relative\">\n            <h2 class=\"p-4 text-xl\" i18n>COVID-19 Questionnaire</h2>\n            <main class=\"p-4\" [formGroup]=\"form\">\n                <div class=\"flex flex-col mb-4\">\n                    <label i18n>\n                        Have you travelled overseas within the last 14\n                        days?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"travelled\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col mb-4\">\n                    <label i18n>\n                        Are you unwell or experiencing any cold or flu-like\n                        symptoms?<span>*</span>\n                    </label>\n                    <mat-radio-group formControlName=\"unwell\" class=\"space-x-2\">\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label i18n>\n                        Have you had contact with anyone with suspected\n                        COVID-19?<span>*</span>\n                    </label>\n                    <mat-radio-group\n                        formControlName=\"contact\"\n                        class=\"space-x-2\"\n                    >\n                        <mat-radio-button [value]=\"true\">Yes</mat-radio-button>\n                        <mat-radio-button [value]=\"false\">No</mat-radio-button>\n                    </mat-radio-group>\n                </div>\n            </main>\n            <footer class=\"flex justify-center items-center p-2\">\n                <button mat-button (click)=\"submit()\" i18n>Submit</button>\n            </footer>\n            <button close mat-icon-button mat-dialog-close>\n                <i class=\"material-icons\">close</i>\n            </button>\n        </div>\n        <ng-template #fail_state>\n            <main failure class=\"pt-8 relative\">\n                <p class=\"p-4\" i18n>\n                    Your request to work from the office has been rejected based\n                    on your response to the compulsory Covid-19 questions.\n                    Please feel free to submit a new request when circumstances\n                    change in a way that changes your answer to the questions.\n                </p>\n                <button close mat-icon-button mat-dialog-close>\n                    <i class=\"material-icons\">close</i>\n                </button>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                width: 24rem;\n                max-width: calc(100vw - 4.5rem);\n            }\n\n            [close] {\n                position: absolute;\n                top: 0.5rem;\n                right: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class DeskQuestionsModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n\n    public form = new FormGroup({\n        travelled: new FormControl(false),\n        unwell: new FormControl(false),\n        contact: new FormControl(false),\n    });\n    public failure: boolean;\n\n    public submit() {\n        this.form.markAllAsTouched();if (\n            Object.keys(this.form.value).find(\n                (key) =>\n                    this.form.value[key] === true ||\n                    this.form.value[key] === 'true'\n            )\n        ) {\n            this.failure = true;\n            return;\n        }\n        this.event.emit({ reason: 'done' });\n    }\n}\n"],"x_google_ignoreList":[]}