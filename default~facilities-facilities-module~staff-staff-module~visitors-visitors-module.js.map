{"version":3,"sources":["/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.html","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/people.service.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/groups.service.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/index.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/users.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/users.module.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/location.class.ts"],"names":[],"mappings":"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","file":"default~facilities-facilities-module~staff-staff-module~visitors-visitors-module.js","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","<div class=\"user form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"name\" placeholder=\"Name\" formControlName=\"name\" />\n                <mat-error *ngIf=\"form.controls.name.invalid\">Name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.email\">\n            <label\n                for=\"email\"\n                [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                >Email<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"email\" placeholder=\"Email Address\" formControlName=\"email\" />\n                <mat-error *ngIf=\"form.controls.email.invalid\">A valid email is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.organisation\">\n            <label\n                for=\"organisation\"\n                [class.error]=\"\n                    form.controls.organisation.invalid && form.controls.organisation.touched\n                \"\n                >Organisation<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"organisation\"\n                    placeholder=\"Organisation\"\n                    formControlName=\"organisation\"\n                />\n                <mat-error *ngIf=\"form.controls.organisation.invalid\"\n                    >Organisation is required</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.phone\">\n            <label\n                for=\"phone\"\n                [class.error]=\"form.controls.phone.invalid && form.controls.phone.touched\"\n                >Phone:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"phone\" placeholder=\"Phone\" formControlName=\"phone\" />\n                <mat-error *ngIf=\"form.controls.phone.invalid\">Phone format is invalid</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n            <mat-checkbox color=\"primary\" formControlName=\"assistance_required\"\n                >Assistance required</mat-checkbox\n            >\n        </div>\n    </form>\n</div>\n","import { Injectable } from '@angular/core';\nimport { BaseAPIService } from '@user-interfaces/common';\n\nimport { User } from './user.class';\n\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PeopleService extends BaseAPIService<User> {\n    constructor() {\n        super();\n        this._name = 'People';\n        this._api_route = 'people';\n        this._compare = (a, b) => !a.id.localeCompare(b.id) || !a.email.localeCompare(b.email);\n    }\n\n    public async search(search: string) {\n        return this.query({ q: search });\n    }\n\n    public locate(email: string) {\n        return this.show(email);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { get } from '@placeos/ts-client';\n\nimport { BaseAPIService, HashMap, toQueryString } from '@user-interfaces/common';\n\nimport { User } from './user.class';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class GroupsService extends BaseAPIService<User> {\n    constructor(protected uhttp: HttpClient, protected location: Location) {\n        super();\n        this._name = 'Role User';\n        this._api_route = 'groups';\n    }\n\n    /**\n     * Get API route for the service\n     * @param engine Whether endpoint is using the application API or engine API\n     */\n    public route(engine: boolean = false) {\n        const endpoint = '/control/';\n        return `${endpoint}${this._api_route}`;\n    }\n\n    /**\n     * Query the API route for a sepecific item\n     * @param id ID of the item\n     * @param query_params Map of query paramaters to add to the request URL\n     */\n    public show(id: string, query_params: HashMap = {}): Promise<any> {\n        let engine = false;\n        if (query_params) {\n            engine = !!query_params.engine;\n            delete query_params.engine;\n        }\n        const query = toQueryString(query_params);\n        const key = `show|${id}|${query}`;\n        if (!this._promises[key]) {\n            this._promises[key] = new Promise<User[]>((resolve, reject) => {\n                const url = `${this.route(engine)}/${id}${query ? '?' + query : ''}`;\n                let result: User[] = null;\n                get(url).subscribe(\n                    (d) => (result = d.map((i) => this.process(i))),\n                    (e) => {\n                        reject(e);\n                        this._promises.new_item = null;\n                    },\n                    () => {\n                        resolve(result);\n                        this.timeout(key, () => (this._promises[key] = null), 1000);\n                    }\n                );\n            });\n        }\n        return this._promises[key];\n    }\n\n    /**\n     * Convert raw API data into a valid User Object\n     * @param raw_item Raw API data\n     */\n    protected process(raw_data: any): User {\n        return new User(raw_data);\n    }\n}\n","export * from './lib/users';\n","\nexport * from './new-user-modal/new-user-modal.component';\nexport * from './user-form/user-form.component';\nexport * from './groups.service';\nexport * from './guests.service';\nexport * from './location.class';\nexport * from './people.service';\nexport * from './staff.service';\nexport * from './user.class';\nexport * from './user.utilities';\nexport * from './users.module'\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@user-interfaces/components';\n\nimport { NewUserModalComponent } from './new-user-modal/new-user-modal.component';\nimport { UserFormComponent } from './user-form/user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n","import { Point } from '@yuion/svg-viewer';\nimport { HashMap } from '@user-interfaces/common';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n\n    constructor(_data: HashMap) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width,\n                y: _data.y / _data.map_height,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen =\n            _data.last_seen || Math.floor(new Date().valueOf() / 1000);\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n    }\n}\n"],"sourceRoot":"webpack:///"}