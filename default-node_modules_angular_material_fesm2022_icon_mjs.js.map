{"version":3,"file":"default-node_modules_angular_material_fesm2022_icon_mjs.js","mappings":"yVAYA,MAAAA,EAAA,MAIA,IAAIC,EA4BJ,SAASC,EAAsBC,GAC3B,OAxBJ,SAASC,IACL,QAAeC,IAAXJ,IACAA,EAAS,YACEK,OAAW,KAAa,CAC/B,MAAMC,EAAWD,YACaD,IAA1BE,EAASC,eACTP,EAASM,EAASC,aAAaC,aAAa,qBAAsB,CAC9DC,WAAaC,GAAMA,IACtB,CAIb,OAAOV,CACX,CAWWG,IAAaM,WAAWP,IAASA,CAC5C,CAOA,SAASS,EAA4BC,GACjC,OAAOC,MAAO,sCAAqCD,KACvD,CAgBA,SAASE,EAAmCC,GACxC,OAAOF,MAAO,wHACwCE,MAC1D,CAMA,SAASC,EAAuCC,GAC5C,OAAOJ,MAAO,0HACwCI,MAC1D,CAKA,MAAMC,EACFC,YAAYJ,EAAKK,EAASC,GACtBC,KAAKP,IAAMA,EACXO,KAAKF,QAAUA,EACfE,KAAKD,QAAUA,CACnB,EAEJ,IAOME,EAAe,MAArB,MAAMA,EACFJ,YAAYK,EAAaC,EAAYC,EAAUC,GAC3CL,KAAKE,YAAcA,EACnBF,KAAKG,WAAaA,EAClBH,KAAKK,cAAgBA,EAIrBL,KAAKM,gBAAkB,IAAIC,IAK3BP,KAAKQ,gBAAkB,IAAID,IAE3BP,KAAKS,kBAAoB,IAAIF,IAE7BP,KAAKU,sBAAwB,IAAIH,IAEjCP,KAAKW,uBAAyB,IAAIJ,IAElCP,KAAKY,WAAa,GAMlBZ,KAAKa,qBAAuB,CAAC,iBAAkB,qBAC/Cb,KAAKc,UAAYV,CACrB,CAMAW,WAAWzB,EAAUG,EAAKM,GACtB,OAAOC,KAAKgB,sBAAsB,GAAI1B,EAAUG,EAAKM,EACzD,CAMAkB,kBAAkB3B,EAAUK,EAASI,GACjC,OAAOC,KAAKkB,6BAA6B,GAAI5B,EAAUK,EAASI,EACpE,CAOAiB,sBAAsBG,EAAW7B,EAAUG,EAAKM,GAC5C,OAAOC,KAAKoB,kBAAkBD,EAAW7B,EAAU,IAAIM,EAAcH,EAAK,KAAMM,GACpF,CASAsB,mBAAmBC,GACf,OAAAtB,KAAKY,WAAWW,KAAKD,GACdtB,IACX,CAOAkB,6BAA6BC,EAAW7B,EAAUK,EAASI,GACvD,MAAMyB,EAAexB,KAAKG,WAAWsB,SAASC,WAAsB/B,GAEpE,IAAK6B,EACD,MAAM9B,EAAuCC,GAGjD,MAAMgC,EAAiBhD,EAAsB6C,GAC7C,OAAOxB,KAAKoB,kBAAkBD,EAAW7B,EAAU,IAAIM,EAAc,GAAI+B,EAAgB5B,GAC7F,CAKA6B,cAAcnC,EAAKM,GACf,OAAOC,KAAK6B,yBAAyB,GAAIpC,EAAKM,EAClD,CAKA+B,qBAAqBnC,EAASI,GAC1B,OAAOC,KAAK+B,gCAAgC,GAAIpC,EAASI,EAC7D,CAMA8B,yBAAyBV,EAAW1B,EAAKM,GACrC,OAAOC,KAAKgC,qBAAqBb,EAAW,IAAIvB,EAAcH,EAAK,KAAMM,GAC7E,CAMAgC,gCAAgCZ,EAAWxB,EAASI,GAChD,MAAMyB,EAAexB,KAAKG,WAAWsB,SAASC,WAAsB/B,GACpE,IAAK6B,EACD,MAAM9B,EAAuCC,GAGjD,MAAMgC,EAAiBhD,EAAsB6C,GAC7C,OAAOxB,KAAKgC,qBAAqBb,EAAW,IAAIvB,EAAc,GAAI+B,EAAgB5B,GACtF,CAsBAkC,uBAAuBC,EAAOC,EAAaD,GACvC,OAAAlC,KAAKW,uBAAuByB,IAAIF,EAAOC,GAChCnC,IACX,CAKAqC,sBAAsBH,GAClB,OAAOlC,KAAKW,uBAAuB2B,IAAIJ,IAAUA,CACrD,CAKAK,0BAA0BJ,GACtB,OAAAnC,KAAKa,qBAAuBsB,EACrBnC,IACX,CAKAwC,yBACI,OAAOxC,KAAKa,oBAChB,CASA4B,kBAAkBC,GACd,MAAMjD,EAAMO,KAAKG,WAAWsB,SAASC,mBAA8BgB,GACnE,IAAKjD,EACD,MAAMD,EAAmCkD,GAE7C,MAAMC,EAAa3C,KAAKS,kBAAkB6B,IAAI7C,GAC9C,OAAIkD,KACOC,MAAGC,EAASF,IAEhB3C,KAAK8C,uBAAuB,IAAIlD,EAAc8C,EAAS,OAAOK,QAAKC,KAAIC,GAAOjD,KAAKS,kBAAkB2B,IAAI3C,EAAKwD,KAAI,EAAGC,KAAID,GAAOJ,EAASI,IACpJ,CASAE,gBAAgBC,EAAMjC,EAAY,IAC9B,MAAMkC,EAAMC,EAAQnC,EAAWiC,GAC/B,IAAIG,EAASvD,KAAKM,gBAAgBgC,IAAIe,GAEtC,GAAIE,EACA,OAAOvD,KAAKwD,kBAAkBD,GAIlC,GADAA,EAASvD,KAAKyD,4BAA4BtC,EAAWiC,GACjDG,EACA,OAAAvD,KAAKM,gBAAgB8B,IAAIiB,EAAKE,GACvBvD,KAAKwD,kBAAkBD,GAGlC,MAAMG,EAAiB1D,KAAKQ,gBAAgB8B,IAAInB,GAChD,OAAIuC,EACO1D,KAAK2D,0BAA0BP,EAAMM,IAAc,EAEvDE,KAAWvE,EAA4BgE,GAClD,CACAQ,cACI7D,KAAKY,WAAa,GAClBZ,KAAKM,gBAAgBwD,QACrB9D,KAAKQ,gBAAgBsD,QACrB9D,KAAKS,kBAAkBqD,OAC3B,CAIAN,kBAAkBD,GACd,OAAIA,EAAOzD,WAEA8C,MAAGC,EAAS7C,KAAK+D,sBAAsBR,KAIvCvD,KAAK8C,uBAAuBS,GAAQR,QAAKG,KAAID,GAAOJ,EAASI,IAE5E,CASAU,0BAA0BP,EAAMM,GAG5B,MAAMM,EAAYhE,KAAKiE,+BAA+Bb,EAAMM,GAC5D,GAAIM,EAIA,SAAOpB,MAAGoB,GAId,MAAME,EAAuBR,EACxBS,OAAOC,IAAkBA,EAActE,SACvCoD,IAAIkB,GACEpE,KAAKqE,0BAA0BD,GAAerB,QAAKuB,KAAYC,IAIlE,MAAMC,EAAgB,yBAHVxE,KAAKG,WAAWsB,SAASC,mBAA8B0C,EAAc3E,gBAGpB8E,EAAIE,UACjE,OAAAzE,KAAKK,cAAcqE,YAAY,IAAInF,MAAMiF,KAAa,EAC/C5B,MAAG,KAAI,KAKtB,SAAO+B,KAAST,GAAsBnB,QAAKG,KAAI,KAC3C,MAAM0B,EAAY5E,KAAKiE,+BAA+Bb,EAAMM,GAE5D,IAAKkB,EACD,MAAMvF,EAA4B+D,GAEtC,OAAOwB,IAEf,CAMAX,+BAA+B3E,EAAUoE,GAErC,QAASmB,EAAInB,EAAeoB,OAAS,EAAGD,GAAK,EAAGA,IAAK,CACjD,MAAMtB,EAASG,EAAemB,GAK9B,GAAItB,EAAOzD,SAAWyD,EAAOzD,QAAQiF,WAAWC,QAAQ1F,IAAY,EAAI,CACpE,MAAM2D,EAAMjD,KAAK+D,sBAAsBR,GACjCqB,EAAY5E,KAAKiF,uBAAuBhC,EAAK3D,EAAUiE,EAAOxD,SACpE,GAAI6E,EACA,OAAOA,GAInB,OAAO,IACX,CAKA9B,uBAAuBS,GACnB,OAAOvD,KAAKkF,WAAW3B,GAAQR,QAAKC,KAAIlD,GAAYyD,EAAOzD,QAAUA,IAAQ,EAAGoD,KAAI,IAAMlD,KAAK+D,sBAAsBR,IACzH,CAKAc,0BAA0Bd,GACtB,OAAIA,EAAOzD,WACA8C,MAAG,MAEP5C,KAAKkF,WAAW3B,GAAQR,QAAKC,KAAIlD,GAAYyD,EAAOzD,QAAUA,GACzE,CAMAmF,uBAAuBE,EAAS7F,EAAUS,GAGtC,MAAMqF,EAAaD,EAAQE,cAAe,QAAO/F,OACjD,IAAK8F,EACD,OAAO,KAIX,MAAME,EAAcF,EAAWG,WAAU,GAIzC,GAHAD,EAAYE,gBAAgB,MAGe,QAAvCF,EAAYG,SAASC,cACrB,OAAO1F,KAAK2F,kBAAkBL,EAAavF,GAK/C,GAA2C,WAAvCuF,EAAYG,SAASC,cACrB,OAAO1F,KAAK2F,kBAAkB3F,KAAK4F,cAAcN,GAAcvF,GAOnE,MAAMkD,EAAMjD,KAAK6F,sBAAsBlH,EAAsB,gBAE7DsE,SAAI6C,YAAYR,GACTtF,KAAK2F,kBAAkB1C,EAAKlD,EACvC,CAIA8F,sBAAsBE,GAClB,MAAMC,EAAMhG,KAAKc,UAAUmF,cAAc,OACzCD,EAAIE,UAAYH,EAChB,MAAM9C,EAAM+C,EAAIX,cAAc,OAE9B,IAAKpC,EACD,MAAM1D,MAAM,uBAEhB,OAAO0D,CACX,CAIA2C,cAAcO,GACV,MAAMlD,EAAMjD,KAAK6F,sBAAsBlH,EAAsB,gBACvDyH,EAAaD,EAAQC,WAE3B,QAASvB,EAAI,EAAGA,EAAIuB,EAAWtB,OAAQD,IAAK,CACxC,MAAQzB,OAAMiD,SAAUD,EAAWvB,GACtB,OAATzB,GACAH,EAAIqD,aAAalD,EAAMiD,EAAK,CAGpC,QAASxB,EAAI,EAAGA,EAAIsB,EAAQI,WAAWzB,OAAQD,IACvCsB,EAAQI,WAAW1B,GAAG2B,WAAaxG,KAAKc,UAAU2F,cAClDxD,EAAI6C,YAAYK,EAAQI,WAAW1B,GAAGU,WAAU,IAGxD,OAAOtC,CACX,CAIA0C,kBAAkB1C,EAAKlD,GACnBkD,SAAIqD,aAAa,MAAO,IACxBrD,EAAIqD,aAAa,SAAU,QAC3BrD,EAAIqD,aAAa,QAAS,QAC1BrD,EAAIqD,aAAa,sBAAuB,iBACxCrD,EAAIqD,aAAa,YAAa,SAC1BvG,GAAWA,EAAQ2G,SACnBzD,EAAIqD,aAAa,UAAWvG,EAAQ2G,SAEjCzD,CACX,CAKAiC,WAAWyB,GACP,MAAQlH,IAAKiD,EAAS3C,WAAY4G,EAC5BC,EAAkB7G,GAAS6G,kBAAmB,EACpD,IAAK5G,KAAKE,YACN,MAhcZ,SAAS2G,IACL,OAAOtH,MAAM,6JAGjB,CA4bkBsH,GAGV,GAAe,MAAXnE,EACA,MAAMnD,MAAO,+BAA8BmD,OAE/C,MAAMjD,EAAMO,KAAKG,WAAWsB,SAASC,mBAA8BgB,GAEnE,IAAKjD,EACD,MAAMD,EAAmCkD,GAK7C,MAAMoE,EAAkB9G,KAAKU,sBAAsB4B,IAAI7C,GACvD,GAAIqH,EACA,OAAOA,EAEX,MAAMC,EAAM/G,KAAKE,YAAYoC,IAAI7C,EAAK,CAAEuH,aAAc,OAAQJ,oBAAmB7D,QAAKG,KAAID,GAG/EtE,EAAsBsE,KAChC,EAAGgE,KAAS,IAAMjH,KAAKU,sBAAsBwG,OAAOzH,KAAI,EAAG0H,QAC5D,OAAAnH,KAAKU,sBAAsB0B,IAAI3C,EAAKsH,GAC7BA,CACX,CAOA3F,kBAAkBD,EAAW7B,EAAUiE,GACnC,OAAAvD,KAAKM,gBAAgB8B,IAAIkB,EAAQnC,EAAW7B,GAAWiE,GAChDvD,IACX,CAMAgC,qBAAqBb,EAAWoC,GAC5B,MAAM6D,EAAkBpH,KAAKQ,gBAAgB8B,IAAInB,GACjD,OAAIiG,EACAA,EAAgB7F,KAAKgC,GAGrBvD,KAAKQ,gBAAgB4B,IAAIjB,EAAW,CAACoC,IAElCvD,IACX,CAEA+D,sBAAsBR,GAClB,IAAKA,EAAO8D,WAAY,CACpB,MAAMpE,EAAMjD,KAAK6F,sBAAsBtC,EAAOzD,SAC9CE,KAAK2F,kBAAkB1C,EAAKM,EAAOxD,SACnCwD,EAAO8D,WAAapE,EAExB,OAAOM,EAAO8D,UAClB,CAEA5D,4BAA4BtC,EAAWiC,GACnC,QAASyB,EAAI,EAAGA,EAAI7E,KAAKY,WAAWkE,OAAQD,IAAK,CAC7C,MAAMyC,EAAStH,KAAKY,WAAWiE,GAAGzB,EAAMjC,GACxC,GAAImG,EACA,OAAOC,EAAqBD,GACtB,IAAI1H,EAAc0H,EAAO7H,IAAK,KAAM6H,EAAOvH,SAC3C,IAAIH,EAAc0H,EAAQ,KAAI,CAIhD,EA9dErH,SA+dYuH,UAAI,SAAAC,GAAA,WAAAA,GAAwFxH,GAAVyH,MAA2CC,KAAa,GAAxDD,MAAqFE,MAArFF,MAAiHG,KAAQ,GAAzHH,MAAsJA,OAAe,EA/dnQzH,EAgeY6H,WADkFJ,MAAE,CAAAK,MACY9H,EAAe+H,QAAf/H,EAAeuH,UAAAS,WAAc,SAhezIhI,CAAe,KA+frB,SAAS4C,EAASI,GACd,OAAOA,EAAIsC,WAAU,EACzB,CAEA,SAASjC,EAAQnC,EAAWiC,GACxB,OAAOjC,EAAY,IAAMiC,CAC7B,CACA,SAASmE,EAAqBlB,GAC1B,SAAUA,EAAM5G,MAAO4G,EAAMtG,QACjC,CAIA,MAAMmI,GAAeC,QAAW,MAC5BtI,YAAYuI,GACRpI,KAAKoI,YAAcA,CACvB,IAGEC,EAA2B,IAAIC,MAAe,4BAM9CC,EAAoB,IAAID,MAAe,oBAAqB,CAC9DL,WAAY,OACZD,QAGJ,SAASQ,IACL,MAAM1H,KAAY2H,OAAOZ,MACnBa,EAAY5H,EAAYA,EAAU6H,SAAW,KACnD,MAAO,CAGHC,YAAaA,IAAOF,EAAYA,EAAUG,SAAWH,EAAUI,OAAS,GAEhF,IAEMC,EAAoB,CACtB,YACA,gBACA,MACA,SACA,OACA,SACA,SACA,eACA,aACA,aACA,OACA,UAGEC,EAA2BD,EAAkB7F,IAAI+F,GAAS,IAAGA,MAASC,KAAK,MAE3EC,EAAiB,4BACvB,IAgCMC,EAAO,MAAb,MAAMA,UAAgBlB,EAKdmB,aACA,OAAOrJ,KAAKsJ,OAChB,CACID,WAAOA,GACPrJ,KAAKsJ,WAAUC,MAAsBF,EACzC,CAEIG,cACA,OAAOxJ,KAAKyJ,QAChB,CACID,YAAQnD,GACJA,IAAUrG,KAAKyJ,WACXpD,EACArG,KAAK0J,eAAerD,GAEfrG,KAAKyJ,UACVzJ,KAAK2J,mBAET3J,KAAKyJ,SAAWpD,EAExB,CAEIuD,cACA,OAAO5J,KAAK6J,QAChB,CACID,YAAQvD,GACR,MAAMyD,EAAW9J,KAAK+J,kBAAkB1D,GACpCyD,IAAa9J,KAAK6J,WAClB7J,KAAK6J,SAAWC,EAChB9J,KAAKgK,yBAEb,CAEIC,eACA,OAAOjK,KAAKkK,SAChB,CACID,aAAS5D,GACT,MAAMyD,EAAW9J,KAAK+J,kBAAkB1D,GACpCyD,IAAa9J,KAAKkK,YAClBlK,KAAKkK,UAAYJ,EACjB9J,KAAKgK,yBAEb,CACAnK,YAAYsK,EAAYC,EAAeC,EAAY3B,EAAWrI,EAAeiK,GACzEC,MAAMJ,GACNnK,KAAKoK,cAAgBA,EACrBpK,KAAK0I,UAAYA,EACjB1I,KAAKK,cAAgBA,EACrBL,KAAKsJ,SAAU,EACftJ,KAAKwK,sBAAwB,GAE7BxK,KAAKyK,kBAAoBC,UACrBJ,IACIA,EAASK,QACT3K,KAAK2K,MAAQ3K,KAAK4K,aAAeN,EAASK,OAE1CL,EAASV,UACT5J,KAAK4J,QAAUU,EAASV,UAK3BS,GACDF,EAAWU,cAAcvE,aAAa,cAAe,OAE7D,CAcAwE,eAAexL,GACX,IAAKA,EACD,MAAO,CAAC,GAAI,IAEhB,MAAMyL,EAAQzL,EAAS0L,MAAM,KAC7B,OAAQD,EAAMjG,QACV,KAAK,EACD,MAAO,CAAC,GAAIiG,EAAM,IACtB,KAAK,EACD,OAAOA,EACX,QACI,MAAMxL,MAAO,uBAAsBD,MAE/C,CACA2L,WAGIjL,KAAKgK,wBACT,CACAkB,qBACI,MAAMC,EAAiBnL,KAAKoL,gCAC5B,GAAID,GAAkBA,EAAeE,KAAM,CACvC,MAAMC,EAAUtL,KAAK0I,UAAUE,cAO3B0C,IAAYtL,KAAKuL,gBACjBvL,KAAKuL,cAAgBD,EACrBtL,KAAKwL,yBAAyBF,GAAO,CAGjD,CACAzH,cACI7D,KAAKyK,kBAAkBgB,cACnBzL,KAAKoL,iCACLpL,KAAKoL,gCAAgCtH,OAE7C,CACA4H,iBACI,OAAQ1L,KAAKwJ,OACjB,CACAmC,eAAe1I,GACXjD,KAAK2J,mBAGL,MAAMiC,EAAO5L,KAAK0I,UAAUE,cAC5B5I,KAAKuL,cAAgBK,EACrB5L,KAAK6L,qCAAqC5I,GAC1CjD,KAAKwL,yBAAyBI,GAC9B5L,KAAKoI,YAAYyC,cAAc/E,YAAY7C,EAC/C,CACA0G,mBACI,MAAMmC,EAAgB9L,KAAKoI,YAAYyC,cACvC,IAAIkB,EAAaD,EAAcvF,WAAWzB,OAM1C,IALI9E,KAAKoL,iCACLpL,KAAKoL,gCAAgCtH,QAIlCiI,KAAc,CACjB,MAAMC,EAAQF,EAAcvF,WAAWwF,IAGhB,IAAnBC,EAAMxF,UAAmD,QAAjCwF,EAAMvG,SAASC,gBACvCsG,EAAMC,QAAO,CAGzB,CACAjC,yBACI,IAAKhK,KAAK0L,iBACN,OAEJ,MAAMQ,EAAOlM,KAAKoI,YAAYyC,cACxBsB,GAAkBnM,KAAK4J,QACvB5J,KAAKoK,cAAc/H,sBAAsBrC,KAAK4J,SAASoB,MAAM,MAC7DhL,KAAKoK,cAAc5H,0BAA0B2B,OAAOiI,GAAaA,EAAUtH,OAAS,GAC1F9E,KAAKwK,sBAAsB6B,QAAQD,GAAaF,EAAKI,UAAUL,OAAOG,IACtED,EAAeE,QAAQD,GAAaF,EAAKI,UAAUC,IAAIH,IACvDpM,KAAKwK,sBAAwB2B,EACzBnM,KAAKiK,WAAajK,KAAKwM,yBACtBL,EAAeM,SAAS,uBACrBzM,KAAKwM,wBACLN,EAAKI,UAAUL,OAAOjM,KAAKwM,wBAE3BxM,KAAKiK,UACLiC,EAAKI,UAAUC,IAAIvM,KAAKiK,UAE5BjK,KAAKwM,uBAAyBxM,KAAKiK,SAE3C,CAMAF,kBAAkB1D,GACd,MAAwB,iBAAVA,EAAqBA,EAAMqG,OAAO1B,MAAM,KAAK,GAAK3E,CACpE,CAMAmF,yBAAyBI,GACrB,MAAMe,EAAW3M,KAAKoL,gCAClBuB,GACAA,EAASN,QAAQ,CAACO,EAAOzG,KACrByG,EAAMP,QAAQpD,IACV9C,EAAQG,aAAa2C,EAAK7F,KAAO,QAAOwI,KAAQ3C,EAAK5C,UAAS,EACjE,EAGb,CAKAwF,qCAAqC1F,GACjC,MAAM0G,EAAsB1G,EAAQ2G,iBAAiB9D,GAC/C2D,EAAY3M,KAAKoL,gCACnBpL,KAAKoL,iCAAmC,IAAI7K,IAChD,QAASsE,EAAI,EAAGA,EAAIgI,EAAoB/H,OAAQD,IAC5CkE,EAAkBsD,QAAQpD,IACtB,MAAM8D,EAAuBF,EAAoBhI,GAC3CwB,EAAQ0G,EAAqBC,aAAa/D,GAC1CgE,EAAQ5G,EAAQA,EAAM4G,MAAM9D,GAAkB,KACpD,GAAI8D,EAAO,CACP,IAAI7G,EAAauG,EAASrK,IAAIyK,GACzB3G,IACDA,EAAa,GACbuG,EAASvK,IAAI2K,EAAsB3G,IAEvCA,EAAW7E,KAAK,CAAE6B,KAAM6F,EAAM5C,MAAO4G,EAAM,IAAI,GAI/D,CAEAvD,eAAewD,GAIX,GAHAlN,KAAKmN,cAAgB,KACrBnN,KAAKoN,SAAW,KAChBpN,KAAKyK,kBAAkBgB,cACnByB,EAAS,CACT,MAAO/L,EAAW7B,GAAYU,KAAK8K,eAAeoC,GAC9C/L,IACAnB,KAAKmN,cAAgBhM,GAErB7B,IACAU,KAAKoN,SAAW9N,GAEpBU,KAAKyK,kBAAoBzK,KAAKoK,cACzBjH,gBAAgB7D,EAAU6B,GAC1B4B,QAAKsK,KAAK,IACVC,UAAUrK,GAAOjD,KAAK2L,eAAe1I,GAAOsB,IAE7CvE,KAAKK,cAAcqE,YAAY,IAAInF,MADb,yBAAwB4B,KAAa7B,MAAaiF,EAAIE,WACtB,EACzD,CAET,EArPE2E,SAsPY5B,UAAI,SAAAC,GAAA,WAAAA,GAAwF2B,GAhXV1B,MAgXmCA,OAhXnCA,MAgX6DzH,GAhX7DyH,MAgXyF,eAhXzFA,MAgXoIa,GAhXpIb,MAgXkKA,OAhXlKA,MAgX8LW,EAAwB,KAtPpTe,EAuPYmE,UAjXkF7F,MAAE,CAAA8F,KAiXJpE,EAAOqE,UAAA,eAAAC,UAAA,QAAkK,MAAK,4BAAAC,SAAA,EAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,IAjX5KnG,MAAE,qBAAAoG,EAAApC,iBAAA,aAAFhE,CAAE,qBAAAoG,EAAAV,UAAAU,EAAA7D,SAAFvC,CAAE,0BAAAoG,EAAAX,eAAAW,EAAAlE,QAAFlC,CAAE,WAAAoG,EAAApC,iBAAAoC,EAAA7D,SAAA,MAAFvC,MAAE,kBAAAoG,EAAAzE,OAAF3B,CAAE,gCAAAoG,EAAAnD,OAAA,WAAAmD,EAAAnD,OAAA,SAAAmD,EAAAnD,OAAA,EAAAoD,OAAA,CAAApD,MAAA,QAAAtB,OAAA,SAAAG,QAAA,UAAAI,QAAA,UAAAK,SAAA,YAAA+D,SAAA,YAAAC,SAAA,CAAFvG,OAAEwG,mBAAAzP,EAAA0P,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAR,EAAAC,GAAA,EAAAD,IAAFnG,cAAE,GAiXurB,EAAA4G,OAAA,uxBAAAC,cAAA,EAAAC,gBAAA,IAvPvxBpF,CAAO,KA0RPqF,EAAa,MAAnB,MAAMA,YACYjH,UAAI,SAAAC,GAAA,WAAAA,GAAwFgH,EAAa,EADrHA,EAEYC,UAtZkFhH,MAAE,CAAA8F,KAsZSiB,IAFzGA,EAGYE,UAvZkFjH,MAAE,CAAAkH,QAAA,CAuZkCC,KAAiBA,QAHnJJ,CAAa","names":["_c0","policy","trustedHTMLFromString","html","getPolicy","undefined","window","ttWindow","trustedTypes","createPolicy","createHTML","s","getMatIconNameNotFoundError","iconName","Error","getMatIconFailedToSanitizeUrlError","url","getMatIconFailedToSanitizeLiteralError","literal","SvgIconConfig","constructor","svgText","options","this","MatIconRegistry","_httpClient","_sanitizer","document","_errorHandler","_svgIconConfigs","Map","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_resolvers","_defaultFontSetClass","_document","addSvgIcon","addSvgIconInNamespace","addSvgIconLiteral","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","addSvgIconResolver","resolver","push","cleanLiteral","sanitize","SecurityContext","trustedLiteral","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","registerFontClassAlias","alias","classNames","set","classNameForFontAlias","get","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","cachedIcon","of","cloneSvg","_loadSvgIconFromConfig","pipe","tap","svg","map","getNamedSvgIcon","name","key","iconKey","config","_getSvgFromConfig","_getIconConfigFromResolvers","iconSetConfigs","_getSvgFromIconSetConfigs","throwError","ngOnDestroy","clear","_svgElementFromConfig","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","filter","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","errorMessage","message","handleError","forkJoin","foundIcon","i","length","toString","indexOf","_extractSvgIconFromSet","_fetchIcon","iconSet","iconSource","querySelector","iconElement","cloneNode","removeAttribute","nodeName","toLowerCase","_setSvgAttributes","_toSvgElement","_svgElementFromString","appendChild","str","div","createElement","innerHTML","element","attributes","value","setAttribute","childNodes","nodeType","ELEMENT_NODE","viewBox","iconConfig","withCredentials","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","delete","share","configNamespace","svgElement","result","isSafeUrlWithOptions","ɵfac","t","i0","i1","i2","DOCUMENT","ɵprov","token","factory","providedIn","_MatIconBase","mixinColor","_elementRef","MAT_ICON_DEFAULT_OPTIONS","InjectionToken","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","inject","_location","location","getPathname","pathname","search","funcIriAttributes","funcIriAttributeSelector","attr","join","funcIriPattern","MatIcon","inline","_inline","coerceBooleanProperty","svgIcon","_svgIcon","_updateSvgIcon","_clearSvgElement","fontSet","_fontSet","newValue","_cleanupFontValue","_updateFontIconClasses","fontIcon","_fontIcon","elementRef","_iconRegistry","ariaHidden","defaults","super","_previousFontSetClass","_currentIconFetch","Subscription","color","defaultColor","nativeElement","_splitIconName","parts","split","ngOnInit","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","size","newPath","_previousPath","_prependPathToReferences","unsubscribe","_usingFontIcon","_setSvgElement","path","_cacheChildrenWithExternalReferences","layoutElement","childCount","child","remove","elem","fontSetClasses","className","forEach","classList","add","_previousFontIconClass","includes","trim","elements","attrs","elementsWithFuncIri","querySelectorAll","elementWithReference","getAttribute","match","rawName","_svgNamespace","_svgName","take","subscribe","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","inputs","exportAs","features","ngContentSelectors","decls","vars","template","styles","encapsulation","changeDetection","MatIconModule","ɵmod","ɵinj","imports","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/icon.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { SecurityContext, Injectable, Optional, Inject, SkipSelf, ErrorHandler, InjectionToken, inject, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { of, throwError, forkJoin, Subscription } from 'rxjs';\nimport { tap, map, catchError, finalize, share, take } from 'rxjs/operators';\nimport * as i1 from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport * as i2 from '@angular/platform-browser';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy;\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy() {\n    if (policy === undefined) {\n        policy = null;\n        if (typeof window !== 'undefined') {\n            const ttWindow = window;\n            if (ttWindow.trustedTypes !== undefined) {\n                policy = ttWindow.trustedTypes.createPolicy('angular#components', {\n                    createHTML: (s) => s,\n                });\n            }\n        }\n    }\n    return policy;\n}\n/**\n * Unsafely promote a string to a TrustedHTML, falling back to strings when\n * Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, it must be assured that the\n * provided string will never cause an XSS vulnerability if used in a context\n * that will be interpreted as HTML by a browser, e.g. when assigning to\n * element.innerHTML.\n */\nfunction trustedHTMLFromString(html) {\n    return getPolicy()?.createHTML(html) || html;\n}\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nfunction getMatIconNameNotFoundError(iconName) {\n    return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nfunction getMatIconNoHttpProviderError() {\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n        'Please include the HttpClientModule from @angular/common/http in your ' +\n        'app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeUrlError(url) {\n    return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n        `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\n    return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n        `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n    constructor(url, svgText, options) {\n        this.url = url;\n        this.svgText = svgText;\n        this.options = options;\n    }\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nclass MatIconRegistry {\n    constructor(_httpClient, _sanitizer, document, _errorHandler) {\n        this._httpClient = _httpClient;\n        this._sanitizer = _sanitizer;\n        this._errorHandler = _errorHandler;\n        /**\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n         */\n        this._svgIconConfigs = new Map();\n        /**\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n         * Multiple icon sets can be registered under the same namespace.\n         */\n        this._iconSetConfigs = new Map();\n        /** Cache for icons loaded by direct URLs. */\n        this._cachedIconsByUrl = new Map();\n        /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n        this._inProgressUrlFetches = new Map();\n        /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n        this._fontCssClassesByAlias = new Map();\n        /** Registered icon resolver functions. */\n        this._resolvers = [];\n        /**\n         * The CSS classes to apply when an `<mat-icon>` component has no icon name, url, or font\n         * specified. The default 'material-icons' value assumes that the material icon font has been\n         * loaded as described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n         */\n        this._defaultFontSetClass = ['material-icons', 'mat-ligature-font'];\n        this._document = document;\n    }\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName, url, options) {\n        return this.addSvgIconInNamespace('', iconName, url, options);\n    }\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName, literal, options) {\n        return this.addSvgIconLiteralInNamespace('', iconName, literal, options);\n    }\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace, iconName, url, options) {\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver) {\n        this._resolvers.push(resolver);\n        return this;\n    }\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace, iconName, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        // TODO: add an ngDevMode check\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url, options) {\n        return this.addSvgIconSetInNamespace('', url, options);\n    }\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal, options) {\n        return this.addSvgIconSetLiteralInNamespace('', literal, options);\n    }\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace, url, options) {\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url, null, options));\n    }\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace, literal, options) {\n        const cleanLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n        if (!cleanLiteral) {\n            throw getMatIconFailedToSanitizeLiteralError(literal);\n        }\n        // Security: The literal is passed in as SafeHtml, and is thus trusted.\n        const trustedLiteral = trustedHTMLFromString(cleanLiteral);\n        return this._addSvgIconSetConfig(namespace, new SvgIconConfig('', trustedLiteral, options));\n    }\n    /**\n     * Defines an alias for CSS class names to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * If the registered font is a ligature font, then don't forget to also include the special\n     * class `mat-ligature-font` to allow the usage via attribute. So register like this:\n     *\n     * ```ts\n     * iconRegistry.registerFontClassAlias('f1', 'font1 mat-ligature-font');\n     * ```\n     *\n     * And use like this:\n     *\n     * ```html\n     * <mat-icon fontSet=\"f1\" fontIcon=\"home\"></mat-icon>\n     * ```\n     *\n     * @param alias Alias for the font.\n     * @param classNames Class names override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias, classNames = alias) {\n        this._fontCssClassesByAlias.set(alias, classNames);\n        return this;\n    }\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias) {\n        return this._fontCssClassesByAlias.get(alias) || alias;\n    }\n    /**\n     * Sets the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    setDefaultFontSetClass(...classNames) {\n        this._defaultFontSetClass = classNames;\n        return this;\n    }\n    /**\n     * Returns the CSS classes to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass() {\n        return this._defaultFontSetClass;\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl) {\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        const cachedIcon = this._cachedIconsByUrl.get(url);\n        if (cachedIcon) {\n            return of(cloneSvg(cachedIcon));\n        }\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl, null)).pipe(tap(svg => this._cachedIconsByUrl.set(url, svg)), map(svg => cloneSvg(svg)));\n    }\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name, namespace = '') {\n        const key = iconKey(namespace, name);\n        let config = this._svgIconConfigs.get(key);\n        // Return (copy of) cached icon if possible.\n        if (config) {\n            return this._getSvgFromConfig(config);\n        }\n        // Otherwise try to resolve the config from one of the resolver functions.\n        config = this._getIconConfigFromResolvers(namespace, name);\n        if (config) {\n            this._svgIconConfigs.set(key, config);\n            return this._getSvgFromConfig(config);\n        }\n        // See if we have any icon sets registered for the namespace.\n        const iconSetConfigs = this._iconSetConfigs.get(namespace);\n        if (iconSetConfigs) {\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n        }\n        return throwError(getMatIconNameNotFoundError(key));\n    }\n    ngOnDestroy() {\n        this._resolvers = [];\n        this._svgIconConfigs.clear();\n        this._iconSetConfigs.clear();\n        this._cachedIconsByUrl.clear();\n    }\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    _getSvgFromConfig(config) {\n        if (config.svgText) {\n            // We already have the SVG element for this icon, return a copy.\n            return of(cloneSvg(this._svgElementFromConfig(config)));\n        }\n        else {\n            // Fetch the icon from the config's URL, cache it, and return a copy.\n            return this._loadSvgIconFromConfig(config).pipe(map(svg => cloneSvg(svg)));\n        }\n    }\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    _getSvgFromIconSetConfigs(name, iconSetConfigs) {\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n        // requested name.\n        const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n        if (namedIcon) {\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n            // time anyway, there's probably not much advantage compared to just always extracting\n            // it from the icon set.\n            return of(namedIcon);\n        }\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n        // fetched, fetch them now and look for iconName in the results.\n        const iconSetFetchRequests = iconSetConfigs\n            .filter(iconSetConfig => !iconSetConfig.svgText)\n            .map(iconSetConfig => {\n            return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((err) => {\n                const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n                // Swallow errors fetching individual URLs so the\n                // combined Observable won't necessarily fail.\n                const errorMessage = `Loading icon set URL: ${url} failed: ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n                return of(null);\n            }));\n        });\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n        // cached SVG element (unless the request failed), and we can check again for the icon.\n        return forkJoin(iconSetFetchRequests).pipe(map(() => {\n            const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n            // TODO: add an ngDevMode check\n            if (!foundIcon) {\n                throw getMatIconNameNotFoundError(name);\n            }\n            return foundIcon;\n        }));\n    }\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractIconWithNameFromAnySet(iconName, iconSetConfigs) {\n        // Iterate backwards, so icon sets added later have precedence.\n        for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n            const config = iconSetConfigs[i];\n            // Parsing the icon set's text into an SVG element can be expensive. We can avoid some of\n            // the parsing by doing a quick check using `indexOf` to see if there's any chance for the\n            // icon to be in the set. This won't be 100% accurate, but it should help us avoid at least\n            // some of the parsing.\n            if (config.svgText && config.svgText.toString().indexOf(iconName) > -1) {\n                const svg = this._svgElementFromConfig(config);\n                const foundIcon = this._extractSvgIconFromSet(svg, iconName, config.options);\n                if (foundIcon) {\n                    return foundIcon;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    _loadSvgIconFromConfig(config) {\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)), map(() => this._svgElementFromConfig(config)));\n    }\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    _loadSvgIconSetFromConfig(config) {\n        if (config.svgText) {\n            return of(null);\n        }\n        return this._fetchIcon(config).pipe(tap(svgText => (config.svgText = svgText)));\n    }\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    _extractSvgIconFromSet(iconSet, iconName, options) {\n        // Use the `id=\"iconName\"` syntax in order to escape special\n        // characters in the ID (versus using the #iconName syntax).\n        const iconSource = iconSet.querySelector(`[id=\"${iconName}\"]`);\n        if (!iconSource) {\n            return null;\n        }\n        // Clone the element and remove the ID to prevent multiple elements from being added\n        // to the page with the same ID.\n        const iconElement = iconSource.cloneNode(true);\n        iconElement.removeAttribute('id');\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n        // the content of a new <svg> node.\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\n            return this._setSvgAttributes(iconElement, options);\n        }\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n        // tag is problematic on Firefox, because it needs to include the current page path.\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\n        }\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\n        // the correct nodes, but the SVG content doesn't render. Instead we\n        // have to create an empty SVG node using innerHTML and append its content.\n        // Elements created using DOMParser.parseFromString have the same problem.\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        // Clone the node so we don't remove it from the parent icon set element.\n        svg.appendChild(iconElement);\n        return this._setSvgAttributes(svg, options);\n    }\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    _svgElementFromString(str) {\n        const div = this._document.createElement('DIV');\n        div.innerHTML = str;\n        const svg = div.querySelector('svg');\n        // TODO: add an ngDevMode check\n        if (!svg) {\n            throw Error('<svg> tag not found');\n        }\n        return svg;\n    }\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    _toSvgElement(element) {\n        const svg = this._svgElementFromString(trustedHTMLFromString('<svg></svg>'));\n        const attributes = element.attributes;\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\n        for (let i = 0; i < attributes.length; i++) {\n            const { name, value } = attributes[i];\n            if (name !== 'id') {\n                svg.setAttribute(name, value);\n            }\n        }\n        for (let i = 0; i < element.childNodes.length; i++) {\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n                svg.appendChild(element.childNodes[i].cloneNode(true));\n            }\n        }\n        return svg;\n    }\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    _setSvgAttributes(svg, options) {\n        svg.setAttribute('fit', '');\n        svg.setAttribute('height', '100%');\n        svg.setAttribute('width', '100%');\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n        if (options && options.viewBox) {\n            svg.setAttribute('viewBox', options.viewBox);\n        }\n        return svg;\n    }\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    _fetchIcon(iconConfig) {\n        const { url: safeUrl, options } = iconConfig;\n        const withCredentials = options?.withCredentials ?? false;\n        if (!this._httpClient) {\n            throw getMatIconNoHttpProviderError();\n        }\n        // TODO: add an ngDevMode check\n        if (safeUrl == null) {\n            throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n        }\n        const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n        // TODO: add an ngDevMode check\n        if (!url) {\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\n        }\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n        // already a request in progress for that URL. It's necessary to call share() on the\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n        const inProgressFetch = this._inProgressUrlFetches.get(url);\n        if (inProgressFetch) {\n            return inProgressFetch;\n        }\n        const req = this._httpClient.get(url, { responseType: 'text', withCredentials }).pipe(map(svg => {\n            // Security: This SVG is fetched from a SafeResourceUrl, and is thus\n            // trusted HTML.\n            return trustedHTMLFromString(svg);\n        }), finalize(() => this._inProgressUrlFetches.delete(url)), share());\n        this._inProgressUrlFetches.set(url, req);\n        return req;\n    }\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconConfig(namespace, iconName, config) {\n        this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n        return this;\n    }\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    _addSvgIconSetConfig(namespace, config) {\n        const configNamespace = this._iconSetConfigs.get(namespace);\n        if (configNamespace) {\n            configNamespace.push(config);\n        }\n        else {\n            this._iconSetConfigs.set(namespace, [config]);\n        }\n        return this;\n    }\n    /** Parses a config's text into an SVG element. */\n    _svgElementFromConfig(config) {\n        if (!config.svgElement) {\n            const svg = this._svgElementFromString(config.svgText);\n            this._setSvgAttributes(svg, config.options);\n            config.svgElement = svg;\n        }\n        return config.svgElement;\n    }\n    /** Tries to create an icon config through the registered resolver functions. */\n    _getIconConfigFromResolvers(namespace, name) {\n        for (let i = 0; i < this._resolvers.length; i++) {\n            const result = this._resolvers[i](name, namespace);\n            if (result) {\n                return isSafeUrlWithOptions(result)\n                    ? new SvgIconConfig(result.url, null, result.options)\n                    : new SvgIconConfig(result, null);\n            }\n        }\n        return undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, deps: [{ token: i1.HttpClient, optional: true }, { token: i2.DomSanitizer }, { token: DOCUMENT, optional: true }, { token: i0.ErrorHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i1.HttpClient, decorators: [{\n                    type: Optional\n                }] }, { type: i2.DomSanitizer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ErrorHandler }]; } });\n/** @docs-private */\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, errorHandler, document) {\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\n}\n/** @docs-private */\nconst ICON_REGISTRY_PROVIDER = {\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n    provide: MatIconRegistry,\n    deps: [\n        [new Optional(), new SkipSelf(), MatIconRegistry],\n        [new Optional(), HttpClient],\n        DomSanitizer,\n        ErrorHandler,\n        [new Optional(), DOCUMENT],\n    ],\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg) {\n    return svg.cloneNode(true);\n}\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace, name) {\n    return namespace + ':' + name;\n}\nfunction isSafeUrlWithOptions(value) {\n    return !!(value.url && value.options);\n}\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nconst _MatIconBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n});\n/** Injection token to be used to override the default options for `mat-icon`. */\nconst MAT_ICON_DEFAULT_OPTIONS = new InjectionToken('MAT_ICON_DEFAULT_OPTIONS');\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nconst MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\n    providedIn: 'root',\n    factory: MAT_ICON_LOCATION_FACTORY,\n});\n/** @docs-private */\nfunction MAT_ICON_LOCATION_FACTORY() {\n    const _document = inject(DOCUMENT);\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: () => (_location ? _location.pathname + _location.search : ''),\n    };\n}\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n    'clip-path',\n    'color-profile',\n    'src',\n    'cursor',\n    'fill',\n    'filter',\n    'marker',\n    'marker-start',\n    'marker-mid',\n    'marker-end',\n    'mask',\n    'stroke',\n];\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the `fontIcon` attribute or the\n *   content of the `<mat-icon>` component. If you register a custom font class, don't forget to also\n *   include the special class `mat-ligature-font`. It is recommended to use the attribute alternative\n *   to prevent the ligature text to be selectable and to appear in search engine results.\n *   By default, the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon fontIcon=\"home\"></mat-icon>\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\" fontIcon=\"sun\"></mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\nclass MatIcon extends _MatIconBase {\n    /**\n     * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n     * the element the icon is contained in.\n     */\n    get inline() {\n        return this._inline;\n    }\n    set inline(inline) {\n        this._inline = coerceBooleanProperty(inline);\n    }\n    /** Name of the icon in the SVG icon set. */\n    get svgIcon() {\n        return this._svgIcon;\n    }\n    set svgIcon(value) {\n        if (value !== this._svgIcon) {\n            if (value) {\n                this._updateSvgIcon(value);\n            }\n            else if (this._svgIcon) {\n                this._clearSvgElement();\n            }\n            this._svgIcon = value;\n        }\n    }\n    /** Font set that the icon is a part of. */\n    get fontSet() {\n        return this._fontSet;\n    }\n    set fontSet(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontSet) {\n            this._fontSet = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    /** Name of an icon within a font set. */\n    get fontIcon() {\n        return this._fontIcon;\n    }\n    set fontIcon(value) {\n        const newValue = this._cleanupFontValue(value);\n        if (newValue !== this._fontIcon) {\n            this._fontIcon = newValue;\n            this._updateFontIconClasses();\n        }\n    }\n    constructor(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler, defaults) {\n        super(elementRef);\n        this._iconRegistry = _iconRegistry;\n        this._location = _location;\n        this._errorHandler = _errorHandler;\n        this._inline = false;\n        this._previousFontSetClass = [];\n        /** Subscription to the current in-progress SVG icon request. */\n        this._currentIconFetch = Subscription.EMPTY;\n        if (defaults) {\n            if (defaults.color) {\n                this.color = this.defaultColor = defaults.color;\n            }\n            if (defaults.fontSet) {\n                this.fontSet = defaults.fontSet;\n            }\n        }\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n        // the right thing to do for the majority of icon use-cases.\n        if (!ariaHidden) {\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n        }\n    }\n    /**\n     * Splits an svgIcon binding value into its icon set and icon name components.\n     * Returns a 2-element array of [(icon set), (icon name)].\n     * The separator for the two fields is ':'. If there is no separator, an empty\n     * string is returned for the icon set and the entire value is returned for\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\n     * Throws an error if the name contains two or more ':' separators.\n     * Examples:\n     *   `'social:cake' -> ['social', 'cake']\n     *   'penguin' -> ['', 'penguin']\n     *   null -> ['', '']\n     *   'a:b:c' -> (throws Error)`\n     */\n    _splitIconName(iconName) {\n        if (!iconName) {\n            return ['', ''];\n        }\n        const parts = iconName.split(':');\n        switch (parts.length) {\n            case 1:\n                return ['', parts[0]]; // Use default namespace.\n            case 2:\n                return parts;\n            default:\n                throw Error(`Invalid icon name: \"${iconName}\"`); // TODO: add an ngDevMode check\n        }\n    }\n    ngOnInit() {\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n        this._updateFontIconClasses();\n    }\n    ngAfterViewChecked() {\n        const cachedElements = this._elementsWithExternalReferences;\n        if (cachedElements && cachedElements.size) {\n            const newPath = this._location.getPathname();\n            // We need to check whether the URL has changed on each change detection since\n            // the browser doesn't have an API that will let us react on link clicks and\n            // we can't depend on the Angular router. The references need to be updated,\n            // because while most browsers don't care whether the URL is correct after\n            // the first render, Safari will break if the user navigates to a different\n            // page and the SVG isn't re-rendered.\n            if (newPath !== this._previousPath) {\n                this._previousPath = newPath;\n                this._prependPathToReferences(newPath);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._currentIconFetch.unsubscribe();\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n    }\n    _usingFontIcon() {\n        return !this.svgIcon;\n    }\n    _setSvgElement(svg) {\n        this._clearSvgElement();\n        // Note: we do this fix here, rather than the icon registry, because the\n        // references have to point to the URL at the time that the icon was created.\n        const path = this._location.getPathname();\n        this._previousPath = path;\n        this._cacheChildrenWithExternalReferences(svg);\n        this._prependPathToReferences(path);\n        this._elementRef.nativeElement.appendChild(svg);\n    }\n    _clearSvgElement() {\n        const layoutElement = this._elementRef.nativeElement;\n        let childCount = layoutElement.childNodes.length;\n        if (this._elementsWithExternalReferences) {\n            this._elementsWithExternalReferences.clear();\n        }\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\n        while (childCount--) {\n            const child = layoutElement.childNodes[childCount];\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n                child.remove();\n            }\n        }\n    }\n    _updateFontIconClasses() {\n        if (!this._usingFontIcon()) {\n            return;\n        }\n        const elem = this._elementRef.nativeElement;\n        const fontSetClasses = (this.fontSet\n            ? this._iconRegistry.classNameForFontAlias(this.fontSet).split(/ +/)\n            : this._iconRegistry.getDefaultFontSetClass()).filter(className => className.length > 0);\n        this._previousFontSetClass.forEach(className => elem.classList.remove(className));\n        fontSetClasses.forEach(className => elem.classList.add(className));\n        this._previousFontSetClass = fontSetClasses;\n        if (this.fontIcon !== this._previousFontIconClass &&\n            !fontSetClasses.includes('mat-ligature-font')) {\n            if (this._previousFontIconClass) {\n                elem.classList.remove(this._previousFontIconClass);\n            }\n            if (this.fontIcon) {\n                elem.classList.add(this.fontIcon);\n            }\n            this._previousFontIconClass = this.fontIcon;\n        }\n    }\n    /**\n     * Cleans up a value to be used as a fontIcon or fontSet.\n     * Since the value ends up being assigned as a CSS class, we\n     * have to trim the value and omit space-separated values.\n     */\n    _cleanupFontValue(value) {\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n    }\n    /**\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n     * reference. This is required because WebKit browsers require references to be prefixed with\n     * the current path, if the page has a `base` tag.\n     */\n    _prependPathToReferences(path) {\n        const elements = this._elementsWithExternalReferences;\n        if (elements) {\n            elements.forEach((attrs, element) => {\n                attrs.forEach(attr => {\n                    element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n                });\n            });\n        }\n    }\n    /**\n     * Caches the children of an SVG element that have `url()`\n     * references that we need to prefix with the current path.\n     */\n    _cacheChildrenWithExternalReferences(element) {\n        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n        const elements = (this._elementsWithExternalReferences =\n            this._elementsWithExternalReferences || new Map());\n        for (let i = 0; i < elementsWithFuncIri.length; i++) {\n            funcIriAttributes.forEach(attr => {\n                const elementWithReference = elementsWithFuncIri[i];\n                const value = elementWithReference.getAttribute(attr);\n                const match = value ? value.match(funcIriPattern) : null;\n                if (match) {\n                    let attributes = elements.get(elementWithReference);\n                    if (!attributes) {\n                        attributes = [];\n                        elements.set(elementWithReference, attributes);\n                    }\n                    attributes.push({ name: attr, value: match[1] });\n                }\n            });\n        }\n    }\n    /** Sets a new SVG icon with a particular name. */\n    _updateSvgIcon(rawName) {\n        this._svgNamespace = null;\n        this._svgName = null;\n        this._currentIconFetch.unsubscribe();\n        if (rawName) {\n            const [namespace, iconName] = this._splitIconName(rawName);\n            if (namespace) {\n                this._svgNamespace = namespace;\n            }\n            if (iconName) {\n                this._svgName = iconName;\n            }\n            this._currentIconFetch = this._iconRegistry\n                .getNamedSvgIcon(iconName, namespace)\n                .pipe(take(1))\n                .subscribe(svg => this._setSvgElement(svg), (err) => {\n                const errorMessage = `Error retrieving icon ${namespace}:${iconName}! ${err.message}`;\n                this._errorHandler.handleError(new Error(errorMessage));\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, deps: [{ token: i0.ElementRef }, { token: MatIconRegistry }, { token: 'aria-hidden', attribute: true }, { token: MAT_ICON_LOCATION }, { token: i0.ErrorHandler }, { token: MAT_ICON_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.0\", type: MatIcon, selector: \"mat-icon\", inputs: { color: \"color\", inline: \"inline\", svgIcon: \"svgIcon\", fontSet: \"fontSet\", fontIcon: \"fontIcon\" }, host: { attributes: { \"role\": \"img\" }, properties: { \"attr.data-mat-icon-type\": \"_usingFontIcon() ? \\\"font\\\" : \\\"svg\\\"\", \"attr.data-mat-icon-name\": \"_svgName || fontIcon\", \"attr.data-mat-icon-namespace\": \"_svgNamespace || fontSet\", \"attr.fontIcon\": \"_usingFontIcon() ? fontIcon : null\", \"class.mat-icon-inline\": \"inline\", \"class.mat-icon-no-color\": \"color !== \\\"primary\\\" && color !== \\\"accent\\\" && color !== \\\"warn\\\"\" }, classAttribute: \"mat-icon notranslate\" }, exportAs: [\"matIcon\"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIcon, decorators: [{\n            type: Component,\n            args: [{ template: '<ng-content></ng-content>', selector: 'mat-icon', exportAs: 'matIcon', inputs: ['color'], host: {\n                        'role': 'img',\n                        'class': 'mat-icon notranslate',\n                        '[attr.data-mat-icon-type]': '_usingFontIcon() ? \"font\" : \"svg\"',\n                        '[attr.data-mat-icon-name]': '_svgName || fontIcon',\n                        '[attr.data-mat-icon-namespace]': '_svgNamespace || fontSet',\n                        '[attr.fontIcon]': '_usingFontIcon() ? fontIcon : null',\n                        '[class.mat-icon-inline]': 'inline',\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-icon{-webkit-user-select:none;user-select:none;background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px;overflow:hidden}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}.mat-icon.mat-ligature-font[fontIcon]::before{content:attr(fontIcon)}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1, 1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: MatIconRegistry }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['aria-hidden']\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_ICON_LOCATION]\n                }] }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_ICON_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { inline: [{\n                type: Input\n            }], svgIcon: [{\n                type: Input\n            }], fontSet: [{\n                type: Input\n            }], fontIcon: [{\n                type: Input\n            }] } });\n\nclass MatIconModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, declarations: [MatIcon], imports: [MatCommonModule], exports: [MatIcon, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, imports: [MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: MatIconModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: [MatIcon, MatCommonModule],\n                    declarations: [MatIcon],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_REGISTRY_PROVIDER, ICON_REGISTRY_PROVIDER_FACTORY, MAT_ICON_DEFAULT_OPTIONS, MAT_ICON_LOCATION, MAT_ICON_LOCATION_FACTORY, MatIcon, MatIconModule, MatIconRegistry, getMatIconFailedToSanitizeLiteralError, getMatIconFailedToSanitizeUrlError, getMatIconNameNotFoundError, getMatIconNoHttpProviderError };\n"],"x_google_ignoreList":[0]}