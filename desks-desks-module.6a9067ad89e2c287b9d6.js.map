{"version":3,"sources":["./src/app/desks/desk-list-modal.component.ts","./src/app/desks/desks-state.service.ts","./src/app/desks/desks-topbar.component.ts","./src/app/desks/desk-details.component.ts","./src/app/desks/desk-map-view.component.ts","./src/app/desks/desk-listings.component.ts","./src/app/desks/desks.component.ts","./src/app/desks/desks.module.ts"],"names":["filter$","DeskListModalComponent","_data","_dialog_ref","building","this","level","desks$","BehaviorSubject","desks","desk_list","combineLatest","pipe","map","details","filter","desk","name","toLowerCase","includes","id","data","getValue","i","format","csv","display_name","split","join","event","target","file","files","loading","reader","FileReader","readAsText","onload","processCSV","result","onerror","evt","description","toPromise","catch","e","message","close","next","DesksStateService","_org","_dialog","super","_filters","_desk_bookings","_desks","_loading","asObservable","filters","debounceTime","switchMap","zones","m","metadata","reduce","c","catchError","_","list","Array","sort","a","b","localeCompare","shareReplay","bookings","date","Date","z","length","levelsForBuilding","period_start","Math","floor","startOfDay","valueOf","period_end","endOfDay","type","lvl","console","warn","delay","interval","setFilters","clearInterval","user_name","success","access","ref","open","title","content","icon","class","Promise","resolve","reject","componentInstance","first","reason","subscribe","all","afterClosed","levelWithID","level_list","DesksTopbarComponent","_route","_router","levels","active_levels","toggleMapShow","show_map","setDate","updateZones","navigate","relativeTo","queryParams","zone_ids","queryParamsHandling","initialised","subscription","queryParamMap","params","has","get","buildings","find","bld","parent_id","take","zone","push","DeskDetailsComponent","_state","checkin","runMethod","checkinDesk","approve","approveDesk","rejectDesk","fn","DeskMapViewComponent","_desk","_desks_state","url","map_url","styles","map_styles","positions","map_positions","actions","map_actions","features","map_features","setHost","u","setOptions","host","opts","log","DeskListingsComponent","bookable","rejectAll","rejectAllDesks","updateDesks","ROUTES","path","component","DesksComponent","startPolling","stopPolling","DesksModule","forChild"],"mappings":"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","file":"desks-desks-module.6a9067ad89e2c287b9d6.js","sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { updateMetadata } from '@placeos/ts-client';\nimport {\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n} from '@user-interfaces/common';\nimport { Building, BuildingLevel, Desk } from '@user-interfaces/organisation';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface DeskListModalData {\n    building: Building;\n    level: BuildingLevel;\n    desks: Desk[];\n}\n\n@Component({\n    selector: 'desk-list-modal',\n    template: `\n        <header class=\"flex items-center\">\n            <h2 style=\"margin-right: 1rem;\">\n                <strong>List of Desks</strong> -\n                {{ building.display_name || building.name }},\n                {{ level.display_name || level.name }}\n            </h2>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon className=\"material-icons\">close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"flex flex-col\">\n                <div\n                    class=\"flex items-center p-2 space-x-2 w-full border-b border-gray-300\"\n                >\n                    <searchbar\n                        [model]=\"filter$ | async\"\n                        (modelChange)=\"filter$.next($event)\"\n                    ></searchbar>\n                    <div class=\"flex-1 w-0\"></div>\n                    <button mat-button class=\"relative\">\n                        Upload List\n                        <input\n                            type=\"file\"\n                            class=\"absolute inset-0 opacity-0\"\n                            (change)=\"upload($event)\"\n                        />\n                    </button>\n                    <button mat-button (click)=\"download()\">\n                        Download List\n                    </button>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full\">\n                    <div\n                        class=\"flex items-center p-2 border-b border-gray-300 font-medium\"\n                    >\n                        <div class=\"w-40 p-1 flex-1\" flex>ID</div>\n                        <div class=\"w-32 p-1\">Name</div>\n                        <div class=\"w-24 p-1\">Bookable</div>\n                        <div class=\"w-52 p-1\">Groups</div>\n                    </div>\n                    <div table class=\"flex-1 overflow-auto\">\n                        <div\n                            class=\"flex item-center p-2 border-b border-gray-200\"\n                            *ngFor=\"let desk of desk_list | async\"\n                        >\n                            <div class=\"w-40 p-1 flex-1\" flex>\n                                {{ desk.id }}\n                            </div>\n                            <div class=\"w-32 p-1\">{{ desk.name }}</div>\n                            <div class=\"w-24 p-1\">\n                                <mat-checkbox\n                                    [(ngModel)]=\"desk.bookable\"\n                                ></mat-checkbox>\n                            </div>\n                            <div class=\"w-52\">\n                                <item-list-field\n                                    hide-outline no-wrapper\n                                    [(ngModel)]=\"desk.groups\"\n                                ></item-list-field>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n            <footer\n                class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-300\"\n            >\n                <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main\n                class=\"w-64 h-48 mx-auto flex flex-col items-center justify-center\"\n            >\n                <mat-spinner class=\"m-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                max-height: 65vh;\n            }\n\n            [table] {\n                height: 1px;\n                max-height: 50vh;\n            }\n        `,\n    ],\n})\nexport class DeskListModalComponent {\n    public readonly building = this._data.building;\n    public readonly level = this._data.level;\n    public readonly desks$ = new BehaviorSubject(this._data.desks);\n    public readonly filter$ = new BehaviorSubject('');\n\n    public loading: string;\n\n    public desk_list = combineLatest([this.filter$, this.desks$]).pipe(\n        map((details) => {\n            const [filter, desks] = details;\n            return desks.filter(\n                (desk) =>\n                    desk.name.toLowerCase().includes(filter.toLowerCase()) ||\n                    desk.id.toLowerCase().includes(filter.toLowerCase())\n            );\n        })\n    );\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DeskListModalData,\n        private _dialog_ref: MatDialogRef<DeskListModalComponent>\n    ) {}\n\n    /** Download Desks list */\n    public download() {\n        const data = this.desks$.getValue().map((i) => i.format());\n        const csv = jsonToCsv(data);\n        const name = this.level.display_name.split(' ').join('-').toLowerCase();\n        downloadFile(`desks_${name}.csv`, csv);\n    }\n\n    /** Upload Desks list from csv */\n    public upload(event) {\n        if (event.target) {\n            const file = event.target.files[0];\n            if (file) {\n                this.loading = 'Uploading...';\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.onload = () => {\n                    this.processCSV(reader.result as string);\n                    this.loading = '';\n                };\n                reader.onerror = (evt) => {\n                    this.loading = '';\n                    notifyError('Error reading file.');\n                };\n            }\n        }\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        await updateMetadata(this.level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: this.desks$.getValue(),\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this.loading = '';\n        this._dialog_ref.close();\n    }\n\n    /** Process csv */\n    private processCSV(csv: string) {\n        const data = csvToJson(csv);\n        this.desks$.next(data.map((i) => new Desk(i)));\n        notifySuccess(\n            'Upload was sucessful. Click Save Button to save the changes'\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n    saveBooking,\n} from '@user-interfaces/bookings';\nimport {\n    BaseClass,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n} from '@user-interfaces/common';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { Desk, OrganisationService } from '@user-interfaces/organisation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmModalComponent } from '@user-interfaces/components';\nimport { DeskListModalComponent } from './desk-list-modal.component';\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends BaseClass {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _desk_bookings: Booking[] = [];\n    private _desks: Desk[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = filters.zones || []\n            return !zones.includes('All')\n                ? showMetadata(zones[0], {\n                      name: 'desks',\n                  }).pipe(map((m) => m.details))\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata.desks.details)\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      )\n                  );\n        }),\n        catchError((_) => []),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name.localeCompare(b.name));\n            this._desks = list.map((i) => new Desk(i));\n            return this._desks;\n        }),\n        shareReplay()\n    );\n\n    public readonly bookings = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            let zones = (filters.zones || []).filter(\n                (z: any) => z !== -1 && z !== '-1'  && z !== 'All'\n            );\n            if (!zones?.length) {\n                zones = this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((i) => i.id);\n            }\n            return queryBookings({\n                period_start: Math.floor(startOfDay(date).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(date).valueOf() / 1000),\n                type: 'desk',\n                zones: (zones || []).join(','),\n            });\n        }),\n        map((list) => {\n            list.sort((a, b) => a.date - b.date);\n            this._desk_bookings = list;\n            this._loading.next(false);\n            return list;\n        }),\n        shareReplay()\n    );\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        console.warn('Zones:', filters.zones);\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkinDesk(desk: Booking) {\n        const success = await checkinBooking(desk.id, true)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error checking in desk booking')\n            : notifySuccess(`Checked in ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(`Approved desk booking for ${desk.user_name}.`);\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(`Rejected desk booking for ${desk.user_name}.`);\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length > 0) {\n            const ref = this._dialog.open(ConfirmModalComponent, {\n                data: {\n                    title: 'Cancel all desk bookings',\n                    content:\n                        'Are you sure you want to cancel all bookings for the selected date?',\n                    icon: {\n                        type: 'icon',\n                        class: 'material-icons',\n                        content: 'delete',\n                    },\n                },\n            });\n            return new Promise(async (resolve, reject) => {\n                let success = false;\n                ref.componentInstance.event\n                    .pipe(first((_) => _.reason === 'done'))\n                    .subscribe(async () => {\n                        ref.componentInstance.loading =\n                            'Rejecting all desks for selected date...';\n                        success = true;\n                        await Promise.all(\n                            list.map((desk) =>\n                                rejectBooking(desk.id).toPromise()\n                            )\n                        );\n                        resolve('');\n                        notifySuccess(\n                            'Successfull rejected all desk bookings for selected date.'\n                        );\n                        ref.close();\n                    });\n                await ref.afterClosed().toPromise();\n                if (!success) {\n                    reject();\n                }\n            });\n        } else {\n            notifyInfo('No desks to reject for the selected date');\n        }\n    }\n\n    public async updateDesks() {\n        const ref = this._dialog.open(DeskListModalComponent, {\n            data: {\n                level:\n                    this._org.levelWithID(this._filters.getValue().zones) ||\n                    this._org.level_list[0],\n                building: this._org.building,\n                desks: this._desks,\n            },\n        });\n        await ref.afterClosed().toPromise();\n        this._desks = ref.componentInstance.desks$.getValue();\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [ngModel]=\"(filters | async).zones || []\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option value=\"All\">All Levels</mat-option>\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <a\n            button\n            mat-button\n            *ngIf=\"(filters | async).zones?.length === 1\"\n            [routerLink]=\"['/desks']\"\n            [queryParams]=\"{ show_map: !(filters | async)?.show_map }\"\n            queryParamsHandling=\"merge\"\n            (click)=\"toggleMapShow()\"\n        >\n            {{\n                (filters | async)?.show_map ? 'Show List View' : 'Show Map View'\n            }}\n        </a>\n        <div class=\"flex-1 w-2\"></div>\n        <!-- <searchbar class=\"mr-2\"></searchbar> -->\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends BaseClass implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n    /** Set filtered date */\n    public readonly toggleMapShow = () => {\n        this._desks.setFilters({ show_map: !this.show_map });\n        this.show_map = !this.show_map;\n    };\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    public show_map: boolean;\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.updateZones(zones);\n                    }\n                }\n                this.show_map =\n                    params.has('show_map') && params.get('show_map') === 'true';\n                this._desks.setFilters({ show_map: this.show_map });\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones = filters.zones?.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone) || zone === 'All'\n                ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { Booking } from '@user-interfaces/bookings';\nimport { DesksStateService } from './desks-state.service';\n@Component({\n    selector: 'desk-details',\n    template: `\n        <div class=\"w-32 p-2 bg\">{{ desk?.user_name }}</div>\n        <div class=\"w-32 p-2\">{{ desk?.extension_data?.group }}</div>\n        <div class=\"w-24 p-2\">{{ desk.date | date: 'shortTime' }}</div>\n        <div flex class=\"p-2 flex-1 truncate\">{{ desk?.description }}</div>\n        <div [class]=\"'w-24 p-2 capitalize text-red-600 ' + desk?.status\">\n            {{ desk?.status }}\n        </div>\n        <div class=\"w-32 p-2\">{{ desk?.approver_name }}</div>\n        <div class=\"w-32 p-2\">{{ desk?.checked_in ? 'Yes' : 'No' }}</div>\n        <div class=\"w-32 p-2 flex items-center\">\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"checkin()\"\n                [loading]=\"loading === 'checkin'\"\n                [state]=\"desk?.checked_in ? 'success' : ''\"\n                content=\"how_to_reg\"\n            ></action-icon>\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"approve()\"\n                [loading]=\"loading === 'approve'\"\n                [state]=\"desk?.approved ? 'success' : ''\"\n                content=\"event_available\"\n            ></action-icon>\n            <action-icon\n                mat-icon-button\n                className=\"material-icons\"\n                (click)=\"reject()\"\n                [loading]=\"loading === 'reject'\"\n                [state]=\"desk?.status === 'declined' ? 'success' : ''\"\n                content=\"event_busy\"\n            ></action-icon>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                display: flex;\n                align-items: center;\n                padding: 0 0.5rem;\n                background-color: #f8f8f8;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host:hover {\n                background-color: #f0f0f0;\n            }\n\n            .tentative {\n                color: #ffa000;\n            }\n\n            .approved {\n                color: #388e3c;\n            }\n        `,\n    ],\n})\nexport class DeskDetailsComponent {\n    @Input() public desk: Booking;\n\n    public loading: string;\n\n    public readonly checkin = () =>\n        this.runMethod('checkin', async () =>\n            this._state.checkinDesk(this.desk)\n        );\n    public readonly approve = () =>\n        this.runMethod('approve', async () =>\n            this._state.approveDesk(this.desk)\n        );\n    public readonly reject = () =>\n        this.runMethod('reject', async () =>\n            this._state.rejectDesk(this.desk)\n        );\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport {\n    ExploreDesksService,\n    ExploreStateService,\n} from '@user-interfaces/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { BaseClass } from '@user-interfaces/common';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-0 right-0\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                console.log('Desk Options:', opts);\n                this._desks_state.setOptions({\n                    date: opts.date ? new Date(opts.date) : new Date(),\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-listings',\n    template: `\n        <ng-container *ngIf=\"!(filters | async)?.show_map; else map_state\">\n            <div\n                details\n                class=\"w-full bg-gray-900 text-white flex items-center px-2\"\n            >\n                <div class=\"flex-1 w-0\"></div>\n                <div class=\"p-2\">\n                    Requests: {{ (bookings | async)?.length || '0' }}\n                </div>\n                <div class=\"px-8\">\n                    Free Desks:\n                    {{\n                        ((desks | async)?.length || 0) -\n                            ((bookings | async)?.length || 0)\n                    }}\n                </div>\n                <button mat-icon-button [matMenuTriggerFor]=\"menu\" *ngIf=\"(filters | async).zones?.length\">\n                    <app-icon className=\"material-icons\">more_vert</app-icon>\n                </button>\n            </div>\n            <div class=\"w-full flex flex-col flex-1 text-sm h-1/2\">\n                <div\n                    class=\"w-full flex items-center bg-white border-b border-gray-500 p-2 font-medium\"\n                >\n                    <div class=\"w-32 p-2\">Person</div>\n                    <div class=\"w-32 p-2\">Group</div>\n                    <div class=\"w-24 p-2\">Date</div>\n                    <div flex class=\"p-2 flex-1\">Desk</div>\n                    <div class=\"w-24 p-2\">Status</div>\n                    <div class=\"w-32 p-2\">Approver</div>\n                    <div class=\"w-32 p-2\">Checked In</div>\n                    <div class=\"w-24 p-2\">Access</div>\n                    <div class=\"w-32 p-2\"></div>\n                </div>\n                <div class=\"w-full flex-1 overflow-auto h-1/2\">\n                    <ng-container\n                        *ngIf=\"(bookings | async)?.length; else empty_state\"\n                    >\n                        <desk-details\n                            *ngFor=\"let desk of bookings | async\"\n                            [desk]=\"desk\"\n                        ></desk-details>\n                    </ng-container>\n                </div>\n            </div>\n        </ng-container>\n        <ng-template #empty_state>\n            <div class=\"h-full w-full flex items-center justify-center\">\n                <p class=\"p-8\">\n                    There are no desks for the currently selected date.\n                </p>\n            </div>\n        </ng-template>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"updateDesks()\">\n                <div class=\"flex items-center\">\n                    <app-icon className=\"material-icons\">edit</app-icon>\n                    <span class=\"pl-2\">Edit Desks</span>\n                </div>\n            </button>\n            <button mat-menu-item (click)=\"rejectAll()\">\n                <div class=\"flex items-center\">\n                    <app-icon className=\"material-icons\">event_busy</app-icon>\n                    <span class=\"pl-2\">Reject All</span>\n                </div>\n            </button>\n        </mat-menu>\n        <ng-template #map_state>\n            <div  class=\"absolute inset-0\"><desk-map-view></desk-map-view></div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                overflow: hidden;\n            }\n\n            [details] {\n                height: 3.5rem;\n            }\n\n            [flex] {\n                min-width: 8rem;\n            }\n        `,\n    ],\n})\nexport class DeskListingsComponent {\n    public readonly filters = this._state.filters;\n\n    public readonly desks = this._state.desks.pipe(map(list => list.filter(i => i.bookable)));\n\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n    public readonly updateDesks = () => this._state.updateDesks();\n\n    constructor(private _state: DesksStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <desk-listings class=\"w-full flex-1 h-0\"></desk-listings>\n            <mat-progress-bar class=\"w-full\" *ngIf=\"loading | async\" mode=\"indeterminate\"></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class DesksComponent {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: DesksStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskListingsComponent } from './desk-listings.component';\nimport { DeskDetailsComponent } from './desk-details.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskListModalComponent } from './desk-list-modal.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { SharedExploreModule } from '@user-interfaces/explore';\n\nconst ROUTES: Route[] = [{ path: '', component: DesksComponent }];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskListingsComponent,\n        DeskDetailsComponent,\n        DesksTopbarComponent,\n        DeskListModalComponent,\n        DeskMapViewComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        MatRadioModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"sourceRoot":"webpack:///"}