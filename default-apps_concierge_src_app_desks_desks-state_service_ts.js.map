{"version":3,"file":"default-apps_concierge_src_app_desks_desks-state_service_ts.js","mappings":"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","names":["i0","_r1","ctx_r1","postForm","form","DeskModalComponent","id","this","_data","desk","constructor","_dialog_ref","event","EventEmitter","FormGroup","FormControl","name","Validators","required","map_id","groups","features","bookable","notes","patchValue","markAllAsTouched","updateValueAndValidity","valid","loading","value","disableClose","emit","reason","metadata","static","t","MAT_DIALOG_DATA","i1","core","VBU","selectors","outputs","decls","vars","consts","template","rf","ctx","DeskModalComponent_button_4_Template","DeskModalComponent_main_5_Template","DeskModalComponent_ng_template_6_Template","load_state_r3","DesksStateService","AsyncHandler","nextPage","_call_next_page","next","Date","now","_org","_dialog","_settings","super","_filters","BehaviorSubject","_desk_bookings","_loading","_change","asObservable","filters","desks","combineLatest","pipe","debounceTime","switchMap","zones","includes","showMetadata","map","m","details","Array","catchError","_","of","listChildMetadata","building","i","reduce","c","list","sort","a","b","localeCompare","Desk","qr_code","shareReplay","_next_page","Subject","_all_zones_keys","setup_paging","initialised","tap","loaded","date","some","z","get","buildingsForRegion","queryPagedBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","join","include_checked_out","data","total","paged_bookings","distinctUntilChanged","next_page","action","reset","scan","acc","has_more_pages","length","bookings","subscribe","setFilters","levelsForBuilding","lvl","getValue","refresh","timeout","addDesks","_this","_asyncToGenerator","zone","desk_list","take","toPromise","idx","findIndex","push","updateMetadata","description","editDesk","_this2","ref","open","state","Promise","race","afterClosed","componentInstance","first","new_space","randomInt","close","checkinDesk","status","checkinBooking","catch","failed","error","notifyError","notifySuccess","user_name","approveDesk","approveBooking","format","approved","rejected","rejectDesk","rejectBooking","giveAccess","_this3","success","saveBooking","Booking","access","rejectAllDesks","_this4","notifyInfo","resp","openConfirmModal","title","content","icon","class","all","i2","i3","jDH","factory","Éµfac","providedIn"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/desks/desk-modal.component.ts","./apps/concierge/src/app/desks/desks-state.service.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { Desk } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Desk</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"name\">Desk Name<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"name\"\n                                formControlName=\"name\"\n                                placeholder=\"e.g. Office Desk\"\n                            />\n                            <mat-error>A name is required for desks</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"map-id\">Map ID<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"map-id\"\n                                formControlName=\"map_id\"\n                                placeholder=\"e.g. table-01.012\"\n                            />\n                            <mat-error>\n                                A Map ID is required for desks\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Groups</label>\n                <item-list-field\n                    class=\"w-full\"\n                    placeholder=\"Add user groups...\"\n                    formControlName=\"groups\"\n                ></item-list-field>\n                <label for=\"notes\">Features</label>\n                <item-list-field\n                    class=\"w-full\"\n                    placeholder=\"Add features...\"\n                    formControlName=\"features\"\n                ></item-list-field>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\" class=\"no-subscript\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"flex py-4\">\n                    <mat-checkbox formControlName=\"bookable\">\n                        Bookable\n                    </mat-checkbox>\n                </div>\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving desk details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id(): string {\n        return this._data?.desk?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        groups: new FormControl<string[]>([]),\n        features: new FormControl<string[]>([]),\n        bookable: new FormControl(false),\n        notes: new FormControl(''),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { desk?: Desk },\n        private _dialog_ref: MatDialogRef<DeskModalComponent>,\n    ) {\n        if (_data?.desk) this.form.patchValue(_data.desk);\n    }\n\n    public postForm() {\n        this.form.markAllAsTouched();\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    listChildMetadata,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    first,\n    map,\n    scan,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryPagedBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n    SettingsService,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { QueryResponse } from '@placeos/ts-client/dist/esm/resources/functions';\nimport { DeskModalComponent } from './desk-modal.component';\n\nfunction addQRCodeToBooking(booking: Booking): Booking {\n    return new Booking({\n        ...booking,\n        extension_data: {\n            ...booking.extension_data,\n            checkin_qr_code: generateQRCode(\n                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                    booking.asset_id\n                )}`\n            ),\n        },\n    });\n}\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends AsyncHandler {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _desk_bookings: Booking[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _change = new BehaviorSubject(0);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = combineLatest([\n        this._filters,\n        this._change,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([filters]) => {\n            const zones = filters.zones || [];\n            return zones && !zones.includes('All')\n                ? showMetadata(zones[0], 'desks').pipe(\n                      map((m) => (m.details instanceof Array ? m.details : [])),\n                      catchError((_) => of([]))\n                  )\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata?.desks?.details || [])\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      ),\n                      catchError((_) => of([]))\n                  );\n        }),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name?.localeCompare(b.name));\n            return list.map((i) => new Desk({ ...i, qr_code: '' }));\n        }),\n        shareReplay(1)\n    );\n\n    private _next_page = new Subject<() => QueryResponse<Booking>>();\n    private _call_next_page = new Subject<string>();\n    private _all_zones_keys = ['All', -1, '-1'];\n    public readonly setup_paging = combineLatest([\n        this._filters,\n        this._org.initialised,\n    ]).pipe(\n        debounceTime(500),\n        tap(([filters, loaded]) => {\n            if (!loaded) return;\n            const date = filters.date || Date.now();\n            const zones =\n                !filters.zones ||\n                filters.zones.some((z) => this._all_zones_keys.includes(z))\n                    ? this._settings.get('app.use_region')\n                        ? this._org.buildingsForRegion().map((_) => _.id)\n                        : [this._org.building.id]\n                    : filters.zones;\n            this._next_page.next(() =>\n                queryPagedBookings({\n                    period_start: getUnixTime(startOfDay(date)),\n                    period_end: getUnixTime(endOfDay(date)),\n                    type: 'desk',\n                    zones: zones.join(','),\n                    include_checked_out: true,\n                }).pipe(\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                )\n            );\n            this._call_next_page.next(`RESET_${Date.now()}`);\n        })\n    );\n\n    public readonly paged_bookings = combineLatest([\n        this._next_page,\n        this._call_next_page,\n    ]).pipe(\n        distinctUntilChanged((a, b) => a[1] === b[1]),\n        switchMap(([next_page, action]) => {\n            this._loading.next(true);\n            if (!next_page) {\n                return of({\n                    data: [],\n                    total: 0,\n                    next: null,\n                    reset: action.includes('RESET'),\n                });\n            }\n            // If reset is true, start over\n            if (action.includes('RESET')) {\n                return next_page().pipe(\n                    map((data: any) => ({ ...data, reset: true })),\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                );\n            }\n            return next_page().pipe(\n                map((data: any) => ({ ...data, reset: false })),\n                catchError((_) => of({ data: [], total: 0, next: null }))\n            );\n        }),\n        scan(\n            (acc, { data, total, next, reset }) => {\n                const list = data;\n                this._next_page.next(next); // Set the next page function\n                if (reset) return { list, total }; // Reset the items array\n                return {\n                    list: [...acc.list, ...list],\n                    total,\n                };\n            },\n            { list: [], total: 0 }\n        ),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly has_more_pages = this.paged_bookings.pipe(\n        map((_) => _.list.length < _.total)\n    );\n    public readonly bookings = this.paged_bookings.pipe(map((i) => i.list));\n\n    public nextPage() {\n        this._call_next_page.next(`NEXT_${Date.now()}`);\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.setup_paging.subscribe();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public refresh() {\n        this._loading.next(true);\n        this.timeout('poll', () => this.setFilters(this._filters.getValue()));\n    }\n\n    public async addDesks(list: Desk[]) {\n        const zone = this._filters.getValue().zones[0];\n        const desk_list = await this.desks.pipe(take(1)).toPromise();\n        for (const desk of list) {\n            const idx = desk_list.findIndex((_) => _.id === desk.id);\n            if (idx >= 0) desk_list[idx] = desk;\n            else desk_list.push(desk);\n        }\n        await updateMetadata(zone, {\n            name: 'desks',\n            details: desk_list,\n            description: 'List of available desks',\n        }).toPromise();\n        this._change.next(Date.now());\n    }\n\n    public async editDesk(desk?: Desk) {\n        const ref = this._dialog.open(DeskModalComponent, { data: { desk } });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._filters.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const desk_list = await this.desks.pipe(take(1)).toPromise();\n        const idx = desk_list.findIndex((_) => _.id === new_space.id);\n        if (idx >= 0) desk_list[idx] = new_space;\n        else desk_list.push(new_space);\n        await updateMetadata(zone, {\n            name: 'desks',\n            details: desk_list,\n            description: 'List of available desks',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    public async checkinDesk(desk: Booking, state: boolean = true) {\n        const status: any = await checkinBooking(desk.id, state ?? true)\n            .toPromise()\n            .catch((_) => ({ failed: true, error: _ }));\n        if (status.failed) {\n            notifyError(\n                status.error\n                    ? `Error: ${status.error}`\n                    : `Error checking ${state ? 'in' : 'out'} desk booking`\n            );\n            throw status.error;\n        }\n        notifySuccess(`Checked ${state ? 'in' : 'out'} ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error approving in desk booking');\n        }\n        notifySuccess(\n            `Approved desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = true;\n        (desk as any).rejected = false;\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error rejecting in desk booking');\n        }\n        notifySuccess(\n            `Rejected desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = false;\n        (desk as any).rejected = true;\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No desks to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all desk bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Rejecting all desks for selected date...');\n        await Promise.all(\n            list.map((desk) => rejectBooking(desk.id).toPromise())\n        );\n        notifySuccess(\n            'Successfully rejected all desk bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n"],"x_google_ignoreList":[]}