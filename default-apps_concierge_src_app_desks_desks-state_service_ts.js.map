{"version":3,"file":"default-apps_concierge_src_app_desks_desks-state_service_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAwE;AACJ;AACK;;;;;;;;;;;;;;IAWrDM,4DADJ,gBAAyD,eAC3C;IAAAA,oDAAA,YAAK;IACnBA,0DADmB,EAAW,EACrB;;;;;;IASDA,4DAPZ,cAIC,aAC+B,aACE,gBACJ;IAAAA,oDAAA,gBAAS;IAAAA,4DAAA,WAAM;IAAAA,oDAAA,QAAC;IAAOA,0DAAP,EAAO,EAAQ;IACjDA,4DAAA,yBAAoD;IAChDA,uDAAA,gBAKE;IACFA,4DAAA,gBAAW;IAAAA,oDAAA,oCAA4B;IAE/CA,0DAF+C,EAAY,EACtC,EACf;IAEFA,4DADJ,cAA0B,iBACF;IAAAA,oDAAA,cAAM;IAAAA,4DAAA,YAAM;IAAAA,oDAAA,SAAC;IAAOA,0DAAP,EAAO,EAAQ;IAChDA,4DAAA,0BAAoD;IAChDA,uDAAA,iBAKE;IACFA,4DAAA,iBAAW;IACPA,oDAAA,wCACJ;IAGZA,0DAHY,EAAY,EACC,EACf,EACJ;IACNA,4DAAA,iBAAmB;IAAAA,oDAAA,cAAM;IAAAA,0DAAA,EAAQ;IACjCA,uDAAA,2BAImB;IACnBA,4DAAA,iBAAmB;IAAAA,oDAAA,gBAAQ;IAAAA,0DAAA,EAAQ;IACnCA,uDAAA,2BAImB;IACnBA,4DAAA,iBAAmB;IAAAA,oDAAA,aAAK;IAAAA,0DAAA,EAAQ;IAChCA,4DAAA,0BAA0D;IACtDA,uDAAA,oBAIY;IAChBA,0DAAA,EAAiB;IAEbA,4DADJ,eAAuB,wBACsB;IACrCA,oDAAA,kBACJ;IACJA,0DADI,EAAe,EACb;IAEFA,4DADJ,eAAqD,kBACW;IACxDA,oDAAA,gBACJ;IAAAA,0DAAA,EAAS;IACTA,4DAAA,kBAAwD;IAArBA,wDAAA,mBAAAM,4DAAA;MAAAN,2DAAA,CAAAQ,GAAA;MAAA,MAAAC,MAAA,GAAAT,2DAAA;MAAA,OAAAA,yDAAA,CAASS,MAAA,CAAAG,QAAA,EAAU;IAAA,EAAC;IACnDZ,oDAAA,cACJ;IAERA,0DAFQ,EAAS,EACP,EACH;;;;IA/DHA,wDAAA,cAAAS,MAAA,CAAAK,IAAA,CAAkB;;;;;IAkEtBd,4DAAA,eAEC;IACGA,uDAAA,sBAAyC;IACzCA,4DAAA,QAAG;IAAAA,oDAAA,6BAAsB;IAC7BA,0DAD6B,EAAI,EAC1B;;;AAKb,MAAOe,kBAAkB;EAI3B,IAAWC,EAAEA,CAAA;IACT,OAAO,IAAI,CAACC,KAAK,EAAEC,IAAI,EAAEF,EAAE,IAAI,EAAE;EACrC;EAYAG,YACqCF,KAAsB,EAC/CG,WAA6C;IADpB,KAAAH,KAAK,GAALA,KAAK;IAC9B,KAAAG,WAAW,GAAXA,WAAW;IAnBG,KAAAC,KAAK,GAAG,IAAI3B,uDAAY,EAAe;IAOjD,KAAAoB,IAAI,GAAG,IAAIlB,qDAAS,CAAC;MACjCoB,EAAE,EAAE,IAAIrB,uDAAW,CAAC,EAAE,CAAC;MACvB2B,IAAI,EAAE,IAAI3B,uDAAW,CAAC,EAAE,EAAE,CAACE,sDAAU,CAAC0B,QAAQ,CAAC,CAAC;MAChDC,MAAM,EAAE,IAAI7B,uDAAW,CAAC,EAAE,EAAE,CAACE,sDAAU,CAAC0B,QAAQ,CAAC,CAAC;MAClDE,MAAM,EAAE,IAAI9B,uDAAW,CAAW,EAAE,CAAC;MACrC+B,QAAQ,EAAE,IAAI/B,uDAAW,CAAW,EAAE,CAAC;MACvCgC,QAAQ,EAAE,IAAIhC,uDAAW,CAAC,KAAK,CAAC;MAChCiC,KAAK,EAAE,IAAIjC,uDAAW,CAAC,EAAE;KAC5B,CAAC;IAME,IAAIsB,KAAK,EAAEC,IAAI,EAAE,IAAI,CAACJ,IAAI,CAACe,UAAU,CAACZ,KAAK,CAACC,IAAI,CAAC;EACrD;EAEON,QAAQA,CAAA;IACX,IAAI,CAACE,IAAI,CAACgB,gBAAgB,EAAE;IAC5B,IAAI,CAAChB,IAAI,CAACiB,sBAAsB,EAAE;IAClC,IAAI,CAAC,IAAI,CAACjB,IAAI,CAACkB,KAAK,EAAE;IACtB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,MAAMC,KAAK,GAAG,IAAI,CAACpB,IAAI,CAACoB,KAAK;IAC7B,IAAI,CAACd,WAAW,CAACe,YAAY,GAAG,IAAI;IACpC,IAAI,CAACd,KAAK,CAACe,IAAI,CAAC;MAAEC,MAAM,EAAE,MAAM;MAAEC,QAAQ,EAAEJ;IAAK,CAAE,CAAC;EACxD;EAAC,QAAAK,CAAA;qCAjCQxB,kBAAkB,EAAAf,+DAAA,CAmBfD,qEAAe,GAAAC,+DAAA,CAAAyC,kEAAA;EAAA;EAAA,QAAAC,EAAA;UAnBlB3B,kBAAkB;IAAA4B,SAAA;IAAAC,OAAA;MAAAvB,KAAA;IAAA;IAAAwB,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QApFflD,4DAFR,aAAuB,gBAC2C,YACzC;QAAAA,oDAAA,GAA8B;QAAAA,0DAAA,EAAK;QACpDA,wDAAA,IAAAqD,oCAAA,oBAAyD;QAG7DrD,0DAAA,EAAS;QACTA,wDAAA,IAAAsD,kCAAA,mBAIC;QA+DLtD,0DAAA,EAAM;QACNA,wDAAA,IAAAuD,yCAAA,gCAAAvD,oEAAA,CAAyB;;;;QAzEAA,uDAAA,GAA8B;QAA9BA,gEAAA,KAAAmD,GAAA,CAAAnC,EAAA,2BAA8B;QACtChB,uDAAA,EAAc;QAAdA,wDAAA,UAAAmD,GAAA,CAAAlB,OAAA,CAAc;QAKtBjC,uDAAA,EAAgB;QAAAA,wDAAhB,UAAAmD,GAAA,CAAAlB,OAAA,CAAgB,aAAA0B,aAAA,CAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBK;AAKzB;AACmD;AAYvD;AAC6C;AAS1C;AASF;AACyC;AAEL;AAED;;;;;AAE5D,SAASuC,kBAAkBA,CAACC,OAAgB;EACxC,OAAO,IAAIhB,sDAAO,CAAC;IACf,GAAGgB,OAAO;IACVC,cAAc,EAAE;MACZ,GAAGD,OAAO,CAACC,cAAc;MACzBC,eAAe,EAAEJ,2EAAc,CAC3B,mCAAmCK,kBAAkB,CACjDH,OAAO,CAACI,QAAQ,CACnB,EAAE;;GAGd,CAAC;AACN;AAYM,MAAOC,iBAAkB,SAAQhB,yDAAY;EA0HxCiB,QAAQA,CAAA;IACX,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,QAAQC,IAAI,CAACC,GAAG,EAAE,EAAE,CAAC;EACnD;EAEA1F,YACY2F,IAAyB,EACzBC,OAAkB,EAClBC,SAA0B;IAElC,KAAK,EAAE;IAJC,KAAAF,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,SAAS,GAATA,SAAS;IAhIb,KAAAC,QAAQ,GAAG,IAAIjD,iDAAe,CAAc,EAAE,CAAC;IAC/C,KAAAkD,cAAc,GAAc,EAAE;IAC9B,KAAAC,QAAQ,GAAG,IAAInD,iDAAe,CAAU,KAAK,CAAC;IAC9C,KAAAoD,OAAO,GAAG,IAAIpD,iDAAe,CAAC,CAAC,CAAC;IAExB,KAAA/B,OAAO,GAAG,IAAI,CAACkF,QAAQ,CAACE,YAAY,EAAE;IAEtC,KAAAC,OAAO,GAAG,IAAI,CAACL,QAAQ,CAACI,YAAY,EAAE;IAEtC,KAAAE,KAAK,GAAuBtD,mDAAa,CAAC,CACtD,IAAI,CAACgD,QAAQ,EACb,IAAI,CAACG,OAAO,CACf,CAAC,CAACI,IAAI,CACHnD,4DAAY,CAAC,GAAG,CAAC,EACjBM,0DAAS,CAAC,CAAC,CAAC2C,OAAO,CAAC,KAAI;MACpB,MAAMG,KAAK,GAAGH,OAAO,CAACG,KAAK,IAAI,EAAE;MACjC,OAAOA,KAAK,IAAI,CAACA,KAAK,CAACC,QAAQ,CAAC,KAAK,CAAC,GAChC5D,gEAAY,CAAC2D,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAACD,IAAI,CAChChD,oDAAG,CAAEmD,CAAC,IAAMA,CAAC,CAACC,OAAO,YAAYC,KAAK,GAAGF,CAAC,CAACC,OAAO,GAAG,EAAG,CAAC,EACzDxD,2DAAU,CAAE7B,CAAC,IAAK2B,yCAAE,CAAC,EAAE,CAAC,CAAC,CAC5B,GACDL,qEAAiB,CAAC,IAAI,CAACiD,IAAI,CAACgB,QAAQ,EAAE9G,EAAE,EAAE;QACtCM,IAAI,EAAE;OACT,CAAC,CAACkG,IAAI,CACHhD,oDAAG,CAAEmD,CAAC,IACFA,CAAC,CACInD,GAAG,CAAEuD,CAAC,IAAKA,CAAC,CAACzF,QAAQ,EAAEiF,KAAK,EAAEK,OAAO,IAAI,EAAE,CAAC,CAC5CI,MAAM,CAAC,CAACC,CAAQ,EAAEF,CAAQ,KAAK,CAAC,GAAGE,CAAC,EAAE,GAAGF,CAAC,CAAC,EAAE,EAAE,CAAC,CACxD,EACD3D,2DAAU,CAAE7B,CAAC,IAAK2B,yCAAE,CAAC,EAAE,CAAC,CAAC,CAC5B;IACX,CAAC,CAAC,EACFM,oDAAG,CAAE0D,IAAI,IAAI;MACT,IAAI,EAAEA,IAAI,YAAYL,KAAK,CAAC,EAAEK,IAAI,GAAG,EAAE;MACvCA,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC9G,IAAI,EAAEgH,aAAa,CAACD,CAAC,CAAC/G,IAAI,CAAC,CAAC;MAClD,OAAO4G,IAAI,CAAC1D,GAAG,CAAEuD,CAAC,IAAK,IAAIhC,uDAAI,CAAC;QAAE,GAAGgC,CAAC;QAAEQ,OAAO,EAAE;MAAE,CAAE,CAAC,CAAC;IAC3D,CAAC,CAAC,EACF7D,4DAAW,CAAC,CAAC,CAAC,CACjB;IAEO,KAAA8D,UAAU,GAAG,IAAIrE,0CAAO,EAAgC;IACxD,KAAAuC,eAAe,GAAG,IAAIvC,0CAAO,EAAU;IACvC,KAAAsE,eAAe,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;IAC3B,KAAAC,YAAY,GAAGzE,mDAAa,CAAC,CACzC,IAAI,CAACgD,QAAQ,EACb,IAAI,CAACH,IAAI,CAAC6B,WAAW,CACxB,CAAC,CAACnB,IAAI,CACHnD,4DAAY,CAAC,GAAG,CAAC,EACjBQ,oDAAG,CAAC,CAAC,CAACyC,OAAO,EAAEsB,MAAM,CAAC,KAAI;MACtB,IAAI,CAACA,MAAM,EAAE;MACb,MAAMC,IAAI,GAAGvB,OAAO,CAACuB,IAAI,IAAIjC,IAAI,CAACC,GAAG,EAAE;MACvC,MAAMY,KAAK,GACP,CAACH,OAAO,CAACG,KAAK,IACdH,OAAO,CAACG,KAAK,CAACqB,IAAI,CAAEC,CAAC,IAAK,IAAI,CAACN,eAAe,CAACf,QAAQ,CAACqB,CAAC,CAAC,CAAC,GACrD,IAAI,CAAC/B,SAAS,CAACgC,GAAG,CAAC,gBAAgB,CAAC,GAChC,IAAI,CAAClC,IAAI,CAACmC,kBAAkB,EAAE,CAACzE,GAAG,CAAEjC,CAAC,IAAKA,CAAC,CAACvB,EAAE,CAAC,GAC/C,CAAC,IAAI,CAAC8F,IAAI,CAACgB,QAAQ,CAAC9G,EAAE,CAAC,GAC3BsG,OAAO,CAACG,KAAK;MACvB,IAAI,CAACe,UAAU,CAAC7B,IAAI,CAAC,MACjBtB,qEAAkB,CAAC;QACf6D,YAAY,EAAElE,sDAAW,CAACC,qDAAU,CAAC4D,IAAI,CAAC,CAAC;QAC3CM,UAAU,EAAEnE,sDAAW,CAACF,mDAAQ,CAAC+D,IAAI,CAAC,CAAC;QACvCO,IAAI,EAAE,MAAM;QACZ3B,KAAK,EAAEA,KAAK,CAAC4B,IAAI,CAAC,GAAG,CAAC;QACtBC,mBAAmB,EAAE;OACxB,CAAC,CAAC9B,IAAI,CACHpD,2DAAU,CAAE7B,CAAC,IAAK2B,yCAAE,CAAC;QAAEqF,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE,CAAC;QAAE7C,IAAI,EAAE;MAAI,CAAE,CAAC,CAAC,CAC5D,CACJ;MACD,IAAI,CAACD,eAAe,CAACC,IAAI,CAAC,SAASC,IAAI,CAACC,GAAG,EAAE,EAAE,CAAC;IACpD,CAAC,CAAC,CACL;IAEe,KAAA4C,cAAc,GAAGxF,mDAAa,CAAC,CAC3C,IAAI,CAACuE,UAAU,EACf,IAAI,CAAC9B,eAAe,CACvB,CAAC,CAACc,IAAI,CACHlD,qEAAoB,CAAC,CAAC8D,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAAC,CAAC,CAAC,KAAKC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC7C1D,0DAAS,CAAC,CAAC,CAAC+E,SAAS,EAAEC,MAAM,CAAC,KAAI;MAC9B,IAAI,CAACxC,QAAQ,CAACR,IAAI,CAAC,IAAI,CAAC;MACxB,IAAI,CAAC+C,SAAS,EAAE;QACZ,OAAOxF,yCAAE,CAAC;UACNqF,IAAI,EAAE,EAAE;UACRC,KAAK,EAAE,CAAC;UACR7C,IAAI,EAAE,IAAI;UACViD,KAAK,EAAED,MAAM,CAACjC,QAAQ,CAAC,OAAO;SACjC,CAAC;MACN;MACA;MACA,IAAIiC,MAAM,CAACjC,QAAQ,CAAC,OAAO,CAAC,EAAE;QAC1B,OAAOgC,SAAS,EAAE,CAAClC,IAAI,CACnBhD,oDAAG,CAAE+E,IAAS,KAAM;UAAE,GAAGA,IAAI;UAAEK,KAAK,EAAE;QAAI,CAAE,CAAC,CAAC,EAC9CxF,2DAAU,CAAE7B,CAAC,IAAK2B,yCAAE,CAAC;UAAEqF,IAAI,EAAE,EAAE;UAAEC,KAAK,EAAE,CAAC;UAAE7C,IAAI,EAAE;QAAI,CAAE,CAAC,CAAC,CAC5D;MACL;MACA,OAAO+C,SAAS,EAAE,CAAClC,IAAI,CACnBhD,oDAAG,CAAE+E,IAAS,KAAM;QAAE,GAAGA,IAAI;QAAEK,KAAK,EAAE;MAAK,CAAE,CAAC,CAAC,EAC/CxF,2DAAU,CAAE7B,CAAC,IAAK2B,yCAAE,CAAC;QAAEqF,IAAI,EAAE,EAAE;QAAEC,KAAK,EAAE,CAAC;QAAE7C,IAAI,EAAE;MAAI,CAAE,CAAC,CAAC,CAC5D;IACL,CAAC,CAAC,EACFlC,qDAAI,CACA,CAACoF,GAAG,EAAE;MAAEN,IAAI;MAAEC,KAAK;MAAE7C,IAAI;MAAEiD;IAAK,CAAE,KAAI;MAClC,MAAM1B,IAAI,GAAGqB,IAAI;MACjB,IAAI,CAACf,UAAU,CAAC7B,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;MAC5B,IAAIiD,KAAK,EAAE,OAAO;QAAE1B,IAAI;QAAEsB;MAAK,CAAE,CAAC,CAAC;MACnC,OAAO;QACHtB,IAAI,EAAE,CAAC,GAAG2B,GAAG,CAAC3B,IAAI,EAAE,GAAGA,IAAI,CAAC;QAC5BsB;OACH;IACL,CAAC,EACD;MAAEtB,IAAI,EAAE,EAAE;MAAEsB,KAAK,EAAE;IAAC,CAAE,CACzB,EACD3E,oDAAG,CAAEtC,CAAC,IAAK,IAAI,CAAC4E,QAAQ,CAACR,IAAI,CAAC,KAAK,CAAC,CAAC,EACrCjC,4DAAW,CAAC,CAAC,CAAC,CACjB;IAEe,KAAAoF,cAAc,GAAG,IAAI,CAACL,cAAc,CAACjC,IAAI,CACrDhD,oDAAG,CAAEjC,CAAC,IAAKA,CAAC,CAAC2F,IAAI,CAAC6B,MAAM,GAAGxH,CAAC,CAACiH,KAAK,CAAC,CACtC;IACe,KAAAQ,QAAQ,GAAG,IAAI,CAACP,cAAc,CAACjC,IAAI,CAAChD,oDAAG,CAAEuD,CAAC,IAAKA,CAAC,CAACG,IAAI,CAAC,CAAC;IAYnE,IAAI,CAACQ,YAAY,CAACuB,SAAS,EAAE;EACjC;EAEOC,UAAUA,CAAC5C,OAAoB;IAClC,IAAIA,OAAO,CAACG,KAAK,EAAEC,QAAQ,CAAC,KAAK,CAAC,EAAE;MAChCJ,OAAO,CAACG,KAAK,GAAG,CACZ,KAAK,EACL,GAAG,IAAI,CAACX,IAAI,CACPqD,iBAAiB,CAAC,IAAI,CAACrD,IAAI,CAACgB,QAAQ,CAAC,CACrCtD,GAAG,CAAE4F,GAAG,IAAKA,GAAG,CAACpJ,EAAE,CAAC,CAC5B;IACL,CAAC,MAAM,IACHsG,OAAO,CAACG,KAAK,IACb,IAAI,CAACR,QAAQ,CAACoD,QAAQ,EAAE,EAAE5C,KAAK,EAAEC,QAAQ,CAAC,KAAK,CAAC,EAClD;MACEJ,OAAO,CAACG,KAAK,GAAG,EAAE;IACtB;IACA,IAAI,CAACR,QAAQ,CAACN,IAAI,CAAC;MAAE,GAAG,IAAI,CAACM,QAAQ,CAACoD,QAAQ,EAAE;MAAE,GAAG/C;IAAO,CAAE,CAAC;EACnE;EAEOgD,OAAOA,CAAA;IACV,IAAI,CAACnD,QAAQ,CAACR,IAAI,CAAC,IAAI,CAAC;IACxB,IAAI,CAAC4D,OAAO,CAAC,MAAM,EAAE,MAAM,IAAI,CAACL,UAAU,CAAC,IAAI,CAACjD,QAAQ,CAACoD,QAAQ,EAAE,CAAC,CAAC;EACzE;EAEaG,QAAQA,CAACtC,IAAY;IAAA,IAAAuC,KAAA;IAAA,OAAAC,wJAAA;MAC9B,MAAMC,IAAI,GAAGF,KAAI,CAACxD,QAAQ,CAACoD,QAAQ,EAAE,CAAC5C,KAAK,CAAC,CAAC,CAAC;MAC9C,MAAMmD,SAAS,SAASH,KAAI,CAAClD,KAAK,CAACC,IAAI,CAAC5C,qDAAI,CAAC,CAAC,CAAC,CAAC,CAACiG,SAAS,EAAE;MAC5D,KAAK,MAAM3J,IAAI,IAAIgH,IAAI,EAAE;QACrB,MAAM4C,GAAG,GAAGF,SAAS,CAACG,SAAS,CAAExI,CAAC,IAAKA,CAAC,CAACvB,EAAE,KAAKE,IAAI,CAACF,EAAE,CAAC;QACxD,IAAI8J,GAAG,IAAI,CAAC,EAAEF,SAAS,CAACE,GAAG,CAAC,GAAG5J,IAAI,CAAC,KAC/B0J,SAAS,CAACI,IAAI,CAAC9J,IAAI,CAAC;MAC7B;MACA,MAAM6C,kEAAc,CAAC4G,IAAI,EAAE;QACvBrJ,IAAI,EAAE,OAAO;QACbsG,OAAO,EAAEgD,SAAS;QAClBK,WAAW,EAAE;OAChB,CAAC,CAACJ,SAAS,EAAE;MACdJ,KAAI,CAACrD,OAAO,CAACT,IAAI,CAACC,IAAI,CAACC,GAAG,EAAE,CAAC;IAAC;EAClC;EAEaqE,QAAQA,CAAChK,IAAW;IAAA,IAAAiK,MAAA;IAAA,OAAAT,wJAAA;MAC7B,MAAMU,GAAG,GAAGD,MAAI,CAACpE,OAAO,CAACsE,IAAI,CAACtK,qEAAkB,EAAE;QAAEwI,IAAI,EAAE;UAAErI;QAAI;MAAE,CAAE,CAAC;MACrE,MAAMoK,KAAK,SAASC,OAAO,CAACC,IAAI,CAAC,CAC7BJ,GAAG,CAACK,WAAW,EAAE,CAACZ,SAAS,EAAE,EAC7BO,GAAG,CAACM,iBAAiB,CAACrK,KAAK,CACtBmG,IAAI,CAACjD,sDAAK,CAAEhC,CAAC,IAAKA,CAAC,CAACF,MAAM,KAAK,MAAM,CAAC,CAAC,CACvCwI,SAAS,EAAE,CACnB,CAAC;MACF,IAAIS,KAAK,EAAEjJ,MAAM,KAAK,MAAM,EAAE;MAC9B,MAAMsI,IAAI,GAAGQ,MAAI,CAAClE,QAAQ,CAACoD,QAAQ,EAAE,CAAC5C,KAAK,CAAC,CAAC,CAAC;MAC9C,MAAMkE,SAAS,GAAG;QACd,GAAGL,KAAK,CAAChJ,QAAQ;QACjBtB,EAAE,EAAEsK,KAAK,CAAChJ,QAAQ,CAACtB,EAAE,IAAI,WAAW2J,IAAI,IAAI9E,0DAAS,CAAC,OAAO,CAAC;OACjE;MACD,MAAM+E,SAAS,SAASO,MAAI,CAAC5D,KAAK,CAACC,IAAI,CAAC5C,qDAAI,CAAC,CAAC,CAAC,CAAC,CAACiG,SAAS,EAAE;MAC5D,MAAMC,GAAG,GAAGF,SAAS,CAACG,SAAS,CAAExI,CAAC,IAAKA,CAAC,CAACvB,EAAE,KAAK2K,SAAS,CAAC3K,EAAE,CAAC;MAC7D,IAAI8J,GAAG,IAAI,CAAC,EAAEF,SAAS,CAACE,GAAG,CAAC,GAAGa,SAAS,CAAC,KACpCf,SAAS,CAACI,IAAI,CAACW,SAAS,CAAC;MAC9B,MAAM5H,kEAAc,CAAC4G,IAAI,EAAE;QACvBrJ,IAAI,EAAE,OAAO;QACbsG,OAAO,EAAEgD,SAAS;QAClBK,WAAW,EAAE;OAChB,CAAC,CAACJ,SAAS,EAAE;MACdM,MAAI,CAAC/D,OAAO,CAACT,IAAI,CAACC,IAAI,CAACC,GAAG,EAAE,CAAC;MAC7BuE,GAAG,CAACQ,KAAK,EAAE;IAAC;EAChB;EAEaC,WAAWA,CAAC3K,IAAa,EAAEoK,KAAA,GAAiB,IAAI;IAAA,OAAAZ,wJAAA;MACzD,MAAMoB,MAAM,SAAc1G,iEAAc,CAAClE,IAAI,CAACF,EAAE,EAAEsK,KAAK,IAAI,IAAI,CAAC,CAC3DT,SAAS,EAAE,CACXkB,KAAK,CAAExJ,CAAC,KAAM;QAAEyJ,MAAM,EAAE,IAAI;QAAEC,KAAK,EAAE1J;MAAC,CAAE,CAAC,CAAC;MAC/C,IAAIuJ,MAAM,CAACE,MAAM,EAAE;QACfvG,4DAAW,CACPqG,MAAM,CAACG,KAAK,GACN,UAAUH,MAAM,CAACG,KAAK,EAAE,GACxB,kBAAkBX,KAAK,GAAG,IAAI,GAAG,KAAK,eAAe,CAC9D;QACD,MAAMQ,MAAM,CAACG,KAAK;MACtB;MACAtG,8DAAa,CAAC,WAAW2F,KAAK,GAAG,IAAI,GAAG,KAAK,IAAIpK,IAAI,CAACgL,SAAS,GAAG,CAAC;IAAC;EACxE;EAEaC,WAAWA,CAACjL,IAAa;IAAA,OAAAwJ,wJAAA;MAClC,MAAM0B,OAAO,SAASlH,iEAAc,CAAChE,IAAI,CAACF,EAAE,CAAC,CACxC6J,SAAS,EAAE,CACXkB,KAAK,CAAExJ,CAAC,IAAK,QAAQ,CAAC;MAC3B,IAAI6J,OAAO,KAAK,QAAQ,EAAE;QACtB,OAAO3G,4DAAW,CAAC,iCAAiC,CAAC;MACzD;MACAE,8DAAa,CACT,6BAA6BzE,IAAI,CAACgL,SAAS,OAAOnH,iDAAM,CACpD7D,IAAI,CAAC2H,IAAI,EACT,QAAQ,CACX,GAAG,CACP;MACA3H,IAAY,CAACmL,QAAQ,GAAG,IAAI;MAC5BnL,IAAY,CAACoL,QAAQ,GAAG,KAAK;IAAC;EACnC;EAEaC,UAAUA,CAACrL,IAAa;IAAA,OAAAwJ,wJAAA;MACjC,MAAM0B,OAAO,SAAS9G,gEAAa,CAACpE,IAAI,CAACF,EAAE,CAAC,CACvC6J,SAAS,EAAE,CACXkB,KAAK,CAAExJ,CAAC,IAAK,QAAQ,CAAC;MAC3B,IAAI6J,OAAO,KAAK,QAAQ,EAAE;QACtB,OAAO3G,4DAAW,CAAC,iCAAiC,CAAC;MACzD;MACAE,8DAAa,CACT,6BAA6BzE,IAAI,CAACgL,SAAS,OAAOnH,iDAAM,CACpD7D,IAAI,CAAC2H,IAAI,EACT,QAAQ,CACX,GAAG,CACP;MACA3H,IAAY,CAACmL,QAAQ,GAAG,KAAK;MAC7BnL,IAAY,CAACoL,QAAQ,GAAG,IAAI;IAAC;EAClC;EAEaE,UAAUA,CAACtL,IAAa;IAAA,IAAAuL,MAAA;IAAA,OAAA/B,wJAAA;MACjC,MAAM0B,OAAO,SAAS7G,8DAAW,CAC7B,IAAIJ,sDAAO,CAAC;QAAE,GAAGjE,IAAI;QAAEwL,MAAM,EAAE;MAAI,CAAE,CAAC,CACzC,CACI7B,SAAS,EAAE,CACXkB,KAAK,CAAExJ,CAAC,IAAK,QAAQ,CAAC;MAC3B,IAAI6J,OAAO,KAAK,QAAQ,EACpB,OAAO3G,4DAAW,CAAC,2CAA2C,CAAC;MACnEE,8DAAa,CACT,wCAAwCzE,IAAI,CAACgL,SAAS,oBAAoB,CAC7E;MACDO,MAAI,CAACvF,cAAc,GAAG,CAAC,GAAGuF,MAAI,CAACvF,cAAc,EAAEkF,OAAO,CAAQ;IAAC;EACnE;EAEaO,cAAcA,CAAA;IAAA,IAAAC,MAAA;IAAA,OAAAlC,wJAAA;MACvB,MAAMxC,IAAI,GAAG0E,MAAI,CAAC1F,cAAc,IAAI,EAAE;MACtC,IAAIgB,IAAI,CAAC6B,MAAM,IAAI,CAAC,EAChB,OAAOrE,2DAAU,CAAC,0CAA0C,CAAC;MACjE,MAAMmH,IAAI,SAASjH,iEAAgB,CAC/B;QACIkH,KAAK,EAAE,0BAA0B;QACjCC,OAAO,EACH,qEAAqE;QACzEC,IAAI,EAAE;UACF5D,IAAI,EAAE,MAAM;UACZ6D,KAAK,EAAE,gBAAgB;UACvBF,OAAO,EAAE;;OAEhB,EACDH,MAAI,CAAC7F,OAAO,CACf;MACD,IAAI8F,IAAI,CAACxK,MAAM,KAAK,MAAM,EAAE;MAC5BwK,IAAI,CAAC5K,OAAO,CAAC,0CAA0C,CAAC;MACxD,MAAMsJ,OAAO,CAAC2B,GAAG,CACbhF,IAAI,CAAC1D,GAAG,CAAEtD,IAAI,IAAKoE,gEAAa,CAACpE,IAAI,CAACF,EAAE,CAAC,CAAC6J,SAAS,EAAE,CAAC,CACzD;MACDlF,8DAAa,CACT,4DAA4D,CAC/D;MACDkH,IAAI,CAACjB,KAAK,EAAE;IAAC;EACjB;EAAC,QAAArJ,CAAA;qCAjSQiE,iBAAiB,EAAAxG,uDAAA,CAAAyC,sEAAA,GAAAzC,uDAAA,CAAAoN,gEAAA,GAAApN,uDAAA,CAAAqN,4DAAA;EAAA;EAAA,QAAA3K,EAAA;WAAjB8D,iBAAiB;IAAA8G,OAAA,EAAjB9G,iBAAiB,CAAA+G,IAAA;IAAAC,UAAA,EAFd;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnEgB;AACK;AACP;AACI;AACN;AACI;AACH;AACG;AACgB;AACT;AAC6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTP;AAM1C;AACoC;AACjB;AAEyC;AAI1B;AACgB;AACI;;;;AAKzE,MAAOK,YAAY;EAIrB1M,YACY2F,IAAyB,EACzBC,OAAkB;IADlB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;IALZ,KAAA+G,YAAY,GAAG,IAAI;IACnB,KAAAC,aAAa,GAAG,IAAI;EAKxB;EAEUC,QAAQA,CAAC;IAClBzG,KAAK;IACL0G,IAAI;IACJ5L,MAAM;IACN6L,SAAS;IACTrF;EAAI,CAOP;IAAA,IAAA4B,KAAA;IAAA,OAAAC,wJAAA;MACG,IAAID,KAAI,CAACsD,aAAa,IAAI,CAACE,IAAI,EAAE;QAC7B,OAAOxI,4DAAW,CAAC,2CAA2C,CAAC;MACnE,CAAC,MAAM;QACHwI,IAAI,GAAGA,IAAI,IAAIR,4DAAW,EAAE;MAChC;MACApL,MAAM,GAAGA,MAAM,IAAI,EAAE;MACrB,MAAM8L,KAAK,GAAG1D,KAAI,CAAC3D,IAAI,CAACsH,WAAW,CAC/B7G,KAAK,CAAC,CAAC,CAAC,CAACoD,IAAI,YAAY9C,KAAK,GAAGN,KAAK,CAAC,CAAC,CAAC,CAACoD,IAAI,GAAG,CAACpD,KAAK,CAAC,CAAC,CAAC,CAACoD,IAAI,EAAE3J,EAAE,CAAC,CACvE;MACD,IAAIoK,GAAG,GAAsBX,KAAI,CAAC1D,OAAO,CAACsE,IAAI,CAC1CuC,wFAA2B,CAC9B;MACD,IAAIxB,OAAO,SAASb,OAAO,CAACC,IAAI,CAAC,CAC7BJ,GAAG,CAACM,iBAAiB,CAACrK,KAAK,CACtBmG,IAAI,CAACjD,qDAAK,CAAEhC,CAAc,IAAKA,CAAC,CAACF,MAAM,KAAK,MAAM,CAAC,CAAC,CACpDwI,SAAS,EAAE,EAChBO,GAAG,CACEK,WAAW,EAAE,CACbjE,IAAI,CAAChD,mDAAG,CAAEjC,CAAC,IAAK,IAAI,CAAC,CAAC,CACtBsI,SAAS,EAAE,CACnB,CAAC;MACF,IAAI,CAACuB,OAAO,EAAE;MACdhB,GAAG,CAACQ,KAAK,EAAE;MACXR,GAAG,GAAGX,KAAI,CAAC1D,OAAO,CAACsE,IAAI,CAACsC,oFAAyB,EAAE;QAC/CpE,IAAI,EAAE;UACF0E,IAAI;UACJ1G,KAAK;UACLsB,IAAI,EAAEA,IAAI,GAAG,IAAIjC,IAAI,CAACiC,IAAI,CAAC,GAAG,IAAIjC,IAAI,EAAE;UACxCvE,MAAM;UACN8L,KAAK;UACLL,YAAY,EAAErD,KAAI,CAACqD;;OAE1B,CAAC;MACF1B,OAAO,SAASb,OAAO,CAACC,IAAI,CAAC,CACzBJ,GAAG,CAACM,iBAAiB,CAACrK,KAAK,CACtBmG,IAAI,CAACjD,qDAAK,CAAEhC,CAAc,IAAKA,CAAC,CAACF,MAAM,KAAK,MAAM,CAAC,CAAC,CACpDwI,SAAS,EAAE,EAChBO,GAAG,CACEK,WAAW,EAAE,CACbjE,IAAI,CAAChD,mDAAG,CAAEjC,CAAC,IAAK,IAAI,CAAC,CAAC,CACtBsI,SAAS,EAAE,CACnB,CAAC;MACF,IAAI,CAACuB,OAAO,EAAE;MACd6B,IAAI,GAAG7C,GAAG,CAACM,iBAAiB,CAACuC,IAAI,IAAIA,IAAI;MACzCpF,IAAI,GAAGuC,GAAG,CAACM,iBAAiB,CAAC7C,IAAI,IAAIA,IAAI;MACzCxG,MAAM,GAAG+I,GAAG,CAACM,iBAAiB,CAACrJ,MAAM,IAAIA,MAAM;MAC/C,IAAI,CAAC4L,IAAI,EAAE;QACP7C,GAAG,CAACQ,KAAK,EAAE;QACX,OAAOnG,4DAAW,CAAC,4CAA4C,CAAC;MACpE;MACA2F,GAAG,CAACM,iBAAiB,CAACzJ,OAAO,GACzB,wCAAwC;MAC5C,MAAM+H,QAAQ,SAAS0D,2DAAa,CAAC;QACjCtE,IAAI,EAAE,MAAM;QACZF,YAAY,EAAElE,qDAAW,CAACC,oDAAU,CAAC4D,IAAI,IAAI,IAAIjC,IAAI,EAAE,CAAC,CAAC;QACzDuC,UAAU,EAAEnE,qDAAW,CAACF,mDAAQ,CAAC+D,IAAI,IAAI,IAAIjC,IAAI,EAAE,CAAC;OACvD,CAAC,CAACiE,SAAS,EAAE;MACd,MAAMD,SAAS,GAAGZ,QAAQ,CAACqE,MAAM,CAC5BC,CAAC,IAAKA,CAAC,CAACC,UAAU,CAACC,WAAW,EAAE,KAAKP,IAAI,CAACQ,KAAK,CAACD,WAAW,EAAE,CACjE;MACD,IAAI5D,SAAS,EAAEb,MAAM,EAAE;QACnBqB,GAAG,CAACQ,KAAK,EAAE;QACX,OAAOnG,4DAAW,CACd,iEAAiE,CACpE;MACL;MACA2F,GAAG,CAACM,iBAAiB,CAACzJ,OAAO,GAAG,iBAAiB;MACjD,MAAMyM,KAAK,GAAG,CAACT,IAAI,EAAE,IAAIC,SAAS,IAAI,EAAE,CAAC,CAAC;MAC1C,MAAM3C,OAAO,CAAC2B,GAAG,CAAC,CACd3F,KAAK,CAAC/C,GAAG,CAAC,CAACtD,IAAI,EAAE4J,GAAG,KAChBL,KAAI,CAACkE,eAAe,CAChBzN,IAAI,EACJ+M,IAAI,EACJpF,IAAI,CAAC+F,OAAO,EAAE,IAAI,IAAIhI,IAAI,EAAE,CAACgI,OAAO,EAAE,EACtCvM,MAAM,EACNqM,KAAK,CAAC5D,GAAG,CAAC,CACb,CACJ,CACJ,CAAC;MACFnF,8DAAa,CAAC,0BAA0B,CAAC;MACzCyF,GAAG,CAACQ,KAAK,EAAE;MACX,OAAO,IAAI;IAAC;EAChB;EAEc+C,eAAeA,CACzBzN,IAAU,EACV+M,IAAe,EACfpF,IAAY,EACZxG,MAAc,EACdwM,QAAA,GAAiB,IAAI;IAAA,IAAA1D,MAAA;IAAA,OAAAT,wJAAA;MAErB,MAAMoE,QAAQ,GAAG,GAAG5N,IAAI,CAACyJ,IAAI,EAAErJ,IAAI,IAAIJ,IAAI,CAACF,EAAE,EAAE;MAChD,MAAMmN,KAAK,GAAGhD,MAAI,CAACrE,IAAI,CAACsH,WAAW,CAC/BlN,IAAI,CAACyJ,IAAI,YAAY9C,KAAK,GAAG3G,IAAI,CAACyJ,IAAI,GAAG,CAACzJ,IAAI,CAACyJ,IAAI,EAAE3J,EAAE,CAAC,CAC3D;MACD,MAAMyG,KAAK,GAAGvG,IAAI,CAACyJ,IAAI,EAAE3J,EAAE,GACrB,CAACE,IAAI,CAACyJ,IAAI,EAAE3J,EAAE,EAAEmN,KAAK,EAAEY,SAAS,CAAC,GACjC,CAACZ,KAAK,EAAEY,SAAS,CAAC;MACxB,MAAMC,YAAY,GAAG;QACjBC,aAAa,EAAEjK,qDAAW,CAACC,oDAAU,CAAC4D,IAAI,CAAC,CAAC;QAC5CqG,OAAO,EAAEL,QAAQ,EAAE7N,EAAE,IAAIiN,IAAI,CAACjN,EAAE;QAChCkL,SAAS,EAAE2C,QAAQ,EAAEvN,IAAI,IAAI2M,IAAI,CAAC3M,IAAI;QACtCiN,UAAU,EAAEM,QAAQ,EAAEJ,KAAK,IAAIR,IAAI,CAACQ,KAAK;QACzCU,WAAW,EAAEC,IAAI,CAACC,KAAK,CAACvK,mDAAQ,CAAC+D,IAAI,CAAC,CAAC+F,OAAO,EAAE,GAAG,IAAI,CAAC;QACxDrI,QAAQ,EAAErF,IAAI,CAACF,EAAE;QACjBsO,UAAU,EAAEpO,IAAI,CAACI,IAAI;QACrBwL,KAAK,EAAEzK,MAAM;QACb4I,WAAW,EAAE6D,QAAQ;QACrBrH,KAAK;QACL8H,YAAY,EAAE,MAAM;QACpBnJ,cAAc,EAAE;UACZ5E,MAAM,EAAEN,IAAI,EAAEM,MAAM,IAAIN,IAAI,EAAEF,EAAE;UAChCS,MAAM,EAAEP,IAAI,CAACO,MAAM;UACnBoN,QAAQ,EAAEA,QAAQ,EAAEJ;;OAE3B;MACD,OAAOlJ,yDAAW,CAACyJ,YAAmB,CAAC,CAACnE,SAAS,EAAE;IAAC;EACxD;EAAC,QAAAtI,CAAA;qCA3IQsL,YAAY,EAAA7N,uDAAA,CAAAyC,+FAAA,GAAAzC,uDAAA,CAAAoN,gEAAA;EAAA;EAAA,QAAA1K,EAAA;WAAZmL,YAAY;IAAAP,OAAA,EAAZO,YAAY,CAAAN,IAAA;IAAAC,UAAA,EAFT;EAAM","sources":["./apps/concierge/src/app/desks/desk-modal.component.ts","./apps/concierge/src/app/desks/desks-state.service.ts","./libs/bookings/src/index.ts","./libs/bookings/src/lib/desk.service.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { Desk } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Desk</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"name\">Desk Name<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"name\"\n                                formControlName=\"name\"\n                                placeholder=\"e.g. Office Desk\"\n                            />\n                            <mat-error>A name is required for desks</mat-error>\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"map-id\">Map ID<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"map-id\"\n                                formControlName=\"map_id\"\n                                placeholder=\"e.g. table-01.012\"\n                            />\n                            <mat-error>\n                                A Map ID is required for desks\n                            </mat-error>\n                        </mat-form-field>\n                    </div>\n                </div>\n                <label for=\"notes\">Groups</label>\n                <item-list-field\n                    class=\"w-full\"\n                    placeholder=\"Add user groups...\"\n                    formControlName=\"groups\"\n                ></item-list-field>\n                <label for=\"notes\">Features</label>\n                <item-list-field\n                    class=\"w-full\"\n                    placeholder=\"Add features...\"\n                    formControlName=\"features\"\n                ></item-list-field>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\" class=\"no-subscript\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"flex py-4\">\n                    <mat-checkbox formControlName=\"bookable\">\n                        Bookable\n                    </mat-checkbox>\n                </div>\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving desk details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id(): string {\n        return this._data?.desk?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        groups: new FormControl<string[]>([]),\n        features: new FormControl<string[]>([]),\n        bookable: new FormControl(false),\n        notes: new FormControl(''),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: { desk?: Desk },\n        private _dialog_ref: MatDialogRef<DeskModalComponent>,\n    ) {\n        if (_data?.desk) this.form.patchValue(_data.desk);\n    }\n\n    public postForm() {\n        this.form.markAllAsTouched();\n        this.form.updateValueAndValidity();\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    listChildMetadata,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    first,\n    map,\n    scan,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryPagedBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n    SettingsService,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { QueryResponse } from '@placeos/ts-client/dist/esm/resources/functions';\nimport { DeskModalComponent } from './desk-modal.component';\n\nfunction addQRCodeToBooking(booking: Booking): Booking {\n    return new Booking({\n        ...booking,\n        extension_data: {\n            ...booking.extension_data,\n            checkin_qr_code: generateQRCode(\n                `/workplace/#/book/code?asset_id=${encodeURIComponent(\n                    booking.asset_id\n                )}`\n            ),\n        },\n    });\n}\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends AsyncHandler {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _desk_bookings: Booking[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n    private _change = new BehaviorSubject(0);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = combineLatest([\n        this._filters,\n        this._change,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([filters]) => {\n            const zones = filters.zones || [];\n            return zones && !zones.includes('All')\n                ? showMetadata(zones[0], 'desks').pipe(\n                      map((m) => (m.details instanceof Array ? m.details : [])),\n                      catchError((_) => of([]))\n                  )\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata?.desks?.details || [])\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      ),\n                      catchError((_) => of([]))\n                  );\n        }),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name?.localeCompare(b.name));\n            return list.map((i) => new Desk({ ...i, qr_code: '' }));\n        }),\n        shareReplay(1)\n    );\n\n    private _next_page = new Subject<() => QueryResponse<Booking>>();\n    private _call_next_page = new Subject<string>();\n    private _all_zones_keys = ['All', -1, '-1'];\n    public readonly setup_paging = combineLatest([\n        this._filters,\n        this._org.initialised,\n    ]).pipe(\n        debounceTime(500),\n        tap(([filters, loaded]) => {\n            if (!loaded) return;\n            const date = filters.date || Date.now();\n            const zones =\n                !filters.zones ||\n                filters.zones.some((z) => this._all_zones_keys.includes(z))\n                    ? this._settings.get('app.use_region')\n                        ? this._org.buildingsForRegion().map((_) => _.id)\n                        : [this._org.building.id]\n                    : filters.zones;\n            this._next_page.next(() =>\n                queryPagedBookings({\n                    period_start: getUnixTime(startOfDay(date)),\n                    period_end: getUnixTime(endOfDay(date)),\n                    type: 'desk',\n                    zones: zones.join(','),\n                    include_checked_out: true,\n                }).pipe(\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                )\n            );\n            this._call_next_page.next(`RESET_${Date.now()}`);\n        })\n    );\n\n    public readonly paged_bookings = combineLatest([\n        this._next_page,\n        this._call_next_page,\n    ]).pipe(\n        distinctUntilChanged((a, b) => a[1] === b[1]),\n        switchMap(([next_page, action]) => {\n            this._loading.next(true);\n            if (!next_page) {\n                return of({\n                    data: [],\n                    total: 0,\n                    next: null,\n                    reset: action.includes('RESET'),\n                });\n            }\n            // If reset is true, start over\n            if (action.includes('RESET')) {\n                return next_page().pipe(\n                    map((data: any) => ({ ...data, reset: true })),\n                    catchError((_) => of({ data: [], total: 0, next: null }))\n                );\n            }\n            return next_page().pipe(\n                map((data: any) => ({ ...data, reset: false })),\n                catchError((_) => of({ data: [], total: 0, next: null }))\n            );\n        }),\n        scan(\n            (acc, { data, total, next, reset }) => {\n                const list = data;\n                this._next_page.next(next); // Set the next page function\n                if (reset) return { list, total }; // Reset the items array\n                return {\n                    list: [...acc.list, ...list],\n                    total,\n                };\n            },\n            { list: [], total: 0 }\n        ),\n        tap((_) => this._loading.next(false)),\n        shareReplay(1)\n    );\n\n    public readonly has_more_pages = this.paged_bookings.pipe(\n        map((_) => _.list.length < _.total)\n    );\n    public readonly bookings = this.paged_bookings.pipe(map((i) => i.list));\n\n    public nextPage() {\n        this._call_next_page.next(`NEXT_${Date.now()}`);\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n        this.setup_paging.subscribe();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public refresh() {\n        this._loading.next(true);\n        this.timeout('poll', () => this.setFilters(this._filters.getValue()));\n    }\n\n    public async addDesks(list: Desk[]) {\n        const zone = this._filters.getValue().zones[0];\n        const desk_list = await this.desks.pipe(take(1)).toPromise();\n        for (const desk of list) {\n            const idx = desk_list.findIndex((_) => _.id === desk.id);\n            if (idx >= 0) desk_list[idx] = desk;\n            else desk_list.push(desk);\n        }\n        await updateMetadata(zone, {\n            name: 'desks',\n            details: desk_list,\n            description: 'List of available desks',\n        }).toPromise();\n        this._change.next(Date.now());\n    }\n\n    public async editDesk(desk?: Desk) {\n        const ref = this._dialog.open(DeskModalComponent, { data: { desk } });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._filters.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const desk_list = await this.desks.pipe(take(1)).toPromise();\n        const idx = desk_list.findIndex((_) => _.id === new_space.id);\n        if (idx >= 0) desk_list[idx] = new_space;\n        else desk_list.push(new_space);\n        await updateMetadata(zone, {\n            name: 'desks',\n            details: desk_list,\n            description: 'List of available desks',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    public async checkinDesk(desk: Booking, state: boolean = true) {\n        const status: any = await checkinBooking(desk.id, state ?? true)\n            .toPromise()\n            .catch((_) => ({ failed: true, error: _ }));\n        if (status.failed) {\n            notifyError(\n                status.error\n                    ? `Error: ${status.error}`\n                    : `Error checking ${state ? 'in' : 'out'} desk booking`\n            );\n            throw status.error;\n        }\n        notifySuccess(`Checked ${state ? 'in' : 'out'} ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error approving in desk booking');\n        }\n        notifySuccess(\n            `Approved desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = true;\n        (desk as any).rejected = false;\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed') {\n            return notifyError('Error rejecting in desk booking');\n        }\n        notifySuccess(\n            `Rejected desk booking for ${desk.user_name} on ${format(\n                desk.date,\n                'MMM do'\n            )}.`\n        );\n        (desk as any).approved = false;\n        (desk as any).rejected = true;\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length <= 0)\n            return notifyInfo('No desks to reject for the selected date');\n        const resp = await openConfirmModal(\n            {\n                title: 'Cancel all desk bookings',\n                content:\n                    'Are you sure you want to cancel all bookings for the selected date?',\n                icon: {\n                    type: 'icon',\n                    class: 'material-icons',\n                    content: 'delete',\n                },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.loading('Rejecting all desks for selected date...');\n        await Promise.all(\n            list.map((desk) => rejectBooking(desk.id).toPromise())\n        );\n        notifySuccess(\n            'Successfully rejected all desk bookings for selected date.'\n        );\n        resp.close();\n    }\n}\n","export * from './lib/bookings.module';\nexport * from './lib/booking-form.service';\nexport * from './lib/booking.class';\nexport * from './lib/booking.utilities';\nexport * from './lib/bookings.fn';\nexport * from './lib/bookings.module';\nexport * from './lib/desk.service';\nexport * from './lib/lockers.service';\nexport * from './lib/booking-details-modal.component';\nexport * from './lib/booking-card.component';\nexport * from './lib/parking-select-modal/parking-select-modal.component';\n\nexport * from './lib/parking.service';\n","import { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport {\n    currentUser,\n    DialogEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { first, map } from 'rxjs/operators';\n\nimport { OrganisationService } from 'libs/organisation/src/lib/organisation.service';\nimport { Desk } from 'libs/organisation/src/lib/desk.class';\nimport { StaffUser, User } from 'libs/users/src/lib/user.class';\n\nimport { queryBookings, saveBooking } from './bookings.fn';\nimport { DeskConfirmModalComponent } from './desk-confirm-modal.component';\nimport { DeskQuestionsModalComponent } from './desk-questions-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksService {\n    public can_set_date = true;\n    public error_on_host = true;\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public async bookDesk({\n        desks,\n        host,\n        reason,\n        attendees,\n        date,\n    }: {\n        desks: Desk[];\n        host?: StaffUser;\n        attendees?: User[];\n        reason?: string;\n        date?: Date;\n    }) {\n        if (this.error_on_host && !host) {\n            return notifyError('You need to select a host to book a desk.');\n        } else {\n            host = host || currentUser();\n        }\n        reason = reason || '';\n        const level = this._org.levelWithID(\n            desks[0].zone instanceof Array ? desks[0].zone : [desks[0].zone?.id]\n        );\n        let ref: MatDialogRef<any> = this._dialog.open(\n            DeskQuestionsModalComponent\n        );\n        let success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        ref.close();\n        ref = this._dialog.open(DeskConfirmModalComponent, {\n            data: {\n                host,\n                desks,\n                date: date ? new Date(date) : new Date(),\n                reason,\n                level,\n                can_set_date: this.can_set_date,\n            },\n        });\n        success = await Promise.race([\n            ref.componentInstance.event\n                .pipe(first((_: DialogEvent) => _.reason === 'done'))\n                .toPromise(),\n            ref\n                .afterClosed()\n                .pipe(map((_) => null))\n                .toPromise(),\n        ]);\n        if (!success) return;\n        host = ref.componentInstance.host || host;\n        date = ref.componentInstance.date || date;\n        reason = ref.componentInstance.reason || reason;\n        if (!host) {\n            ref.close();\n            return notifyError('You need to select a host to book a desk. ');\n        }\n        ref.componentInstance.loading =\n            'Checking for existing desk bookings...';\n        const bookings = await queryBookings({\n            type: 'desk',\n            period_start: getUnixTime(startOfDay(date || new Date())),\n            period_end: getUnixTime(endOfDay(date || new Date())),\n        }).toPromise();\n        const desk_list = bookings.filter(\n            (d) => d.user_email.toLowerCase() === host.email.toLowerCase()\n        );\n        if (desk_list?.length) {\n            ref.close();\n            return notifyError(\n                'You currently already have a desk booked for the selected date.'\n            );\n        }\n        ref.componentInstance.loading = 'Booking desk...';\n        const users = [host, ...(attendees || [])];\n        await Promise.all([\n            desks.map((desk, idx) =>\n                this.makeDeskBooking(\n                    desk,\n                    host,\n                    date.valueOf() || new Date().valueOf(),\n                    reason,\n                    users[idx]\n                )\n            ),\n        ]);\n        notifySuccess('Successfully booked desk');\n        ref.close();\n        return true;\n    }\n\n    private async makeDeskBooking(\n        desk: Desk,\n        host: StaffUser,\n        date: number,\n        reason: string,\n        for_user: User = null\n    ) {\n        const location = `${desk.zone?.name}-${desk.id}`;\n        const level = this._org.levelWithID(\n            desk.zone instanceof Array ? desk.zone : [desk.zone?.id]\n        );\n        const zones = desk.zone?.id\n            ? [desk.zone?.id, level?.parent_id]\n            : [level?.parent_id];\n        const booking_data = {\n            booking_start: getUnixTime(startOfDay(date)),\n            user_id: for_user?.id || host.id,\n            user_name: for_user?.name || host.name,\n            user_email: for_user?.email || host.email,\n            booking_end: Math.floor(endOfDay(date).valueOf() / 1000),\n            asset_id: desk.id,\n            asset_name: desk.name,\n            title: reason,\n            description: location,\n            zones,\n            booking_type: 'desk',\n            extension_data: {\n                map_id: desk?.map_id || desk?.id,\n                groups: desk.groups,\n                for_user: for_user?.email,\n            },\n        };\n        return saveBooking(booking_data as any).toPromise();\n    }\n}\n"],"names":["EventEmitter","FormControl","FormGroup","Validators","MatDialogRef","MAT_DIALOG_DATA","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","DeskModalComponent_main_5_Template_button_click_36_listener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","postForm","ɵɵproperty","form","DeskModalComponent","id","_data","desk","constructor","_dialog_ref","event","name","required","map_id","groups","features","bookable","notes","patchValue","markAllAsTouched","updateValueAndValidity","valid","loading","value","disableClose","emit","reason","metadata","_","ɵɵdirectiveInject","i1","_2","selectors","outputs","decls","vars","consts","template","DeskModalComponent_Template","rf","ctx","ɵɵtemplate","DeskModalComponent_button_4_Template","DeskModalComponent_main_5_Template","DeskModalComponent_ng_template_6_Template","ɵɵtemplateRefExtractor","ɵɵadvance","ɵɵtextInterpolate1","load_state_r3","MatDialog","listChildMetadata","showMetadata","updateMetadata","BehaviorSubject","combineLatest","of","Subject","catchError","debounceTime","distinctUntilChanged","first","map","scan","shareReplay","switchMap","take","tap","endOfDay","format","getUnixTime","startOfDay","approveBooking","Booking","checkinBooking","queryPagedBookings","rejectBooking","saveBooking","AsyncHandler","notifyError","notifyInfo","notifySuccess","openConfirmModal","randomInt","SettingsService","Desk","OrganisationService","generateQRCode","addQRCodeToBooking","booking","extension_data","checkin_qr_code","encodeURIComponent","asset_id","DesksStateService","nextPage","_call_next_page","next","Date","now","_org","_dialog","_settings","_filters","_desk_bookings","_loading","_change","asObservable","filters","desks","pipe","zones","includes","m","details","Array","building","i","reduce","c","list","sort","a","b","localeCompare","qr_code","_next_page","_all_zones_keys","setup_paging","initialised","loaded","date","some","z","get","buildingsForRegion","period_start","period_end","type","join","include_checked_out","data","total","paged_bookings","next_page","action","reset","acc","has_more_pages","length","bookings","subscribe","setFilters","levelsForBuilding","lvl","getValue","refresh","timeout","addDesks","_this","_asyncToGenerator","zone","desk_list","toPromise","idx","findIndex","push","description","editDesk","_this2","ref","open","state","Promise","race","afterClosed","componentInstance","new_space","close","checkinDesk","status","catch","failed","error","user_name","approveDesk","success","approved","rejected","rejectDesk","giveAccess","_this3","access","rejectAllDesks","_this4","resp","title","content","icon","class","all","ɵɵinject","i2","i3","factory","ɵfac","providedIn","currentUser","queryBookings","DeskConfirmModalComponent","DeskQuestionsModalComponent","DesksService","can_set_date","error_on_host","bookDesk","host","attendees","level","levelWithID","filter","d","user_email","toLowerCase","email","users","makeDeskBooking","valueOf","for_user","location","parent_id","booking_data","booking_start","user_id","booking_end","Math","floor","asset_name","booking_type"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}