{"version":3,"sources":["./apps/concierge/src/app/desks/desk-list-modal.component.ts","./apps/concierge/src/app/desks/desks-state.service.ts"],"names":["filter$","DeskListModalComponent","_data","_dialog_ref","building","this","level","desks$","BehaviorSubject","desks","desk_list","combineLatest","pipe","map","details","filter","desk","name","toLowerCase","includes","id","data","getValue","i","format","csv","display_name","split","join","event","target","file","files","loading","reader","FileReader","readAsText","onload","processCSV","result","onerror","evt","description","toPromise","catch","e","message","close","next","DesksStateService","_org","_dialog","super","_filters","_desk_bookings","_desks","_loading","asObservable","filters","debounceTime","switchMap","zones","m","metadata","reduce","c","catchError","_","list","Array","sort","a","b","localeCompare","shareReplay","bookings","date","Date","z","length","levelsForBuilding","period_start","Math","floor","startOfDay","valueOf","period_end","endOfDay","type","lvl","console","warn","delay","interval","setFilters","clearInterval","user_name","success","access","ref","open","title","content","icon","class","Promise","resolve","reject","componentInstance","first","reason","subscribe","all","afterClosed","levelWithID","level_list"],"mappings":"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","file":"default-apps_concierge_src_app_desks_desks-state_service_ts.js","sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { updateMetadata } from '@placeos/ts-client';\nimport {\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Building, BuildingLevel, Desk } from '@placeos/organisation';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface DeskListModalData {\n    building: Building;\n    level: BuildingLevel;\n    desks: Desk[];\n}\n\n@Component({\n    selector: 'desk-list-modal',\n    template: `\n        <header class=\"flex items-center\">\n            <h2 style=\"margin-right: 1rem;\">\n                <strong>List of Desks</strong> -\n                {{ building.display_name || building.name }},\n                {{ level.display_name || level.name }}\n            </h2>\n            <button mat-icon-button mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main class=\"flex flex-col\">\n                <div\n                    class=\"flex items-center p-2 space-x-2 w-full border-b border-gray-300\"\n                >\n                    <searchbar\n                        [model]=\"filter$ | async\"\n                        (modelChange)=\"filter$.next($event)\"\n                    ></searchbar>\n                    <div class=\"flex-1 w-0\"></div>\n                    <button mat-button class=\"relative\">\n                        Upload List\n                        <input\n                            type=\"file\"\n                            class=\"absolute inset-0 opacity-0\"\n                            (change)=\"upload($event)\"\n                        />\n                    </button>\n                    <button mat-button (click)=\"download()\">\n                        Download List\n                    </button>\n                </div>\n                <div class=\"flex flex-col flex-1 w-full\">\n                    <div\n                        class=\"flex items-center p-2 border-b border-gray-300 font-medium\"\n                    >\n                        <div class=\"w-40 p-1 flex-1\" flex>ID</div>\n                        <div class=\"w-32 p-1\">Name</div>\n                        <div class=\"w-24 p-1\">Bookable</div>\n                        <div class=\"w-52 p-1\">Groups</div>\n                    </div>\n                    <div table class=\"flex-1 overflow-auto\">\n                        <div\n                            class=\"flex item-center p-2 border-b border-gray-200\"\n                            *ngFor=\"let desk of desk_list | async\"\n                        >\n                            <div class=\"w-40 p-1 flex-1\" flex>\n                                {{ desk.id }}\n                            </div>\n                            <div class=\"w-32 p-1\">{{ desk.name }}</div>\n                            <div class=\"w-24 p-1\">\n                                <mat-checkbox\n                                    [(ngModel)]=\"desk.bookable\"\n                                ></mat-checkbox>\n                            </div>\n                            <div class=\"w-52\">\n                                <item-list-field\n                                    hide-outline no-wrapper\n                                    [(ngModel)]=\"desk.groups\"\n                                ></item-list-field>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </main>\n            <footer\n                class=\"flex items-center justify-center space-x-2 p-2 border-t border-gray-300\"\n            >\n                <button mat-button class=\"w-32\" (click)=\"save()\">Save</button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <main\n                class=\"w-64 h-48 mx-auto flex flex-col items-center justify-center\"\n            >\n                <mat-spinner class=\"m-4\" [diameter]=\"48\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [\n        `\n            main {\n                max-height: 65vh;\n            }\n\n            [table] {\n                height: 1px;\n                max-height: 50vh;\n            }\n        `,\n    ],\n})\nexport class DeskListModalComponent {\n    public readonly building = this._data.building;\n    public readonly level = this._data.level;\n    public readonly desks$ = new BehaviorSubject(this._data.desks);\n    public readonly filter$ = new BehaviorSubject('');\n\n    public loading: string;\n\n    public desk_list = combineLatest([this.filter$, this.desks$]).pipe(\n        map((details) => {\n            const [filter, desks] = details;\n            return desks.filter(\n                (desk) =>\n                    desk.name.toLowerCase().includes(filter.toLowerCase()) ||\n                    desk.id.toLowerCase().includes(filter.toLowerCase())\n            );\n        })\n    );\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: DeskListModalData,\n        private _dialog_ref: MatDialogRef<DeskListModalComponent>\n    ) {}\n\n    /** Download Desks list */\n    public download() {\n        const data = this.desks$.getValue().map((i) => i.format());\n        const csv = jsonToCsv(data);\n        const name = this.level.display_name.split(' ').join('-').toLowerCase();\n        downloadFile(`desks_${name}.csv`, csv);\n    }\n\n    /** Upload Desks list from csv */\n    public upload(event) {\n        if (event.target) {\n            const file = event.target.files[0];\n            if (file) {\n                this.loading = 'Uploading...';\n                const reader = new FileReader();\n                reader.readAsText(file, 'UTF-8');\n                reader.onload = () => {\n                    this.processCSV(reader.result as string);\n                    this.loading = '';\n                };\n                reader.onerror = (evt) => {\n                    this.loading = '';\n                    notifyError('Error reading file.');\n                };\n            }\n        }\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        await updateMetadata(this.level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: this.desks$.getValue(),\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this.loading = '';\n        this._dialog_ref.close();\n    }\n\n    /** Process csv */\n    private processCSV(csv: string) {\n        const data = csvToJson(csv);\n        this.desks$.next(data.map((i) => new Desk(i)));\n        notifySuccess(\n            'Upload was sucessful. Click Save Button to save the changes'\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay, format, startOfDay } from 'date-fns';\n\nimport {\n    approveBooking,\n    Booking,\n    checkinBooking,\n    queryBookings,\n    rejectBooking,\n    saveBooking,\n} from '@placeos/bookings';\nimport {\n    BaseClass,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n} from '@placeos/common';\nimport { listChildMetadata, showMetadata } from '@placeos/ts-client';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmModalComponent } from '@placeos/components';\nimport { DeskListModalComponent } from './desk-list-modal.component';\n\nexport interface DeskFilters {\n    date?: number;\n    zones?: string[];\n    show_map?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DesksStateService extends BaseClass {\n    private _filters = new BehaviorSubject<DeskFilters>({});\n    private _desk_bookings: Booking[] = [];\n    private _desks: Desk[] = [];\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly desks: Observable<Desk[]> = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = filters.zones || []\n            return !zones.includes('All')\n                ? showMetadata(zones[0], {\n                      name: 'desks',\n                  }).pipe(map((m) => m.details))\n                : listChildMetadata(this._org.building?.id, {\n                      name: 'desks',\n                  }).pipe(\n                      map((m) =>\n                          m\n                              .map((i) => i.metadata.desks.details)\n                              .reduce((c: any[], i: any[]) => [...c, ...i], [])\n                      )\n                  );\n        }),\n        catchError((_) => []),\n        map((list) => {\n            if (!(list instanceof Array)) list = [];\n            list.sort((a, b) => a.name.localeCompare(b.name));\n            this._desks = list.map((i) => new Desk(i));\n            return this._desks;\n        }),\n        shareReplay()\n    );\n\n    public readonly bookings = this._filters.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            this._loading.next(true);\n            const date = filters.date ? new Date(filters.date) : new Date();\n            let zones = (filters.zones || []).filter(\n                (z: any) => z !== -1 && z !== '-1'  && z !== 'All'\n            );\n            if (!zones?.length) {\n                zones = this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((i) => i.id);\n            }\n            return queryBookings({\n                period_start: Math.floor(startOfDay(date).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(date).valueOf() / 1000),\n                type: 'desk',\n                zones: (zones || []).join(','),\n            });\n        }),\n        map((list) => {\n            list.sort((a, b) => a.date - b.date);\n            this._desk_bookings = list;\n            this._loading.next(false);\n            return list;\n        }),\n        shareReplay()\n    );\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setFilters(filters: DeskFilters) {\n        if (filters.zones?.includes('All')) {\n            filters.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            filters.zones &&\n            this._filters.getValue()?.zones?.includes('All')\n        ) {\n            filters.zones = [];\n        }\n        console.warn('Zones:', filters.zones);\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkinDesk(desk: Booking) {\n        const success = await checkinBooking(desk.id, true)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error checking in desk booking')\n            : notifySuccess(`Checked in ${desk.user_name}.`);\n    }\n\n    public async approveDesk(desk: Booking) {\n        const success = await approveBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(`Approved desk booking for ${desk.user_name} on ${format(desk.date, 'MMM Do')}.`);\n    }\n\n    public async rejectDesk(desk: Booking) {\n        const success = await rejectBooking(desk.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(`Rejected desk booking for ${desk.user_name} on ${format(desk.date, 'MMM Do')}.`);\n    }\n\n    public async giveAccess(desk: Booking) {\n        const success = await saveBooking(\n            new Booking({ ...desk, access: true })\n        )\n            .toPromise()\n            .catch((_) => 'failed');\n        if (success === 'failed')\n            return notifyError('Error giving building access booking host');\n        notifySuccess(\n            `Successfully gave building access to ${desk.user_name} for desk booking.`\n        );\n        this._desk_bookings = [...this._desk_bookings, success] as any;\n    }\n\n    public async rejectAllDesks() {\n        const list = this._desk_bookings || [];\n        if (list.length > 0) {\n            const ref = this._dialog.open(ConfirmModalComponent, {\n                data: {\n                    title: 'Cancel all desk bookings',\n                    content:\n                        'Are you sure you want to cancel all bookings for the selected date?',\n                    icon: {\n                        type: 'icon',\n                        class: 'material-icons',\n                        content: 'delete',\n                    },\n                },\n            });\n            return new Promise(async (resolve, reject) => {\n                let success = false;\n                ref.componentInstance.event\n                    .pipe(first((_) => _.reason === 'done'))\n                    .subscribe(async () => {\n                        ref.componentInstance.loading =\n                            'Rejecting all desks for selected date...';\n                        success = true;\n                        await Promise.all(\n                            list.map((desk) =>\n                                rejectBooking(desk.id).toPromise()\n                            )\n                        );\n                        resolve('');\n                        notifySuccess(\n                            'Successfull rejected all desk bookings for selected date.'\n                        );\n                        ref.close();\n                    });\n                await ref.afterClosed().toPromise();\n                if (!success) {\n                    reject();\n                }\n            });\n        } else {\n            notifyInfo('No desks to reject for the selected date');\n        }\n    }\n\n    public async updateDesks() {\n        const ref = this._dialog.open(DeskListModalComponent, {\n            data: {\n                level:\n                    this._org.levelWithID(this._filters.getValue().zones) ||\n                    this._org.level_list[0],\n                building: this._org.building,\n                desks: this._desks,\n            },\n        });\n        await ref.afterClosed().toPromise();\n        this._desks = ref.componentInstance.desks$.getValue();\n    }\n}\n"],"sourceRoot":"webpack:///"}