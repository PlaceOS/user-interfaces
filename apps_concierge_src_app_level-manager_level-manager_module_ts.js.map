{"version":3,"file":"apps_concierge_src_app_level-manager_level-manager_module_ts.js","mappings":"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","names":["i0","building_r9","id","display_name","name","LevelModalComponent_main_4_form_1_div_1_mat_option_6_Template","ctx_r6","form","controls","parent_id","invalid","touched","building_list","LevelModalComponent_main_4_form_1_div_1_Template","LevelModalComponent_main_4_form_1_div_2_Template","ctx_r5","LevelModalComponent_main_4_form_1_Template","ctx_r1","_r11","ctx_r10","save","LevelModalComponent","constructor","_org","_data","_dialog_ref","this","loading","FormGroup","FormControl","Validators","required","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","data","getRawValue","tags","resp","updateZone","authority","description","addZone","toPromise","catch","close","static","t","i1","MAT_DIALOG_DATA","i2","core","Xpm","selectors","decls","vars","consts","i18n_0","$localize","LevelModalComponent_button_3_Template","LevelModalComponent_main_4_Template","LevelModalComponent_footer_5_Template","LevelModalComponent_ng_template_6_Template","ctx","value","_r3","LevelManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","level_list","filtered_levels","combineLatest","pipe","map","list","zone","filter","_","search","toLowerCase","includes","level","parent","buildings","find","bld","building","setFilters","next","getValue","setSearchString","editLevel","PlaceZone","open","afterClosed","subscribe","removeLevel","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","notifySuccess","Yz7","factory","Éµfac","providedIn","row_r2","_r5","row","ctx_r4","LevelListComponent","_manager","levels","template","rf","LevelListComponent_ng_template_2_Template","_c0","_c1","_c2","_c3","_r0","LevelManagerComponent","newLevel","attrs","ROUTES","path","component","LevelManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/level-manager/level-modal.component.ts","./apps/concierge/src/app/level-manager/level-management.service.ts","./apps/concierge/src/app/level-manager/level-list.component.ts","./apps/concierge/src/app/level-manager/level-manager.component.ts","./apps/concierge/src/app/level-manager/level-manager.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { getInvalidFields, notifyError } from '@placeos/common';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'level-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Level</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.parent_id\">\n                    <label\n                        for=\"zone\"\n                        [class.error]=\"\n                            form.controls.parent_id.invalid &&\n                            form.controls.parent_id.touched\n                        \"\n                        i18n=\"@@zoneLabel\"\n                    >\n                        Building<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"parent_id\"\n                            placeholder=\"Select Building\"\n                        >\n                            <mat-option\n                                *ngFor=\"let building of building_list | async\"\n                                [value]=\"building.id\"\n                            >\n                                {{ building.display_name || building.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>Building is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.display_name\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            i18n-placeholder=\"@@displayNamePlaceholder\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving level...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LevelModalComponent {\n    public loading = false;\n    public readonly building_list = this._org.building_list;\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        display_name: new FormControl(this._data?.display_name || '', [\n            Validators.required,\n        ]),\n        parent_id: new FormControl(this._data?.parent_id || '', [\n            Validators.required,\n        ]),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: BuildingLevel | undefined,\n        private _dialog_ref: MatDialogRef<LevelModalComponent>\n    ) {}\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        this.loading = true;\n        const data: any = this.form.getRawValue();\n        data.tags = ['level'];\n        const resp = await (data.id\n            ? updateZone(data.id, {\n                  ...data,\n                  name: `LEVEL ${authority().description} ${data.display_name}`,\n              })\n            : addZone({\n                  ...data,\n                  name: `LEVEL ${authority().description} ${data.display_name}`,\n              })\n        )\n            .toPromise()\n            .catch();\n        if (resp.id) this._dialog_ref.close(resp);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LevelModalComponent } from './level-modal.component';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\n\nexport interface LevelListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LevelManagementService {\n    private _options = new BehaviorSubject<LevelListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly level_list = this._org.level_list;\n\n    public readonly filtered_levels = combineLatest([\n        this.level_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.parent_id === options.zone);\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const level of list) {\n                const parent = this._org.buildings.find(\n                    (bld) => bld.id === level.parent_id\n                );\n                if (parent) {\n                    (level as any).building =\n                        parent.display_name || parent.name;\n                }\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<LevelListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editLevel(level: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(LevelModalComponent, {\n            data: level,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) this._org.addZone(data);\n        });\n    }\n\n    public async removeLevel(level: BuildingLevel) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${level.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(level.id).toPromise();\n        this._org.removeZone({ id: level.id, tags: ['level'] } as any);\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { LevelManagementService } from './level-management.service';\n\n@Component({\n    selector: 'level-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-4\">\n            <custom-table\n                class=\"block min-w-[28rem] w-full h-full\"\n                [dataSource]=\"levels\"\n                [columns]=\"['display_name', 'building', 'actions']\"\n                [display_column]=\"['Name', 'Building', ' ']\"\n                [column_size]=\"['flex', '12r', '3.75r']\"\n                [template]=\"{\n                    actions: action_template\n                }\"\n                empty=\"No levels\"\n            ></custom-table>\n        </div>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon matRipple [matMenuTriggerFor]=\"menu\">\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editLevel(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit</app-icon>\n                            <span>Edit Level</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"removeLevel(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon>delete</app-icon>\n                            <span>Delete Level</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LevelListComponent {\n    public readonly levels = this._manager.filtered_levels;\n\n    public readonly editLevel = (level) => this._manager.editLevel(level);\n    public readonly removeLevel = (level) => this._manager.removeLevel(level);\n\n    constructor(private _manager: LevelManagementService) {}\n}\n","import { Component } from '@angular/core';\nimport { LevelManagementService } from './level-management.service';\n\n@Component({\n    selector: '[app-level-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header\n                    class=\"flex items-center justify-between mb-2 px-4 py-8\"\n                >\n                    <h2 class=\"text-2xl font-medium\">Level Management</h2>\n                    <button btn matRipple (click)=\"newLevel()\">\n                        Add Level\n                    </button>\n                </header>\n                <level-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></level-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class LevelManagerComponent {\n    public readonly newLevel = () => this._manager.editLevel();\n\n    constructor(private _manager: LevelManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { LevelManagerComponent } from './level-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { LevelListComponent } from './level-list.component';\nimport { LevelModalComponent } from './level-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: LevelManagerComponent },\n    { path: 'new', component: LevelManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        LevelManagerComponent,\n        LevelListComponent,\n        LevelModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class LevelManagerModule {}\n"],"x_google_ignoreList":[]}