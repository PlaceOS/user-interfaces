{"version":3,"file":"apps_concierge_src_app_level-manager_level-manager_module_ts.js","mappings":"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","names":["i0","building_r9","id","display_name","name","LevelModalComponent_main_4_form_1_div_1_mat_option_6_Template","ctx_r6","form","controls","parent_id","invalid","touched","building_list","LevelModalComponent_main_4_form_1_div_1_Template","LevelModalComponent_main_4_form_1_div_2_Template","ctx_r5","LevelModalComponent_main_4_form_1_Template","ctx_r1","_r11","ctx_r10","save","LevelModalComponent","constructor","_org","_data","this","loading","FormGroup","FormControl","Validators","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","data","getRawValue","updateZone","authority","description","addZone","toPromise","catch","t","i1","MAT_DIALOG_DATA","core","Xpm","selectors","decls","vars","consts","i18n_0","$localize","LevelModalComponent_button_3_Template","LevelModalComponent_main_4_Template","LevelModalComponent_footer_5_Template","LevelModalComponent_ng_template_6_Template","ctx","value","_r3","LevelManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","level_list","filtered_levels","combineLatest","pipe","map","list","zone","filter","_","search","toLowerCase","includes","level","parent","buildings","find","bld","building","setFilters","next","getValue","setSearchString","editLevel","PlaceZone","open","afterClosed","subscribe","setTimeout","Date","now","removeLevel","ref","openConfirmModal","title","content","icon","confirm_text","reason","close","removeZone","notifySuccess","i2","Yz7","factory","Éµfac","providedIn","row_r2","_r5","row","ctx_r4","LevelListComponent","_manager","levels","template","rf","LevelListComponent_ng_template_2_Template","_c0","_c1","_c2","_c3","_r0","LevelManagerComponent","newLevel","attrs","ROUTES","path","component","LevelManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/level-manager/level-modal.component.ts","./apps/concierge/src/app/level-manager/level-management.service.ts","./apps/concierge/src/app/level-manager/level-list.component.ts","./apps/concierge/src/app/level-manager/level-manager.component.ts","./apps/concierge/src/app/level-manager/level-manager.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { getInvalidFields, notifyError } from '@placeos/common';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'level-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Level</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.parent_id\">\n                    <label\n                        for=\"zone\"\n                        [class.error]=\"\n                            form.controls.parent_id.invalid &&\n                            form.controls.parent_id.touched\n                        \"\n                        i18n=\"@@zoneLabel\"\n                    >\n                        Building<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"parent_id\"\n                            placeholder=\"Select Building\"\n                        >\n                            <mat-option\n                                *ngFor=\"let building of building_list | async\"\n                                [value]=\"building.id\"\n                            >\n                                {{ building.display_name || building.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>Building is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.display_name\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            i18n-placeholder=\"@@displayNamePlaceholder\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-gray-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving level...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LevelModalComponent {\n    public loading = false;\n    public readonly building_list = this._org.building_list;\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        display_name: new FormControl(this._data?.display_name || '', [\n            Validators.required,\n        ]),\n        parent_id: new FormControl(this._data?.parent_id || '', [\n            Validators.required,\n        ]),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: BuildingLevel | undefined\n    ) {}\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        this.loading = true;\n        const data = this.form.getRawValue();\n        await (data.id\n            ? updateZone(data.id, {\n                  ...data,\n                  name: `LEVEL ${authority().description} ${data.display_name}`,\n              })\n            : addZone({\n                  ...data,\n                  name: `LEVEL ${authority().description} ${data.display_name}`,\n              })\n        )\n            .toPromise()\n            .catch();\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LevelModalComponent } from './level-modal.component';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\n\nexport interface LevelListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LevelManagementService {\n    private _options = new BehaviorSubject<LevelListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly level_list = this._org.level_list;\n\n    public readonly filtered_levels = combineLatest([\n        this.level_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.parent_id === options.zone);\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const level of list) {\n                const parent = this._org.buildings.find(\n                    (bld) => bld.id === level.parent_id\n                );\n                if (parent) {\n                    (level as any).building =\n                        parent.display_name || parent.name;\n                }\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<LevelListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editLevel(level: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(LevelModalComponent, {\n            data: level,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) setTimeout(() => this._change.next(Date.now()), 300);\n        });\n    }\n\n    public async removeLevel(level: BuildingLevel) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${level.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(level.id).toPromise();\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { LevelManagementService } from './level-management.service';\n\n@Component({\n    selector: 'level-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto\">\n            <custom-table\n                class=\"block min-w-[48rem] w-full h-full\"\n                [dataSource]=\"levels\"\n                [columns]=\"['display_name', 'building', 'actions']\"\n                [display_column]=\"['Name', 'Building', ' ']\"\n                [column_size]=\"['flex', '12r', '5r']\"\n                [template]=\"{\n                    actions: action_template\n                }\"\n                empty=\"No levels\"\n            ></custom-table>\n        </div>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button btn icon [matMenuTriggerFor]=\"menu\">\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"editLevel(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit</app-icon>\n                            <span>Edit Level</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"removeLevel(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon>delete</app-icon>\n                            <span>Delete Level</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LevelListComponent {\n    public readonly levels = this._manager.filtered_levels;\n\n    public readonly editLevel = (level) => this._manager.editLevel(level);\n    public readonly removeLevel = (level) => this._manager.removeLevel(level);\n\n    constructor(private _manager: LevelManagementService) {}\n}\n","import { Component } from '@angular/core';\nimport { LevelManagementService } from './level-management.service';\n\n@Component({\n    selector: '[app-level-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header class=\"flex items-center justify-between mb-2 p-8\">\n                    <h2 class=\"text-2xl font-medium\">Level Management</h2>\n                    <button btn matRipple (click)=\"newLevel()\">\n                        Add Level\n                    </button>\n                </header>\n                <level-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></level-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class LevelManagerComponent {\n    public readonly newLevel = () => this._manager.editLevel();\n\n    constructor(private _manager: LevelManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { LevelManagerComponent } from './level-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { LevelListComponent } from './level-list.component';\nimport { LevelModalComponent } from './level-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: LevelManagerComponent },\n    { path: 'new', component: LevelManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        LevelManagerComponent,\n        LevelListComponent,\n        LevelModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class LevelManagerModule {}\n"],"x_google_ignoreList":[]}