{"version":3,"file":"apps_concierge_src_app_level-manager_level-manager_module_ts.js","mappings":"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","names":["i0","building_r1","id","display_name","name","LevelModalComponent_main_4_form_1_div_1_mat_option_6_Template","ctx_r1","form","controls","parent_id","invalid","touched","building_list","LevelModalComponent_main_4_form_1_div_1_Template","LevelModalComponent_main_4_form_1_div_2_Template","LevelModalComponent_main_4_form_1_div_3_Template","LevelModalComponent_main_4_form_1_div_4_Template","map_id","parking","LevelModalComponent_main_4_form_1_Template","_r3","save","LevelModalComponent","constructor","_org","_data","_dialog_ref","this","loading","FormGroup","FormControl","Validators","required","tags","includes","_this","_asyncToGenerator","valid","notifyError","getInvalidFields","join","data","getRawValue","resp","updateZone","authority","description","addZone","toPromise","catch","close","static","t","i1","MAT_DIALOG_DATA","i2","core","VBU","selectors","decls","vars","consts","i18n_0","$localize","LevelModalComponent_button_3_Template","LevelModalComponent_main_4_Template","LevelModalComponent_footer_5_Template","LevelModalComponent_ng_template_6_Template","ctx","value","load_state_r4","LevelManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","level_list","filtered_levels","combineLatest","pipe","map","list","zone","filter","_","search","toLowerCase","level","parent","buildings","find","bld","building","setFilters","next","getValue","setSearchString","editLevel","PlaceZone","open","afterClosed","subscribe","removeLevel","ref","openConfirmModal","title","content","icon","confirm_text","reason","removeZone","notifySuccess","jDH","factory","Éµfac","providedIn","row_r2","_r1","row","ctx_r2","copyToClipboard","data_r4","LevelListComponent_ng_template_5_div_0_Template","row_r5","row_r7","_r6","LevelListComponent","_manager","_clipboard","levels","copy","template","rf","LevelListComponent_ng_template_3_Template","LevelListComponent_ng_template_5_Template","LevelListComponent_ng_template_7_Template","_c4","_c0","name_template_r8","_c1","_c2","parking_template_r9","_c3","action_template_r10","LevelManagerComponent","newLevel","attrs","ROUTES","path","component","LevelManagerModule","$C","G2t","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild","MapLocation","type","location","position","asset_id","x","map_width","y","map_height","variance","last_seen","getUnixTime","Date","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/level-manager/level-modal.component.ts","./apps/concierge/src/app/level-manager/level-management.service.ts","./apps/concierge/src/app/level-manager/level-list.component.ts","./apps/concierge/src/app/level-manager/level-manager.component.ts","./apps/concierge/src/app/level-manager/level-manager.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { getInvalidFields, notifyError } from '@placeos/common';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { addZone, authority, updateZone } from '@placeos/ts-client';\n\n@Component({\n    selector: 'level-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Level</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[36rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.parent_id\">\n                    <label\n                        for=\"zone\"\n                        [class.error]=\"\n                            form.controls.parent_id.invalid &&\n                            form.controls.parent_id.touched\n                        \"\n                        i18n=\"@@zoneLabel\"\n                    >\n                        Building<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"parent_id\"\n                            placeholder=\"Select Building\"\n                        >\n                            <mat-option\n                                *ngFor=\"let building of building_list | async\"\n                                [value]=\"building.id\"\n                            >\n                                {{ building.display_name || building.name }}\n                            </mat-option>\n                        </mat-select>\n                        <mat-error>Building is required</mat-error>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.display_name\">\n                    <label for=\"display-name\" i18n=\"@@displayNameLabel\">\n                        Display Name:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"display-name\"\n                            placeholder=\"Display Name\"\n                            i18n-placeholder=\"@@displayNamePlaceholder\"\n                            formControlName=\"display_name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.map_id\">\n                    <label for=\"map-id\" i18n=\"@@mapIdLabel\"> Map URL: </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"map-id\"\n                            placeholder=\"URL of the Map SVG file\"\n                            i18n-placeholder=\"@@mapIdPlaceholder\"\n                            formControlName=\"map_id\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col py-2\" *ngIf=\"form.controls.parking\">\n                    <mat-checkbox name=\"parking\" formControlName=\"parking\">\n                        Has Parking Spaces\n                    </mat-checkbox>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving level...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LevelModalComponent {\n    public loading = false;\n    public readonly building_list = this._org.building_list;\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        display_name: new FormControl(this._data?.display_name || '', [\n            Validators.required,\n        ]),\n        parent_id: new FormControl(this._data?.parent_id || '', [\n            Validators.required,\n        ]),\n        map_id: new FormControl(this._data?.map_id || '', [\n            Validators.required,\n        ]),\n        parking: new FormControl(\n            this._data?.tags?.includes('parking') || false\n        ),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: BuildingLevel | undefined,\n        private _dialog_ref: MatDialogRef<LevelModalComponent>\n    ) {}\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        this.loading = true;\n        const data: any = this.form.getRawValue();\n        data.tags = data.parking ? ['level', 'parking'] : ['level'];\n        const resp = await (data.id\n            ? updateZone(data.id, {\n                  ...data,\n                  name: `LEVEL ${authority().description} ${data.display_name}`,\n              })\n            : addZone({\n                  ...data,\n                  name: `LEVEL ${authority().description} ${data.display_name}`,\n              })\n        )\n            .toPromise()\n            .catch();\n        if (resp.id) this._dialog_ref.close(resp);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { PlaceZone, removeZone } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LevelModalComponent } from './level-modal.component';\nimport { notifySuccess, openConfirmModal } from '@placeos/common';\n\nexport interface LevelListOptions {\n    zone?: string;\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LevelManagementService {\n    private _options = new BehaviorSubject<LevelListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    public readonly level_list = this._org.level_list;\n\n    public readonly filtered_levels = combineLatest([\n        this.level_list,\n        this._options,\n    ]).pipe(\n        map(([list, options]) => {\n            if (options.zone) {\n                list = list.filter((_) => _.parent_id === options.zone);\n            }\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            for (const level of list) {\n                const parent = this._org.buildings.find(\n                    (bld) => bld.id === level.parent_id\n                );\n                if (parent) {\n                    (level as any).building =\n                        parent.display_name || parent.name;\n                }\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<LevelListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editLevel(level: PlaceZone = new PlaceZone()) {\n        const ref = this._dialog.open(LevelModalComponent, {\n            data: level,\n        });\n        ref.afterClosed().subscribe((data) => {\n            if (data) this._org.addZone(data);\n        });\n    }\n\n    public async removeLevel(level: BuildingLevel) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Building',\n                content: `Are you sure you want to remove the building \"${level.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing building...');\n        await removeZone(level.id).toPromise();\n        this._org.removeZone({ id: level.id, tags: ['level'] } as any);\n        notifySuccess('Successfully removed building.');\n        ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { LevelManagementService } from './level-management.service';\nimport { notifySuccess } from '@placeos/common';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\n@Component({\n    selector: 'level-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-8\">\n            <simple-table\n                class=\"min-w-[48rem] block text-sm\"\n                [data]=\"levels\"\n                empty_message=\"No levels\"\n                [columns]=\"[\n                    {\n                        key: 'display_name',\n                        name: 'Level Name',\n                        content: name_template\n                    },\n                    { key: 'building', name: 'Buildings', size: '16rem' },\n                    {\n                        key: 'parking',\n                        name: 'Parking',\n                        content: parking_template,\n                        size: '5rem',\n                        sortable: false\n                    },\n                    {\n                        key: 'actions',\n                        name: ' ',\n                        content: action_template,\n                        size: '6rem',\n                        sortable: false\n                    }\n                ]\"\n                [sortable]=\"true\"\n            ></simple-table>\n            <div class=\"w-full h-20\"></div>\n        </div>\n        <ng-template #name_template let-row=\"row\" let-data=\"data\">\n            <button\n                class=\"px-4 py-2 text-left leading-tight\"\n                (click)=\"copyToClipboard(row.id)\"\n            >\n                <div class=\"\">{{ data }}</div>\n                <div class=\"text-[0.625rem] opacity-30 font-mono\">\n                    {{ row.id }}\n                </div>\n            </button>\n        </ng-template>\n        <ng-template #parking_template let-row=\"row\">\n            <div\n                *ngIf=\"row.tags?.includes('parking')\"\n                class=\"rounded h-8 w-8 flex items-center justify-center text-2xl bg-success text-success-content mx-auto\"\n            >\n                <app-icon>done</app-icon>\n            </div>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2 p-2\">\n                <button\n                    icon\n                    matRipple\n                    matTooltip=\"Edit Level\"\n                    (click)=\"editLevel(row)\"\n                >\n                    <app-icon>edit</app-icon>\n                </button>\n                <button\n                    icon\n                    matRipple\n                    class=\"text-error\"\n                    (click)=\"removeLevel(row)\"\n                    matTooltip=\"Remove Level\"\n                >\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LevelListComponent {\n    public readonly levels = this._manager.filtered_levels;\n\n    public readonly editLevel = (level) => this._manager.editLevel(level);\n    public readonly removeLevel = (level) => this._manager.removeLevel(level);\n\n    public readonly copyToClipboard = (id: string) => {\n        const success = this._clipboard.copy(id);\n        if (success) notifySuccess('Level ID copied to clipboard.');\n    };\n\n    constructor(\n        private _manager: LevelManagementService,\n        private _clipboard: Clipboard\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { LevelManagementService } from './level-management.service';\n\n@Component({\n    selector: '[app-level-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header\n                    class=\"flex items-center justify-between mb-2 px-8 pt-4 pb-8\"\n                >\n                    <h2 class=\"text-2xl font-medium\">Level Management</h2>\n                    <button btn matRipple (click)=\"newLevel()\" class=\"w-40\">\n                        Add Level\n                    </button>\n                </header>\n                <level-list\n                    class=\"block w-full relative flex-1 h-1/2\"\n                ></level-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class LevelManagerComponent {\n    public readonly newLevel = () => this._manager.editLevel();\n\n    constructor(private _manager: LevelManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { LevelManagerComponent } from './level-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { LevelListComponent } from './level-list.component';\nimport { LevelModalComponent } from './level-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: LevelManagerComponent },\n    { path: 'new', component: LevelManagerComponent },\n];\n\n@NgModule({\n    declarations: [\n        LevelManagerComponent,\n        LevelListComponent,\n        LevelModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class LevelManagerModule {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}