{"version":3,"file":"apps_concierge_src_app_desks_desks_module_ts.js","mappings":"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","names":["i0","_r1","ctx_r1","setOptions","group","members","tmp_2_0","options","tmp_3_0","tmp_4_0","tmp_5_0","tmp_6_0","tmp_7_0","$event","_r3","form","patchValue","date","value","_c0","use_24hr","timezone","get","_r4","recurrence","onRecurrenceChange","NewDeskFormDetailsComponent_div_0_div_28_mat_checkbox_7_Template","getRawValue","id","_r5","secondary_resource","_r6","_c1","NewDeskFormDetailsComponent_div_0_section_32_p_8_Template","_c2","duration","all_day","NewDeskFormDetailsComponent_div_0_section_1_Template","NewDeskFormDetailsComponent_div_0_div_8_Template","NewDeskFormDetailsComponent_div_0_mat_checkbox_26_Template","NewDeskFormDetailsComponent_div_0_div_27_Template","NewDeskFormDetailsComponent_div_0_div_28_Template","NewDeskFormDetailsComponent_div_0_div_29_Template","NewDeskFormDetailsComponent_div_0_section_30_Template","NewDeskFormDetailsComponent_div_0_section_32_Template","NewDeskFormDetailsComponent_div_0_section_33_Template","allow_groups","can_book_for_others","end_date","allow_all_day","can_recurr","can_book_lockers","tmp_11_0","contains","has_assets","NewDeskFormDetailsComponent","AsyncHandler","building","this","_org","bld","_settings","needs_reason","allow_time_changes","endOfDay","addDays","Date","now","valueOf","constructor","_state","super","find","EventEmitter","buildings","building_list","levels","active_levels","features","force_time","set","hours","minutes","from_id","recurrence_options","o","setFeature","f","e","ngOnChanges","changes","selected_desk","resources","initialiseRecurrence","recurrence_type","recurrence_days","recurrence_interval","recurrence_end","pattern","days_of_week","Array","fill","map","_","i","filter","DAYS_OF_WEEK_INDEX","interval","start","end","RecurrenceDays","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","getUnixTime","reduce","d","getDate","instance","Math","floor","recurrence_nth_of_month","static","__ngFactoryType__","i1","i2","i3","core","VBU","selectors","inputs","outputs","decls","vars","consts","i18n_0","$localize","NewDeskFormDetailsComponent_div_0_Template","ctx","ctx_r0","_r2","save","DeskBookModalComponent","_booking_form","_dialog_ref","event","loading","BehaviorSubject","_this","_asyncToGenerator","next","booking_type","postForm","catch","notifyError","emit","reason","metadata","notifySuccess","close","template","rf","DeskBookModalComponent_main_7_Template","DeskBookModalComponent_footer_9_Template","DeskBookModalComponent_ng_template_11_Template","load_state_r3","level_r1","display_name","name","ctx_r2","newDeskBooking","newDesk","loadCSVData","downloadTemplate","_r7","manageRestrictions","DesksTopbarComponent","_desks","_route","_router","_dialog","filters","manage","is_map","setDate","setFilters","updateZones","zones","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","ngOnInit","initialised","pipe","first","toPromise","subscription","queryParamMap","subscribe","params","has","split","length","level","levelWithID","parent_id","approve","reject","url","includes","events","_ref","take","zone","lvl","push","_x","apply","arguments","desk","Desk","randomInt","staff_name","addDesks","notifyInfo","undefined","open","BookingRulesModalComponent","data","type","_this2","loadTextFileFromInputEvent","m","list","csvToJson","console","error","bookable","groups","toJSON","images","jsonToCsv","downloadFile","_this3","booking","showBooking","approveDesk","_this4","rejectDesk","i4","DesksTopbarComponent_mat_option_5_Template","DesksTopbarComponent_mat_option_6_Template","DesksTopbarComponent_button_8_Template","DesksTopbarComponent_button_9_Template","DesksTopbarComponent_button_10_Template","DesksTopbarComponent_button_11_Template","DesksTopbarComponent_button_12_Template","search","tmp_8_0","DesksComponent","refresh","NavigationEnd","url_parts","path","parts","ngOnDestroy","attrs","DesksComponent_mat_progress_bar_13_Template","_c3","date_r2","DeskBookingsComponent_ng_template_6_span_2_Template","row_r3","extension_data","row_r4","ctx_r4","time_format","date_end","DeskBookingsComponent_ng_template_8_ng_container_1_ng_container_2_Template","DeskBookingsComponent_ng_template_8_ng_container_1_ng_container_3_Template","status","DeskBookingsComponent_ng_template_8_ng_container_1_Template","DeskBookingsComponent_ng_template_8_ng_container_2_Template","deleted","row_r6","user_email","DeskBookingsComponent_ng_template_10_div_3_Template","user_name","booked_by_name","booked_by_email","row_r8","row","menu_r9","row_r11","_r10","checkin","data_r12","checkinMenu_r13","_r14","loadMore","DeskBookingsComponent","columns","has_more_pages","bookings","rejectAll","rejectAllDesks","nextPage","s","runMethod","checkinDesk","checked_in","fn","DeskBookingsComponent_ng_template_4_Template","DeskBookingsComponent_ng_template_6_Template","DeskBookingsComponent_ng_template_8_Template","DeskBookingsComponent_ng_template_10_Template","DeskBookingsComponent_ng_template_12_Template","DeskBookingsComponent_ng_template_14_Template","DeskBookingsComponent_button_16_Template","_c8","date_template_r15","period_template_r17","user_template_r18","group_template_r16","_c4","_c5","_c6","status_template_r19","_c7","option_template_r20","tmp_10_0","menu_r21","DeskMapViewComponent","_desk","_desks_state","map_url","styles","map_styles","positions","map_positions","actions","map_actions","map_features","setHost","u","host","use_api","opts","setLevel","ExploreDesksService","zoom","center","map_id","ctx_r3","copyToClipboard","DesksManageComponent_ng_template_4_div_3_Template","item_r5","DesksManageComponent_ng_template_6_span_1_Template","data_r6","data_r7","print","row_r9","qr_link","qr_code","_r8","loadQrCode","editDesk","removeDesk","DesksManageComponent_ng_template_10_ng_template_10_Template","qr_menu_r11","_r12","DesksManageComponent","_element","_clipboard","dragging","desks","copy","resp","openConfirmModal","title","content","icon","updated_desks","updateMetadata","description","details","message","kiosk_url","window","location","origin","item","link","encodeURIComponent","generateQRCode","handleDrag","i5","DesksManageComponent_ng_template_4_Template","DesksManageComponent_ng_template_6_Template","DesksManageComponent_ng_template_8_Template","DesksManageComponent_ng_template_10_Template","DesksManageComponent_div_12_Template","DesksManageComponent_div_13_Template","name_template_r13","item_list_template_r14","bool_template_r15","action_template_r16","desk_r1","DeskQrCodeModalComponent","DeskQrCodeModalComponent_a_8_Template","level_r5","NewDesksComponent_mat_form_field_13_mat_option_3_div_2_Template","use_region","NewDesksComponent_mat_form_field_13_mat_option_3_Template","tmp_1_0","level_r7","NewDesksComponent_mat_form_field_14_mat_option_4_div_2_Template","NewDesksComponent_mat_form_field_14_mat_option_4_Template","_r9","viewQRCodes","ROUTES","component","NewDesksComponent","combineLatest","active_building","active_region","region","levelsForRegion","levelsForBuilding","_checkManage","afterClosed","lvls","some","z","unsub","NewDesksComponent_button_10_Template","NewDesksComponent_button_11_Template","NewDesksComponent_mat_form_field_13_Template","NewDesksComponent_mat_form_field_14_Template","NewDesksComponent_ng_container_16_Template","NewDesksComponent_ng_container_17_Template","NewDesksComponent_mat_progress_bar_20_Template","children","redirectTo","DesksModule","$C","G2t","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","SharedBookingsModule","FormFieldsModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component.ts","./apps/concierge/src/app/desks/desk-book-modal.component.ts","./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/desk-qr-code-modal.component.ts","./apps/concierge/src/app/desks/new-desks.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n    BookingFormService,\n    DAYS_OF_WEEK_INDEX,\n    RecurrenceDays,\n} from '@placeos/bookings';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { RecurrenceDetails } from '@placeos/events';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { addDays, endOfDay, getUnixTime, set } from 'date-fns';\n\n@Component({\n    selector: 'new-desk-form-details',\n    styles: [],\n    template: `\n        <!-- <div class=\"m-2 bg-warning p-2 text-center rounded shadow text-sm\">\n            The selected desk hasn't been booked. Please book the desk to be\n            able to check-in.\n        </div> -->\n        <div\n            class=\"p-0 sm:py-4 sm:px-16 divide-y divide-base-200 space-y-2\"\n            *ngIf=\"form\"\n            [formGroup]=\"form\"\n        >\n            <section class=\"flex items-center\" *ngIf=\"allow_groups\">\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-secondary]=\"!(options | async)?.group\"\n                    (click)=\"setOptions({ group: false, members: [] })\"\n                >\n                    <app-icon class=\"text-2xl\">person</app-icon>\n                    <div class=\"\" i18n>Single</div>\n                    <div\n                        class=\"absolute h-1 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-base-200]=\"(options | async)?.group\"\n                        [class.bg-secondary]=\"!(options | async)?.group\"\n                    ></div>\n                </button>\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-secondary]=\"(options | async)?.group\"\n                    (click)=\"setOptions({ group: true })\"\n                >\n                    <app-icon class=\"text-2xl\">group_add</app-icon>\n                    <div class=\"\" i18n>Group</div>\n                    <div\n                        class=\"absolute h-1 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-base-200]=\"!(options | async)?.group\"\n                        [class.bg-secondary]=\"(options | async)?.group\"\n                    ></div>\n                </button>\n            </section>\n            <section class=\"p-2\" [class.!border-none]=\"allow_groups\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        1\n                    </div>\n                    <div class=\"text-xl\" i18n>Details</div>\n                </h3>\n                <div\n                    class=\"w-full\"\n                    *ngIf=\"can_book_for_others && !(options | async)?.group\"\n                >\n                    <label for=\"title\">Host<span>*</span></label>\n                    <a-user-search-field\n                        formControlName=\"user\"\n                        class=\"mb-4\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center flex-wrap sm:space-x-2\">\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"title\">Add Title<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"title\"\n                                formControlName=\"title\"\n                                placeholder=\"e.g. Focus Time\"\n                            />\n                            <mat-error i18n\n                                >Booking title is required.</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 min-w-[256px] relative\">\n                        <label for=\"date\" i18n>Date<span>*</span></label>\n                        <a-date-field\n                            name=\"date\"\n                            formControlName=\"date\"\n                            [to]=\"end_date\"\n                            [timezone]=\"timezone\"\n                            i18n\n                        >\n                            Date and time must be in the future\n                        </a-date-field>\n                        <mat-checkbox\n                            formControlName=\"all_day\"\n                            *ngIf=\"allow_all_day\"\n                            class=\"absolute -top-2 right-0\"\n                            i18n\n                        >\n                            All Day\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"!form.value.all_day\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n>\n                            Start Time<span>*</span>\n                        </label>\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [use_24hr]=\"use_24hr\"\n                            [timezone]=\"timezone\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"end-time\" i18n>\n                            End Time<span>*</span>\n                        </label>\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"10 * 60\"\n                            [min]=\"60\"\n                            [step]=\"60\"\n                            [use_24hr]=\"use_24hr\"\n                            [timezone]=\"timezone\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n                <div *ngIf=\"can_recurr\" class=\"flex flex-col\">\n                    <label for=\"recurrence\">\n                        {{ 'FORM.RECURRENCE' | translate }}<span>*</span>\n                    </label>\n                    <recurrence-field\n                        name=\"recurrence\"\n                        [date]=\"form.getRawValue().date\"\n                        [(ngModel)]=\"recurrence\"\n                        (ngModelChange)=\"onRecurrenceChange($event)\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></recurrence-field>\n                    <mat-checkbox\n                        *ngIf=\"form.value.id\"\n                        formControlName=\"update_master\"\n                    >\n                        Update all future events\n                    </mat-checkbox>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"can_book_lockers\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <mat-checkbox\n                            [ngModel]=\"!!form.value.secondary_resource\"\n                            (ngModelChange)=\"\n                                form.patchValue({\n                                    secondary_resource: $event ? 'locker' : '',\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            i18n\n                        >\n                            Require locker\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"(options | async)?.group\">\n                <h3 class=\"space-x-2 flex items-center\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        2\n                    </div>\n                    <div class=\"text-xl\" i18n>Group Members</div>\n                    <div class=\"flex-1 w-px\"></div>\n                </h3>\n                <div class=\"overflow-hidden\">\n                    <a-user-list-field\n                        class=\"mt-4\"\n                        [ngModel]=\"(options | async)?.members || []\"\n                        (ngModelChange)=\"setOptions({ members: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"form.contains('resources')\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 3 : 2 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Desk</div>\n                </h3>\n                <desk-list-field formControlName=\"resources\"></desk-list-field>\n                <p\n                    *ngIf=\"(options | async)?.group\"\n                    class=\"text-center rounded px-2 py-1 bg-warning shadow text-xs\"\n                >\n                    Desks nearby to the selected desk will booked for group\n                    members\n                </p>\n            </section>\n            <section class=\"p-2\" *ngIf=\"has_assets\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 4 : 3 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Request Asset</div>\n                </h3>\n                <asset-list-field\n                    [options]=\"{\n                        date: form.getRawValue().date,\n                        duration: form.value.duration,\n                        all_day: form.value.all_day,\n                    }\"\n                    formControlName=\"assets\"\n                ></asset-list-field>\n            </section>\n        </div>\n    `,\n})\nexport class NewDeskFormDetailsComponent extends AsyncHandler {\n    @Input() public form: FormGroup;\n    @Output() public find = new EventEmitter<void>();\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    public readonly force_time = set(Date.now(), {\n        hours: 6,\n        minutes: 0,\n    }).valueOf();\n\n    /** Selected desk for booking */\n    public selected_desk: Desk;\n    public from_id = false;\n    public recurrence: RecurrenceDetails;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public readonly setFeature = (f, e) => this._state.setFeature(f, e);\n\n    public get can_book_for_others() {\n        return this._settings.get('app.desks.can_book_for_others');\n    }\n\n    public get can_book_lockers() {\n        return this._settings.get('app.desks.can_book_lockers');\n    }\n\n    public get can_recurr() {\n        return this._settings.get('app.desks.allow_recurrence');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    public get has_assets() {\n        return !!this._settings.get('app.desks.has_assets');\n    }\n\n    public get needs_reason() {\n        return this._settings.get('app.desks.needs_reason') === true;\n    }\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n\n    public get allow_all_day() {\n        return (\n            this.allow_time_changes &&\n            !!this._settings.get('app.desks.allow_all_day')\n        );\n    }\n\n    public get timezone() {\n        return this._settings.get('app.desks.use_building_timezone')\n            ? this._org.building.timezone\n            : '';\n    }\n\n    public get end_date() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.desks.available_period') || 90,\n            ),\n        ).valueOf();\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.form && this.form) {\n            if (this.selected_desk?.id) {\n                this.form.patchValue({ resources: [this.selected_desk] });\n            }\n            this.initialiseRecurrence();\n        }\n    }\n\n    public initialiseRecurrence() {\n        const {\n            recurrence_type,\n            recurrence_days,\n            recurrence_interval,\n            recurrence_end,\n            date,\n        } = this.form.value;\n        if (!this.can_recurr) return;\n        this.recurrence = {\n            pattern: recurrence_type,\n            days_of_week: new Array(7)\n                .fill(0)\n                .map((_, i) => i)\n                .filter((i) => recurrence_days & DAYS_OF_WEEK_INDEX[i]),\n            interval: recurrence_interval,\n            start: date,\n            end: recurrence_end,\n        };\n    }\n\n    public onRecurrenceChange(recurrence: RecurrenceDetails) {\n        if (!recurrence.pattern) {\n            this.form.patchValue({ recurrence_type: 'none' });\n        } else if (recurrence.pattern === 'daily') {\n            this.form.patchValue({\n                recurrence_type: 'daily',\n                recurrence_days:\n                    RecurrenceDays.MONDAY |\n                    RecurrenceDays.TUESDAY |\n                    RecurrenceDays.WEDNESDAY |\n                    RecurrenceDays.THURSDAY |\n                    RecurrenceDays.FRIDAY,\n                recurrence_interval: recurrence.interval,\n                recurrence_end: getUnixTime(recurrence.end),\n            });\n        } else if (recurrence.pattern === 'weekly') {\n            this.form.patchValue({\n                recurrence_type: 'weekly',\n                recurrence_days: recurrence.days_of_week.reduce(\n                    (d, i) => d | DAYS_OF_WEEK_INDEX[i],\n                    0,\n                ),\n                recurrence_interval: recurrence.interval,\n                recurrence_end: getUnixTime(recurrence.end),\n            });\n        } else if (\n            recurrence.pattern === 'monthly' ||\n            recurrence.pattern === 'month_day'\n        ) {\n            const date = new Date(this.form.value.date).getDate();\n            let instance = Math.floor(date / 7) + (date % 7 ? 1 : 0);\n            if ((instance === 4 && date >= 25) || instance === 5) instance = -1;\n            this.form.patchValue({\n                recurrence_type: 'monthly',\n                recurrence_interval: recurrence.interval,\n                recurrence_nth_of_month: instance,\n                recurrence_end: getUnixTime(recurrence.end),\n            });\n        } else {\n            this.form.patchValue({ recurrence_type: 'none' });\n        }\n    }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { BookingFormService } from '@placeos/bookings';\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'desk-book-modal',\n    template: `\n        <header>\n            <h2>New Desk Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!(loading | async); else load_state\"\n            class=\"overflow-auto p-4 max-h-[65vh]\"\n        >\n            <new-desk-form-details [form]=\"form\"></new-desk-form-details>\n        </main>\n        <footer\n            *ngIf=\"!(loading | async)\"\n            class=\"flex justify-center items-center p-2 border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Making booking request...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskBookModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public readonly loading = new BehaviorSubject(false);\n\n    public get form() {\n        return this._booking_form.form;\n    }\n\n    constructor(\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<DeskBookModalComponent>\n    ) {}\n\n    public async save() {\n        this.loading.next(true);\n        this.form.patchValue({ booking_type: 'desk' });\n        const event = await this._booking_form.postForm().catch((_) => {\n            notifyError(_);\n            this.loading.next(false);\n            throw _;\n        });\n        this.event.emit({ reason: 'done', metadata: event });\n        notifySuccess('Successfully created booking');\n        this._dialog_ref.close();\n        this.loading.next(false);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifyInfo,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { BookingRulesModalComponent } from '../ui/booking-rules-modal.component';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"\n                        (filters | async).zones\n                            ? (filters | async).zones[0]\n                            : 'All'\n                    \"\n                    (ngModelChange)=\"updateZones([$event])\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option value=\"All\" *ngIf=\"!is_map\">\n                        All Levels\n                    </mat-option>\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button\n                btn\n                matRipple\n                *ngIf=\"!manage\"\n                class=\"mx-2 w-40\"\n                matTooltip=\"New Desk Booking\"\n                (click)=\"newDeskBooking()\"\n            >\n                New Booking\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"newDesk()\"\n                matTooltip=\"New Desk\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary relative text-white rounded\"\n                matTooltip=\"Upload Desks CSV\"\n            >\n                <app-icon>cloud_upload</app-icon>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"downloadTemplate()\"\n                matTooltip=\"Download Template Desk CSV\"\n            >\n                <app-icon>download</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"manageRestrictions()\"\n                matTooltip=\"Desk Restrictions\"\n            >\n                <app-icon>lock_open</app-icon>\n            </button>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(filters | async)?.search\"\n                (modelChange)=\"setFilters({ search: $event })\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n\n    public manage = false;\n    public is_map = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog,\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id,\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            }),\n        );\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe(() => {\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            }),\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All',\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            }),\n        );\n        this.manage = this._router.url?.includes('manage');\n        this.is_map = this._router.url?.includes('map');\n    }\n\n    public newDesk() {\n        const desk = new Desk({ id: `desk-${randomInt(999_999)}` });\n        desk.staff_name = `[NEW_DESK]`;\n        this._desks.addDesks([desk]);\n        notifyInfo('New desk added to local data.', undefined, () =>\n            notifyInfo('Make sure to save the new desk before using it.'),\n        );\n    }\n\n    public newDeskBooking() {\n        this._dialog.open(DeskBookModalComponent, {});\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(BookingRulesModalComponent, {\n            data: { type: 'desk' },\n        });\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._desks.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        }),\n                ),\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    public downloadTemplate() {\n        const desk: any = new Desk({\n            id: 'desk-123',\n            name: 'Test Desk',\n            bookable: true,\n            groups: ['test-desk-group', 'desk-bookers'],\n            features: ['Standing Desk', 'Dual Monitor'],\n        }).toJSON();\n        delete desk.images;\n        const data = jsonToCsv([desk]);\n        downloadFile('desk-template.csv', data);\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main\n            class=\"flex-1 relative w-1/2 flex flex-col bg-base-100 overflow-hidden\"\n        >\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Desks\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends AsyncHandler implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\nimport { map } from 'rxjs/operators';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <div class=\"overflow-auto h-full w-full pb-4\">\n            <simple-table\n                class=\"min-w-[72rem] block text-sm\"\n                [data]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    {\n                        key: 'date',\n                        name: 'Date',\n                        content: date_template,\n                        size: '4rem',\n                        sortable: false\n                    },\n                    {\n                        key: 'period',\n                        name: 'Period',\n                        content: period_template,\n                        size: '9rem'\n                    },\n                    {\n                        key: 'user_name',\n                        name: 'Person',\n                        content: user_template\n                    },\n                    { key: 'group', name: 'Group', content: group_template },\n                    { key: 'asset_name', name: 'Desk' },\n                    { key: 'approver', name: 'Approver' },\n                    {\n                        key: 'status',\n                        name: 'Status',\n                        content: status_template,\n                        size: '8.5rem',\n                        sortable: false\n                    },\n                    {\n                        key: 'checked_in',\n                        name: 'Checked In',\n                        content: option_template,\n                        size: '7rem',\n                        sortable: false\n                    }\n                ]\"\n                [empty_message]=\"\n                    (filters | async)?.search\n                        ? 'No matching desk bookings'\n                        : 'There are no desk booking for the currently selected date.'\n                \"\n                [sortable]=\"true\"\n            ></simple-table>\n            <ng-template #date_template let-date=\"data\">\n                <div\n                    class=\"flex flex-col items-center justify-center w-full py-2\"\n                >\n                    <div class=\"opacity-60\">{{ date | date: 'MMM' }}</div>\n                    <div class=\"text-xl\">{{ date | date: 'dd' }}</div>\n                </div>\n            </ng-template>\n            <ng-template #group_template let-row=\"row\">\n                <div class=\"p-4 text-[0.625rem] font-mono\">\n                    {{ row.group || row.extension_data?.group }}\n                    <span\n                        class=\"opacity-30\"\n                        *ngIf=\"!(row.group || row.extension_data?.group)\"\n                    >\n                        No Group\n                    </span>\n                </div>\n            </ng-template>\n            <ng-template #period_template let-row=\"row\">\n                <div class=\"p-2\">\n                    <ng-container\n                        *ngIf=\"\n                            row.status !== 'declined' &&\n                            !row.deleted &&\n                            row.status !== 'ended'\n                        \"\n                    >\n                        <div class=\"p-2\">\n                            <ng-container *ngIf=\"!row.all_day\">\n                                {{ row.date | date: time_format }} &ndash;\n                                {{ row.date_end | date: time_format }}\n                            </ng-container>\n                            <ng-container *ngIf=\"row.all_day\"\n                                >All Day</ng-container\n                            >\n                        </div>\n                    </ng-container>\n                    <ng-container\n                        *ngIf=\"\n                            row.status === 'declined' ||\n                            row.deleted ||\n                            row.status === 'ended'\n                        \"\n                    >\n                        <div\n                            class=\"text-xs py-2 px-4 bg-error rounded-3xl text-white\"\n                        >\n                            {{\n                                row.status === 'ended'\n                                    ? 'Manually Ended'\n                                    : 'Expired'\n                            }}\n                        </div>\n                    </ng-container>\n                </div>\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                <div class=\"flex flex-col justify-center px-4 py-2\">\n                    <div class=\"select-all\">\n                        {{\n                            row.user_name ||\n                                row.user_email ||\n                                row.booked_by_name ||\n                                row.booked_by_email\n                        }}\n                    </div>\n                    <div\n                        *ngIf=\"row.user_name\"\n                        class=\"text-xs opacity-30 select-all\"\n                    >\n                        {{ row.user_email }}\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template #status_template let-row=\"row\">\n                <div class=\"px-2\">\n                    <button\n                        matRipple\n                        class=\"rounded-3xl bg-warning text-warning-content border-none w-[7.5rem] h-10\"\n                        [class.!text-success-content]=\"\n                            row?.status === 'approved'\n                        \"\n                        [class.!bg-success]=\"row?.status === 'approved'\"\n                        [class.!text-error-content]=\"row?.status === 'declined'\"\n                        [class.!bg-error]=\"row?.status === 'declined'\"\n                        [class.!text-neutral-content]=\"row?.status === 'ended'\"\n                        [class.!bg-neutral]=\"row?.status === 'ended'\"\n                        [class.opacity-30]=\"row?.status === 'ended'\"\n                        [matMenuTriggerFor]=\"menu\"\n                        [disabled]=\"row?.status === 'ended'\"\n                    >\n                        <div class=\"flex items-center pl-4 pr-2 space-x-2\">\n                            <div class=\"flex-1 text-left\">\n                                {{\n                                    row?.status === 'ended'\n                                        ? 'Ended'\n                                        : row?.status === 'approved'\n                                        ? 'Approved'\n                                        : row?.status === 'declined'\n                                        ? 'Declined'\n                                        : 'Pending'\n                                }}\n                            </div>\n                            <app-icon class=\"text-2xl\"\n                                >arrow_drop_down</app-icon\n                            >\n                        </div>\n                    </button>\n                </div>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"approve(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\"\n                                >event_available</app-icon\n                            >\n                            <div class=\"pr-2\">Approve Desk</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"reject(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">event_busy</app-icon>\n                            <div class=\"pr-2\">Decline Desk</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n            <ng-template #option_template let-data=\"data\" let-row=\"row\">\n                <div class=\"px-2\">\n                    <button\n                        matRipple\n                        class=\"rounded-3xl bg-warning text-warning-content border-none w-[4.5rem] h-10\"\n                        [matMenuTriggerFor]=\"checkinMenu\"\n                        [class.!bg-neutral]=\"!data\"\n                        [class.!text-neutral-content]=\"!data\"\n                        [class.!bg-success]=\"data\"\n                        [class.!text-success-content]=\"data\"\n                        [class.opacity-30]=\"row.status === 'ended'\"\n                        [disabled]=\"row.status === 'ended'\"\n                        [matTooltip]=\"\n                            row.status === 'ended'\n                                ? 'Desk booking has ended'\n                                : 'Check-in or check-out desk'\n                        \"\n                    >\n                        <div class=\"flex items-center pl-4 pr-2 space-x-2\">\n                            <div class=\"flex-1 text-left\">\n                                {{ data ? 'Yes' : 'No' }}\n                            </div>\n                            <app-icon class=\"text-2xl\">\n                                arrow_drop_down\n                            </app-icon>\n                        </div>\n                    </button>\n                </div>\n                <mat-menu #checkinMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"checkin(row, true)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">check</app-icon>\n                            <div>Check-in</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"checkin(row, false)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">cancel</app-icon>\n                            <div>Check-out</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n        </div>\n\n        <button\n            btn\n            matRipple\n            class=\"absolute bottom-2 left-2 w-32 mx-auto my-4\"\n            *ngIf=\"!loading && (has_more_pages | async)\"\n            (click)=\"loadMore()\"\n        >\n            Load More\n        </button>\n        <button\n            icon\n            matRipple\n            class=\"absolute bottom-2 right-2 bg-base-100 shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly has_more_pages = this._state.has_more_pages;\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n    public readonly loadMore = () => this._state.nextPage();\n\n    public get columns() {\n        return [\n            'date',\n            'period',\n            'user_name',\n            'group',\n            'asset_name',\n            'approver_name',\n            'status',\n            'checked_in',\n        ];\n    }\n\n    public readonly checkin = (d, s?) =>\n        this.runMethod('checkin', async () => {\n            await this._state.checkinDesk(d, s);\n            d.checked_in = s ?? true;\n        });\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _settings: SettingsService\n    ) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <interactive-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></interactive-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-2 right-2\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    class=\"white\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-base-100 shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends AsyncHandler implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._desks_state.setOptions({ use_api: true });\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                const level = this._org.levelWithID(opts.zones);\n                if (level) this._state.setLevel(level.id);\n                this._desks_state.setOptions({\n                    date: opts.date || Date.now(),\n                    all_day: true,\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component, ElementRef } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    SettingsService,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\nconst QR_CODES = {};\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <div\n            class=\"overflow-auto h-full w-full pb-4\"\n            (dragenter)=\"handleDrag('enter', $event)\"\n            (window:dragend)=\"handleDrag('end', $event)\"\n        >\n            <simple-table\n                class=\"min-w-[72rem] w-full block text-sm\"\n                [filter]=\"(filters | async)?.search\"\n                [data]=\"desks\"\n                [columns]=\"[\n                    {\n                        key: 'id',\n                        name: 'Desk ID',\n                        content: name_template,\n                        size: '10rem',\n                    },\n                    { key: 'name', name: 'Desk Name' },\n                    {\n                        key: 'groups',\n                        name: 'Groups',\n                        content: item_list_template,\n                    },\n                    {\n                        key: 'features',\n                        name: 'Features',\n                        content: item_list_template,\n                    },\n                    {\n                        key: 'bookable',\n                        name: 'Bookable',\n                        content: bool_template,\n                        size: '5.5rem',\n                    },\n                    {\n                        key: 'actions',\n                        name: ' ',\n                        content: action_template,\n                        size: '8.5rem',\n                        sortable: false,\n                    },\n                ]\"\n                [sortable]=\"true\"\n                [empty_message]=\"\n                    (filters | async)?.search\n                        ? 'No matching desks'\n                        : 'No desks for selected level'\n                \"\n            ></simple-table>\n            <ng-template #name_template let-row=\"row\">\n                <button\n                    class=\"flex flex-col px-4 py-2 text-left leading-tight\"\n                    (click)=\"copyToClipboard(row.map_id || row.id)\"\n                >\n                    <div>{{ row.id || row.map_id }}</div>\n                    <div\n                        *ngIf=\"row.id && row.map_id !== row.id\"\n                        class=\"text-[0.625rem] opacity-30 font-mono\"\n                    >\n                        {{ row.map_id }}\n                    </div>\n                </button>\n            </ng-template>\n            <ng-template #item_list_template let-data=\"data\">\n                <div class=\"flex flex-wrap p-2\">\n                    <span\n                        class=\"m-1 py-1 px-2 rounded-2xl text-xs font-mono bg-info text-info-content\"\n                        *ngFor=\"let item of data\"\n                    >\n                        {{ item }}\n                    </span>\n                </div>\n            </ng-template>\n            <ng-template #bool_template let-data=\"data\">\n                <div\n                    [class.bg-error]=\"!data\"\n                    [class.bg-success]=\"data\"\n                    class=\"rounded h-8 w-8 flex items-center justify-center text-2xl text-white mx-auto\"\n                >\n                    <app-icon>{{ data ? 'done' : 'close' }}</app-icon>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2 p-2\">\n                    <button\n                        icon\n                        matRipple\n                        customTooltip\n                        [content]=\"qr_menu\"\n                        matTooltip=\"Print QR Code\"\n                        (click)=\"loadQrCode(row)\"\n                    >\n                        <app-icon>qr_code</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        matTooltip=\"Edit Desk\"\n                        (click)=\"editDesk(row)\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        matTooltip=\"Remove Desk\"\n                        (click)=\"removeDesk(row)\"\n                    >\n                        <app-icon class=\"text-error\">delete</app-icon>\n                    </button>\n                    <ng-template #qr_menu>\n                        <div class=\"bg-base-100 py-2 shadow rounded\">\n                            <div class=\"\" printable>\n                                <a\n                                    [href]=\"row.qr_link | safe: 'url'\"\n                                    target=\"_blank\"\n                                    ref=\"noopener noreferrer\"\n                                    class=\"block p-2 mx-4 my-2 rounded-lg border border-base-200 bg-base-100\"\n                                >\n                                    <img class=\"w-48\" [src]=\"row.qr_code\" />\n                                </a>\n                                <div\n                                    class=\"w-[calc(100%-2rem)] text-center mt-2 font-mono text-sm bg-base-200 rounded p-2 mx-4\"\n                                >\n                                    {{ row.name || row.id }}\n                                </div>\n                            </div>\n                            <button\n                                btn\n                                matRipple\n                                class=\"w-[calc(100%-2rem)] mx-4 my-2\"\n                                (click)=\"print()\"\n                            >\n                                Print QR Code\n                            </button>\n                        </div>\n                    </ng-template>\n                </div>\n            </ng-template>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-base-100 bg-opacity-60\"\n                *ngIf=\"loading\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n            <div\n                *ngIf=\"dragging\"\n                class=\"absolute inset-0 bg-neutral flex items-center justify-center\"\n            >\n                <div class=\"bg-base-100 p-4 rounded shadow\">\n                    <div\n                        class=\"border-4 border-base-200 border-dashed rounded flex flex-col items-center justify-center w-64 h-64\"\n                    >\n                        Drop CSV file to add desks\n                    </div>\n                </div>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent extends AsyncHandler {\n    public loading: string;\n    public dragging = false;\n    public readonly filters = this._state.filters;\n    public readonly desks = this._state.desks;\n\n    public readonly editDesk = (desk?: Desk) => this._state.editDesk(desk);\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService,\n        private _element: ElementRef,\n        private _clipboard: Clipboard,\n    ) {\n        super();\n    }\n\n    public readonly copyToClipboard = (id: string) => {\n        const success = this._clipboard.copy(id);\n        if (success) notifySuccess('Desk ID copied to clipboard.');\n    };\n\n    public async removeDesk(desk: Desk) {\n        const resp = await openConfirmModal(\n            {\n                title: 'Remove desk',\n                content: `Remove desk ${desk.name}?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog,\n        );\n        if (resp.reason !== 'done') return;\n        resp.close();\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.filter((_) => _.id !== desk.id);\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        this.loading = 'Removing desk...';\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.setFilters({});\n        this.loading = '';\n    }\n\n    public get kiosk_url() {\n        const path =\n            this._settings.get('app.workplace_url_path') || '/workplace';\n        return `${window.location.origin}${path}`;\n    }\n\n    public loadQrCode(item: any) {\n        const link = `${\n            this.kiosk_url\n        }/#/book/code?asset_id=${encodeURIComponent(item.id)}`;\n        item.qr_link = link;\n        item.qr_code = generateQRCode(link);\n    }\n\n    public print() {\n        window.print();\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        this.loading = 'Loading CSV file...';\n        this.dragging = false;\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        }),\n                ),\n            );\n        } catch (e) {\n            console.error(e);\n        }\n        this.loading = '';\n    }\n\n    public handleDrag(type: 'enter' | 'leave' | 'end', event: DragEvent) {\n        this.dragging = type === 'enter';\n    }\n}\n","import { Component } from '@angular/core';\nimport { DesksStateService } from './desks-state.service';\nimport { SettingsService } from '@placeos/common';\n\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { map } from 'rxjs/operators';\n\n@Component({\n    selector: 'desk-qr-code-modal',\n    template: `\n        <div class=\"relative w-screen min-h-screen bg-base-100 rounded-none\">\n            <div\n                class=\"sticky top-0 flex items-center justify-between print:hidden p-4 w-full\"\n            >\n                <button btn matRipple (click)=\"print()\">Print QR Codes</button>\n                <button icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </div>\n            <div\n                class=\"flex flex-wrap overflow-auto print:h-auto h-[calc(100vh-5rem)]\"\n            >\n                <a\n                    [href]=\"desk.qr_link | safe: 'url'\"\n                    target=\"_blank\"\n                    ref=\"noopener noreferrer\"\n                    *ngFor=\"let desk of desks | async\"\n                    class=\"flex flex-col items-center justify-center w-[28%] landscape:w-[21%] print:landscape:h-[33.33vh] print:h-[25vh] mx-auto\"\n                >\n                    <div\n                        class=\"block p-2 mx-4 my-2 rounded-lg border border-base-200 bg-base-100\"\n                    >\n                        <img class=\"w-48\" [src]=\"desk.qr_code\" />\n                    </div>\n                    <div\n                        class=\"w-[calc(100%-2rem)] text-center my-1 font-mono text-sm bg-base-200 rounded p-1 mx-4\"\n                    >\n                        {{ desk.name || desk.id }}\n                    </div>\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DeskQrCodeModalComponent {\n    public readonly desks = this._state.desks.pipe(\n        map((list) =>\n            list.map((_) => {\n                this.loadQrCode(_);\n                return _;\n            }),\n        ),\n    );\n\n    public get kiosk_url() {\n        const path =\n            this._settings.get('app.workplace_url_path') || '/workplace';\n        return `${window.location.origin}${path}`;\n    }\n\n    constructor(\n        private _settings: SettingsService,\n        private _state: DesksStateService,\n    ) {}\n\n    public loadQrCode(item: any) {\n        const link = `${\n            this.kiosk_url\n        }/#/book/code?asset_id=${encodeURIComponent(item.id)}`;\n        item.qr_link = link;\n        item.qr_code = generateQRCode(link);\n        return item.qr_code;\n    }\n\n    public print() {\n        window.print();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport {\n    AsyncHandler,\n    SettingsService,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifyInfo,\n    randomInt,\n} from '@placeos/common';\n\nimport { DesksStateService } from './desks-state.service';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { BookingRulesModalComponent } from '../ui/booking-rules-modal.component';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DeskQrCodeModalComponent } from './desk-qr-code-modal.component';\n\n@Component({\n    selector: '[app-new-desks]',\n    template: `\n        <app-topbar class=\" print:hidden\"></app-topbar>\n        <div class=\"flex flex-1 h-px print:hidden\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center w-full py-4 px-8 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">\n                        {{ manage ? 'Desk Management' : 'Desk Bookings' }}\n                    </h2>\n                    <div class=\"flex-1 w-px\"></div>\n                    <searchbar\n                        class=\"mr-2\"\n                        [model]=\"(filters | async)?.search\"\n                        (modelChange)=\"setFilters({ search: $event })\"\n                    ></searchbar>\n                    <button\n                        btn\n                        matRipple\n                        *ngIf=\"path !== 'manage'\"\n                        class=\"space-x-2 w-44\"\n                        (click)=\"newDeskBooking()\"\n                    >\n                        <div class=\"pl-2\">New Booking</div>\n                        <app-icon class=\"text-2xl\">add</app-icon>\n                    </button>\n                    <button\n                        btn\n                        matRipple\n                        *ngIf=\"path === 'manage'\"\n                        class=\"space-x-2 w-44\"\n                        (click)=\"editDesk()\"\n                    >\n                        <div class=\"pl-2\">New Desk</div>\n                        <app-icon class=\"text-2xl\">add</app-icon>\n                    </button>\n                </div>\n                <div class=\"w-full flex items-center px-8 space-x-2 mb-4\">\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"no-subscript w-60\"\n                        *ngIf=\"!manage\"\n                    >\n                        <mat-select\n                            [ngModel]=\"(filters | async)?.zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                            multiple\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                <div class=\"flex flex-col-reverse\">\n                                    <div\n                                        class=\"text-xs opacity-30\"\n                                        *ngIf=\"use_region\"\n                                    >\n                                        {{\n                                            (level.parent_id | building)\n                                                ?.display_name\n                                        }}\n                                        <span class=\"opacity-0\"> - </span>\n                                    </div>\n                                    <div>\n                                        {{ level.display_name || level.name }}\n                                    </div>\n                                </div>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <mat-form-field\n                        appearance=\"outline\"\n                        class=\"no-subscript w-60\"\n                        *ngIf=\"manage\"\n                    >\n                        <mat-select\n                            [ngModel]=\"\n                                (filters | async)?.zones?.length\n                                    ? (filters | async)?.zones[0]\n                                    : ''\n                            \"\n                            (ngModelChange)=\"updateZones([$event])\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                <div class=\"flex flex-col-reverse\">\n                                    <div\n                                        class=\"text-xs opacity-30\"\n                                        *ngIf=\"use_region\"\n                                    >\n                                        {{\n                                            (level.parent_id | building)\n                                                ?.display_name\n                                        }}\n                                        <span class=\"opacity-0\"> - </span>\n                                    </div>\n                                    <div>\n                                        {{ level.display_name || level.name }}\n                                    </div>\n                                </div>\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"flex-1 w-px\"></div>\n                    <ng-container *ngIf=\"path === 'events'\">\n                        <date-options\n                            (dateChange)=\"setDate($event)\"\n                        ></date-options>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            matTooltip=\"Refresh List\"\n                            class=\"ml-2 rounded border border-base-200\"\n                            (click)=\"refresh()\"\n                            [disabled]=\"loading | async\"\n                        >\n                            <app-icon>refresh</app-icon>\n                        </button>\n                    </ng-container>\n                    <ng-container *ngIf=\"path === 'manage'\">\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-secondary text-secondary-content rounded h-12 w-12\"\n                            matTooltip=\"View Desk QR Codes\"\n                            (click)=\"viewQRCodes()\"\n                        >\n                            <app-icon>qr_code</app-icon>\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-secondary text-secondary-content rounded h-12 w-12\"\n                            matTooltip=\"Upload Desks CSV\"\n                        >\n                            <app-icon>cloud_upload</app-icon>\n                            <input\n                                type=\"file\"\n                                class=\"absolute inset-0 opacity-0\"\n                                (change)=\"loadCSVData($event)\"\n                            />\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-secondary text-secondary-content rounded h-12 w-12\"\n                            (click)=\"downloadTemplate()\"\n                            matTooltip=\"Download Template Desk CSV\"\n                        >\n                            <app-icon>download</app-icon>\n                        </button>\n                        <button\n                            icon\n                            matRipple\n                            class=\"bg-secondary text-secondary-content rounded h-12 w-12\"\n                            (click)=\"manageRestrictions()\"\n                            matTooltip=\"Desk Restrictions\"\n                        >\n                            <app-icon>lock_open</app-icon>\n                        </button>\n                    </ng-container>\n                </div>\n                <div class=\"flex-1 h-1/2 px-8 w-full relative overflow-auto\">\n                    <router-outlet></router-outlet>\n                </div>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"(loading | async) && path === 'events'\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewDesksComponent\n    extends AsyncHandler\n    implements OnInit, OnDestroy\n{\n    public readonly loading = this._state.loading;\n    public path: string;\n    public manage = false;\n    /** List of levels for the active building */\n    public readonly filters = this._state.filters;\n    /** List of levels for the active building */\n    public readonly levels = combineLatest([\n        this._org.active_building,\n        this._org.active_region,\n    ]).pipe(\n        map(([bld, region]) =>\n            this._settings.get('app.use_region')\n                ? this._org.levelsForRegion(region)\n                : this._org.levelsForBuilding(bld),\n        ),\n    );\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    public readonly setFilters = (o) => this._state.setFilters(o);\n    public readonly refresh = () => this._state.refresh();\n    public readonly editDesk = () => this._state.editDesk();\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n    };\n\n    public get use_region() {\n        return !!this._settings.get('app.use_region');\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                    this._checkManage();\n                }\n            }),\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (!zones.length) return;\n                    const level = this._org.levelWithID(zones);\n                    this._state.setFilters({ zones });\n                    if (!level) return;\n                    this._org.building = this._org.buildings.find(\n                        (bld) => bld.id === level.parent_id,\n                    );\n                }\n            }),\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n        this._checkManage();\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n\n    public viewQRCodes() {\n        this._dialog.open(DeskQrCodeModalComponent);\n    }\n\n    public newDeskBooking() {\n        const ref = this._dialog.open(DeskBookModalComponent, {});\n        ref.afterClosed().subscribe((_) => {\n            this._state.refresh();\n        });\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(BookingRulesModalComponent, {\n            data: { type: 'desk' },\n        });\n    }\n\n    public downloadTemplate() {\n        const desk: any = new Desk({\n            id: 'desk-123',\n            name: 'Test Desk',\n            bookable: true,\n            groups: ['test-desk-group', 'desk-bookers'],\n            features: ['Standing Desk', 'Dual Monitor'],\n        }).toJSON();\n        delete desk.images;\n        const data = jsonToCsv([desk]);\n        downloadFile('desk-template.csv', data);\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        }),\n                ),\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    private _checkManage() {\n        this.manage = this.path.includes('manage');\n        if (this.manage) {\n            this.subscription(\n                'zone-changes',\n                this._org.active_levels.subscribe(async (lvls) => {\n                    if (!lvls.length) return;\n                    const { zones } = await this._state.filters\n                        .pipe(take(1))\n                        .toPromise();\n                    const levels_in_zones =\n                        zones?.length &&\n                        zones.some((z) => lvls.find((lvl) => lvl.id === z));\n                    if (!levels_in_zones) this.updateZones([lvls[0].id]);\n                }),\n            );\n        } else this.unsub('zone-changes');\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { NewDeskFormDetailsComponent } from 'apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { NewDesksComponent } from './new-desks.component';\nimport { DeskModalComponent } from './desk-modal.component';\nimport { DeskQrCodeModalComponent } from './desk-qr-code-modal.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: 'new',\n        component: NewDesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [\n        NewDesksComponent,\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n        NewDeskFormDetailsComponent,\n        DeskBookModalComponent,\n        DeskModalComponent,\n        DeskQrCodeModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"x_google_ignoreList":[]}