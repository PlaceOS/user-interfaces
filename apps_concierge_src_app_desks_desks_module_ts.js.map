{"version":3,"file":"apps_concierge_src_app_desks_desks_module_ts.js","mappings":"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","names":["i0","DesksTopbarComponent","BaseClass","constructor","_desks","_org","_route","_router","super","this","active_levels","filters","date","setFilters","o","zones","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","ngOnInit","_this","initialised","pipe","first","_","toPromise","subscription","queryParamMap","subscribe","params","has","get","split","length","updateZones","level","levelWithID","building","buildings","find","bld","id","parent_id","setDate","Date","approve","reject","manage","url","includes","is_map","levels","take","filter","zone","lvl","push","newDesk","addDesks","Desk","randomInt","notifySuccess","loadCSVData","event","data","loadTextFileFromInputEvent","catch","m","e","notifyError","list","csvToJson","_this2","map","console","error","booking","showBooking","_this3","approveDesk","_this4","rejectDesk","core","selectors","ctx","DesksComponent","_state","loading","startPolling","events","NavigationEnd","url_parts","path","parts","ngOnDestroy","stopPolling","DeskBookingsComponent","bookings","rejectAllDesks","d","runMethod","checkinDesk","name","fn","i","DeskMapViewComponent","_desk","_desks_state","map_url","map_styles","map_positions","map_actions","map_features","u","setOptions","host","opts","setLevel","ExploreDesksService","$event","DesksManageComponent","_dialog","combineLatest","desks","new_desks","n","concat","changed","Object","keys","changes","new_desk_count","setRowValue","key","value","removeDesk","desk","resp","openConfirmModal","title","content","icon","reason","close","updated_desks","updateMetadata","description","details","message","save","unique","toJSON","status","clearNewDesks","loadQrCode","item","qr_code","generateQRCode","location","origin","encodeURIComponent","dragging","handleDrag","type","ROUTES","component","children","redirectTo","DesksModule","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    BaseClass,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"\n                        (filters | async).zones\n                            ? (filters | async).zones[0]\n                            : 'All'\n                    \"\n                    (ngModelChange)=\"updateZones([$event])\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option value=\"All\" *ngIf=\"!is_map\"\n                        >All Levels</mat-option\n                    >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button\n                mat-button\n                *ngIf=\"manage\"\n                class=\"mx-2 w-32\"\n                (click)=\"newDesk()\"\n            >\n                New Desk\n            </button>\n            <button mat-button *ngIf=\"manage\" class=\"relative w-32\">\n                Upload CSV\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </button>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(filters | async)?.search\"\n                (modelChange)=\"setFilters({ search: $event })\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends BaseClass implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n\n    public manage = false;\n    public is_map = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        this.manage = this._router.url?.includes('manage');\n        this.is_map = this._router.url?.includes('map');\n    }\n\n    public newDesk() {\n        this._desks.addDesks([new Desk({ id: `desk-${randomInt(999_999)}` })]);\n        notifySuccess(\n            'New desk added to local data. Make sure to save the desk before using it.'\n        );\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._desks.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative w-full flex flex-col bg-gray-200 dark:bg-neutral-600\">\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Desks\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends BaseClass implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <div class=\"overflow-auto h-full w-full\">\n            <custom-table\n                class=\"min-w-[76rem]\"\n                [dataSource]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'user_name',\n                    'group',\n                    'desk_name',\n                    'date',\n                    'status',\n                    'approver_name',\n                    'checked_in',\n                    'access',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Person',\n                    'Group',\n                    'Desk',\n                    'Date',\n                    'Status',\n                    'Approver',\n                    'Checked In',\n                    'Access',\n                    ' '\n                ]\"\n                [column_size]=\"['flex', '', '', '12r', '', '10r', '', '', '12r']\"\n                [template]=\"{\n                    user_name: user_template,\n                    desk_name: desk_template,\n                    date: date_template,\n                    status: status_template,\n                    checked_in: bool_template,\n                    access: bool_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desk bookings'\n                        : 'There are no desk booking for the currently selected date.'\n                \"\n            ></custom-table>\n            <ng-template #date_template let-data=\"data\">\n                {{ data | date }} at {{ data | date: 'shortTime' }}\n            </ng-template>\n            <ng-template #desk_template let-row=\"row\">\n                {{ row.asset_name || row.asset_id }}\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                {{\n                    row.user_name ||\n                        row.user_email ||\n                        row.booked_by_name ||\n                        row.booked_by_email\n                }}\n            </ng-template>\n            <ng-template #status_template let-data=\"data\">\n                <span\n                    class=\"capitalize text-white px-2 py-1 rounded border border-gray-200\"\n                    [class.bg-success]=\"data === 'approved'\"\n                    [class.bg-pending]=\"data === 'tentative'\"\n                    [class.bg-error]=\"\n                        data === 'cancelled' || data === 'declined'\n                    \"\n                >\n                    {{ data }}\n                </span>\n            </ng-template>\n            <ng-template #bool_template let-data=\"data\">\n                {{ data ? 'Yes' : 'No' }}\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <action-icon (click)=\"checkin(row)\">how_to_reg</action-icon>\n                    <button\n                        mat-icon-button\n                        (click)=\"approve(row)\"\n                        matTooltip=\"Approve Desk\"\n                    >\n                        <app-icon>event_available</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        (click)=\"reject(row)\"\n                        matTooltip=\"Reject Desk\"\n                    >\n                        <app-icon>event_busy</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        [disabled]=\"!row.extension_data?.checkin_qr_code\"\n                        [matMenuTriggerFor]=\"menu\"\n                        matTooltip=\"View Desk QR code\"\n                    >\n                        <app-icon *ngIf=\"row.extension_data?.checkin_qr_code\">\n                            qr_code\n                        </app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img\n                                class=\"w-48\"\n                                [src]=\"row.extension_data?.checkin_qr_code\"\n                            />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button mat-button class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n        </div>\n        <button\n            mat-icon-button\n            class=\"absolute bottom-2 right-2 bg-white shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n\n    public readonly checkin = (d) =>\n        this.runMethod('checkin', async () => this._state.checkinDesk(d));\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-2 right-2\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white dark:bg-neutral-700 shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription('desk_polling', this._desks_state.startPolling());\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                const level = this._org.levelWithID(opts.zones);\n                if (level) this._state.setLevel(level.id);\n                this._desks_state.setOptions({\n                    date: opts.date ? new Date(opts.date) : new Date(),\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatLegacyDialog as MatDialog } from '@angular/material/legacy-dialog';\nimport {\n    BaseClass,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n    unique,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\nconst QR_CODES = {};\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <div\n            class=\"w-full h-full overflow-auto relative\"\n            (dragenter)=\"handleDrag('enter', $event)\"\n            (window:dragend)=\"handleDrag('end', $event)\"\n        >\n            <custom-table\n                class=\"min-w-[72rem] block\"\n                [dataSource]=\"desks\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'map_id',\n                    'bookable',\n                    'name',\n                    'groups',\n                    'features',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'ID',\n                    'Bookable',\n                    'Name',\n                    'Groups',\n                    'Features',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '6r', '12r', 'flex', '16r', '10r']\"\n                [template]=\"{\n                    map_id: text_edit_template,\n                    name: text_edit_template,\n                    bookable: bookable_edit_template,\n                    groups: list_edit_template,\n                    features: list_edit_template,\n                    actions: action_template\n                }\"\n                [pagination]=\"true\"\n                [page_size]=\"30\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desks'\n                        : 'No desks for selected level'\n                \"\n            ></custom-table>\n            <ng-template\n                #list_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <item-list-field\n                    class=\"w-full\"\n                    hide-outline\n                    [placeholder]=\"\n                        key === 'groups' ? 'User Groups' : 'Features'\n                    \"\n                    [name]=\"key\"\n                    [ngModel]=\"\n                        (changes[row.id] ? changes[row.id][key] : null) || data\n                    \"\n                    (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                >\n                </item-list-field>\n            </ng-template>\n            <ng-template\n                #text_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <div class=\"w-full h-12\" hide-outline>\n                    <mat-form-field class=\"h-12 w-full\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [placeholder]=\"key\"\n                            [name]=\"key\"\n                            [ngModel]=\"\n                                (changes[row.id]\n                                    ? changes[row.id][key]\n                                    : null) || data\n                            \"\n                            (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                        />\n                    </mat-form-field>\n                </div>\n            </ng-template>\n            <ng-template #bookable_edit_template let-data=\"data\" let-row=\"row\">\n                <div class=\"flex items-center justify-center pl-4\">\n                    <mat-checkbox\n                        [ngModel]=\"changes[row.id]?.bookable ?? data\"\n                        (ngModelChange)=\"\n                            setRowValue(row.id, 'bookable', $event)\n                        \"\n                    ></mat-checkbox>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <div\n                        class=\"p-2 text-2xl text-pending\"\n                        [class.opacity-0]=\"!changes[row.id]\"\n                        matTooltip=\"Desk has unsaved changes\"\n                    >\n                        <app-icon>warning</app-icon>\n                    </div>\n                    <button mat-icon-button (click)=\"removeDesk(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        [matMenuTriggerFor]=\"menu\"\n                        (click)=\"loadQrCode(row)\"\n                    >\n                        <app-icon>qr_code</app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img class=\"w-48\" [src]=\"row.qr_code\" />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button mat-button class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n            <div\n                class=\"fixed bottom-2 left-1/2 transform -translate-x-1/2 p-4 rounded bg-white shadow\"\n                *ngIf=\"changed > 0\"\n            >\n                <p class=\"mb-2 text-xl\">\n                    {{ changed }} Desk(s) with unsaved changes\n                </p>\n                <div class=\"flex items-center justify-center\">\n                    <button save mat-button (click)=\"save()\">\n                        Save Changes\n                    </button>\n                </div>\n            </div>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-white bg-opacity-60\"\n                *ngIf=\"loading\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n            <div\n                *ngIf=\"dragging\"\n                class=\"absolute inset-0 bg-black/60 flex items-center justify-center\"\n            >\n                <div class=\"bg-white p-4 rounded shadow\">\n                    <div\n                        class=\"border-4 border-gray-300 border-dashed rounded flex flex-col items-center justify-center w-64 h-64\"\n                    >\n                        Drop CSV file to add desks\n                    </div>\n                </div>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent extends BaseClass {\n    public changes = {};\n    public loading: string;\n    public dragging = false;\n    public readonly filters = this._state.filters;\n    public readonly desks = combineLatest([\n        this._state.desks,\n        this._state.new_desks,\n    ]).pipe(map(([d, n]) => d.concat(n)));\n\n    public get changed() {\n        return (\n            (Object.keys(this.changes).length || 0) +\n            (this._state.new_desk_count || 0)\n        );\n    }\n\n    public setRowValue(id: string, key: string, value: any) {\n        if (!this.changes[id]) this.changes[id] = {};\n        this.changes[id][key] = value;\n    }\n\n    public async removeDesk(desk: Desk) {\n        const resp = await openConfirmModal(\n            {\n                title: 'Remove desk',\n                content: `Remove desk ${desk.name}?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.close();\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.filter((_) => _.id !== desk.id);\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        this.loading = 'Removing desk...';\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = unique(\n            desks.map((_) =>\n                new Desk({ ..._, ...(this.changes[_.id] || {}) }).toJSON()\n            ),\n            'id'\n        );\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                const msg =\n                    e?.status === 403\n                        ? 'You do not have the required permissions to save desk changes.'\n                        : e.message || e;\n                notifyError(`Error saving desk data. Error: ${msg}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.clearNewDesks();\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public loadQrCode(item: any) {\n        item.qr_code = generateQRCode(\n            `${\n                location.origin\n            }/workplace/#/book/code?asset_id=${encodeURIComponent(item.id)}`\n        );\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        this.loading = 'Loading CSV file...';\n        this.dragging = false;\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n        this.loading = '';\n    }\n\n    public handleDrag(type: 'enter' | 'leave' | 'end', event: DragEvent) {\n        this.dragging = type === 'enter';\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatLegacyRadioModule as MatRadioModule } from '@angular/material/legacy-radio';\nimport { MatLegacyTabsModule as MatTabsModule } from '@angular/material/legacy-tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatLegacyFormFieldModule as MatFormFieldModule } from '@angular/material/legacy-form-field';\nimport { MatLegacyCheckboxModule as MatCheckboxModule } from '@angular/material/legacy-checkbox';\nimport { MatLegacyInputModule as MatInputModule } from '@angular/material/legacy-input';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: 'events' },\n];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"x_google_ignoreList":[]}