{"version":3,"file":"apps_concierge_src_app_desks_desks_module_ts.js","mappings":"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","names":["i0","_r10","ctx_r9","setOptions","group","members","ctx_r11","tmp_0_0","ctx_r1","options","tmp_1_0","tmp_2_0","tmp_3_0","tmp_4_0","tmp_5_0","$event","_r13","ctx_r12","form","patchValue","date","ctx_r4","value","_c18","use_24hr","get","_r15","ctx_r14","secondary_resource","ctx_r5","_r17","ctx_r16","ctx_r6","_c23","NewDeskFormDetailsComponent_div_0_section_31_p_8_Template","ctx_r7","ctx_r8","duration","NewDeskFormDetailsComponent_div_0_section_1_Template","NewDeskFormDetailsComponent_div_0_div_8_Template","NewDeskFormDetailsComponent_div_0_mat_checkbox_26_Template","NewDeskFormDetailsComponent_div_0_div_27_Template","NewDeskFormDetailsComponent_div_0_div_28_Template","NewDeskFormDetailsComponent_div_0_section_29_Template","NewDeskFormDetailsComponent_div_0_section_31_Template","NewDeskFormDetailsComponent_div_0_section_32_Template","ctx_r0","allow_groups","can_book_for_others","end_date","allow_all_day","all_day","can_book_lockers","tmp_8_0","contains","has_assets","NewDeskFormDetailsComponent","AsyncHandler","building","this","_org","bld","_settings","can_recurr","needs_reason","allow_time_changes","endOfDay","addDays","Date","now","valueOf","constructor","_state","super","find","EventEmitter","buildings","building_list","levels","active_levels","features","force_time","set","hours","minutes","from_id","recurrence_options","o","setFeature","f","e","ngOnChanges","changes","selected_desk","id","resources","static","t","i1","i2","i3","core","Xpm","selectors","inputs","outputs","decls","vars","consts","i18n_0","$localize","NewDeskFormDetailsComponent_div_0_Template","ctx","_r5","save","DeskBookModalComponent","_booking_form","_dialog_ref","event","loading","BehaviorSubject","_this","_asyncToGenerator","next","booking_type","postForm","catch","_","notifyError","emit","reason","metadata","notifySuccess","close","template","rf","DeskBookModalComponent_main_7_Template","DeskBookModalComponent_footer_9_Template","DeskBookModalComponent_ng_template_11_Template","_r3","level_r7","display_name","name","_r9","newDeskBooking","_r11","ctx_r10","newDesk","loadCSVData","downloadTemplate","manageRestrictions","DesksTopbarComponent","_desks","_route","_router","_dialog","filters","manage","is_map","setDate","setFilters","updateZones","zones","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","ngOnInit","initialised","pipe","first","toPromise","subscription","queryParamMap","subscribe","params","has","split","length","level","levelWithID","parent_id","approve","reject","url","includes","events","_ref","take","filter","zone","lvl","push","_x","apply","arguments","desk","Desk","randomInt","staff_name","addDesks","notifyInfo","undefined","open","BookingRulesModalComponent","data","type","_this2","loadTextFileFromInputEvent","m","list","csvToJson","map","console","error","bookable","groups","toJSON","images","jsonToCsv","downloadFile","_this3","booking","showBooking","approveDesk","_this4","rejectDesk","i4","DesksTopbarComponent_mat_option_5_Template","DesksTopbarComponent_mat_option_6_Template","DesksTopbarComponent_button_8_Template","DesksTopbarComponent_button_9_Template","DesksTopbarComponent_button_10_Template","DesksTopbarComponent_button_11_Template","DesksTopbarComponent_button_12_Template","search","DesksComponent","refresh","NavigationEnd","url_parts","path","parts","ngOnDestroy","attrs","_c0","DesksComponent_mat_progress_bar_13_Template","_c1","_c2","_c3","date_r14","row_r15","ctx_r18","time_format","end","DeskBookingsComponent_ng_template_7_ng_container_0_ng_container_1_Template","DeskBookingsComponent_ng_template_7_ng_container_0_ng_container_2_Template","DeskBookingsComponent_ng_template_7_ng_container_0_Template","DeskBookingsComponent_ng_template_7_ng_container_1_Template","status","deleted","row_r22","asset_name","asset_id","row_r23","user_email","DeskBookingsComponent_ng_template_11_div_3_Template","user_name","booked_by_name","booked_by_email","row_r26","_r29","row","ctx_r28","ctx_r30","approved","rejected","_r27","row_r32","_r35","ctx_r34","checkin","ctx_r36","data_r31","_r33","_r38","ctx_r37","loadMore","DeskBookingsComponent","has_more_pages","bookings","i","rejectAll","rejectAllDesks","nextPage","d","s","runMethod","checkinDesk","checked_in","fn","DeskBookingsComponent_ng_template_5_Template","DeskBookingsComponent_ng_template_7_Template","DeskBookingsComponent_ng_template_9_Template","DeskBookingsComponent_ng_template_11_Template","DeskBookingsComponent_ng_template_13_Template","DeskBookingsComponent_ng_template_15_Template","DeskBookingsComponent_button_17_Template","_r7","_r1","tmp_6_0","DeskMapViewComponent","_desk","_desks_state","map_url","styles","map_styles","positions","map_positions","actions","map_actions","map_features","setHost","u","host","use_api","opts","setLevel","ExploreDesksService","zoom","center","restoredCtx","row_r12","key_r13","key","setRowValue","data_r11","_r20","row_r17","key_r18","ctx_r19","ctx_r2","data_r16","_r24","ctx_r23","data_r21","print","row_r25","qr_link","qr_code","_r32","ctx_r31","removeDesk","ctx_r33","loadQrCode","DesksManageComponent_ng_template_11_ng_template_10_Template","_r37","clear","ctx_r38","changed","DesksManageComponent","Object","keys","_element","dragging","page_reset","desks","combineLatest","new_desks","n","concat","el","nativeElement","parentElement","scrollTop","removeNewDesk","resp","openConfirmModal","title","content","icon","updated_desks","updateMetadata","description","details","message","unique","clearNewDesks","item","location","origin","encodeURIComponent","generateQRCode","window","handleDrag","DesksManageComponent_ng_template_5_Template","DesksManageComponent_ng_template_7_Template","DesksManageComponent_ng_template_9_Template","DesksManageComponent_ng_template_11_Template","DesksManageComponent_div_13_Template","DesksManageComponent_div_14_Template","DesksManageComponent_div_15_Template","tmp_7_0","level_r4","_r6","ROUTES","component","NewDesksComponent","log","afterClosed","NewDesksComponent_mat_option_19_Template","NewDesksComponent_ng_container_23_Template","NewDesksComponent_ng_container_24_Template","NewDesksComponent_mat_progress_bar_27_Template","children","redirectTo","DesksModule","oAB","cJS","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","SharedBookingsModule","FormFieldsModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component.ts","./apps/concierge/src/app/desks/desk-book-modal.component.ts","./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/new-desks.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BookingFormService } from '@placeos/bookings';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { addDays, endOfDay, set } from 'date-fns';\n\n@Component({\n    selector: 'new-desk-form-details',\n    styles: [],\n    template: `\n        <!-- <div class=\"m-2 bg-warning p-2 text-center rounded shadow text-sm\">\n            The selected desk hasn't been booked. Please book the desk to be\n            able to check-in.\n        </div> -->\n        <div\n            class=\"p-0 sm:py-4 sm:px-16 divide-y divide-base-200 space-y-2\"\n            *ngIf=\"form\"\n            [formGroup]=\"form\"\n        >\n            <section class=\"flex items-center\" *ngIf=\"allow_groups\">\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-secondary]=\"!(options | async)?.group\"\n                    (click)=\"setOptions({ group: false, members: [] })\"\n                >\n                    <app-icon class=\"text-2xl\">person</app-icon>\n                    <div class=\"\" i18n>Single</div>\n                    <div\n                        class=\"absolute h-1 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-base-200]=\"(options | async)?.group\"\n                        [class.bg-secondary]=\"!(options | async)?.group\"\n                    ></div>\n                </button>\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-secondary]=\"(options | async)?.group\"\n                    (click)=\"setOptions({ group: true })\"\n                >\n                    <app-icon class=\"text-2xl\">group_add</app-icon>\n                    <div class=\"\" i18n>Group</div>\n                    <div\n                        class=\"absolute h-1 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-base-200]=\"!(options | async)?.group\"\n                        [class.bg-secondary]=\"(options | async)?.group\"\n                    ></div>\n                </button>\n            </section>\n            <section class=\"p-2\" [class.!border-none]=\"allow_groups\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        1\n                    </div>\n                    <div class=\"text-xl\" i18n>Details</div>\n                </h3>\n                <div\n                    class=\"w-full\"\n                    *ngIf=\"can_book_for_others && !(options | async)?.group\"\n                >\n                    <label for=\"title\">Host<span>*</span></label>\n                    <a-user-search-field\n                        formControlName=\"user\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center flex-wrap sm:space-x-2\">\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"title\">Add Title<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"title\"\n                                formControlName=\"title\"\n                                placeholder=\"e.g. Focus Time\"\n                            />\n                            <mat-error i18n\n                                >Booking title is required.</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 min-w-[256px] relative\">\n                        <label for=\"date\" i18n>Date<span>*</span></label>\n                        <a-date-field\n                            name=\"date\"\n                            formControlName=\"date\"\n                            [to]=\"end_date\"\n                            i18n\n                        >\n                            Date and time must be in the future\n                        </a-date-field>\n                        <mat-checkbox\n                            formControlName=\"all_day\"\n                            *ngIf=\"allow_all_day\"\n                            class=\"absolute -top-2 right-0\"\n                            i18n\n                        >\n                            All Day\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"!form.value.all_day\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n>\n                            Start Time<span>*</span>\n                        </label>\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [use_24hr]=\"use_24hr\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"end-time\" i18n>\n                            End Time<span>*</span>\n                        </label>\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"10 * 60\"\n                            [min]=\"60\"\n                            [step]=\"60\"\n                            [use_24hr]=\"use_24hr\"\n                        >\n                        </a-duration-field>\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"can_book_lockers\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <mat-checkbox\n                            [ngModel]=\"!!form.value.secondary_resource\"\n                            (ngModelChange)=\"\n                                form.patchValue({\n                                    secondary_resource: $event ? 'locker' : ''\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            i18n\n                        >\n                            Require locker\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"(options | async)?.group\">\n                <h3 class=\"space-x-2 flex items-center\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        2\n                    </div>\n                    <div class=\"text-xl\" i18n>Group Members</div>\n                    <div class=\"flex-1 w-px\"></div>\n                </h3>\n                <div class=\"overflow-hidden\">\n                    <a-user-list-field\n                        class=\"mt-4\"\n                        [ngModel]=\"(options | async)?.members || []\"\n                        (ngModelChange)=\"setOptions({ members: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"form.contains('resources')\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 3 : 2 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Desk</div>\n                </h3>\n                <desk-list-field formControlName=\"resources\"></desk-list-field>\n                <p\n                    *ngIf=\"(options | async)?.group\"\n                    class=\"text-center rounded px-2 py-1 bg-warning shadow text-xs\"\n                >\n                    Desks nearby to the selected desk will booked for group\n                    members\n                </p>\n            </section>\n            <section class=\"p-2\" *ngIf=\"has_assets\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-base-200 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 4 : 3 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Request Asset</div>\n                </h3>\n                <asset-list-field\n                    [date]=\"form.value.date\"\n                    [duration]=\"form.value.duration\"\n                    formControlName=\"assets\"\n                ></asset-list-field>\n            </section>\n        </div>\n    `,\n})\nexport class NewDeskFormDetailsComponent extends AsyncHandler {\n    @Input() public form: FormGroup;\n    @Output() public find = new EventEmitter<void>();\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    public readonly force_time = set(Date.now(), {\n        hours: 6,\n        minutes: 0,\n    }).valueOf();\n\n    /** Selected desk for booking */\n    public selected_desk: Desk;\n    public from_id = false;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public readonly setFeature = (f, e) => this._state.setFeature(f, e);\n\n    public get can_book_for_others() {\n        return this._settings.get('app.desks.can_book_for_others');\n    }\n\n    public get can_book_lockers() {\n        return this._settings.get('app.desks.can_book_lockers');\n    }\n    public get can_recurr() {\n        return this._settings.get('app.desks.recurrence_allowed');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    public get has_assets() {\n        return !!this._settings.get('app.desks.has_assets');\n    }\n\n    public get needs_reason() {\n        return this._settings.get('app.desks.needs_reason') === true;\n    }\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n\n    public get allow_all_day() {\n        return (\n            this.allow_time_changes &&\n            !!this._settings.get('app.desks.allow_all_day')\n        );\n    }\n\n    public get end_date() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.desks.available_period') || 90\n            )\n        ).valueOf();\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.form && this.form) {\n            if (this.selected_desk?.id) {\n                this.form.patchValue({ resources: [this.selected_desk] });\n            }\n        }\n    }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { BookingFormService } from '@placeos/bookings';\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'desk-book-modal',\n    template: `\n        <header>\n            <h2>New Desk Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!(loading | async); else load_state\"\n            class=\"overflow-auto p-4 max-h-[65vh]\"\n        >\n            <new-desk-form-details [form]=\"form\"></new-desk-form-details>\n        </main>\n        <footer\n            *ngIf=\"!(loading | async)\"\n            class=\"flex justify-center items-center p-2 border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Making booking request...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskBookModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public readonly loading = new BehaviorSubject(false);\n\n    public get form() {\n        return this._booking_form.form;\n    }\n\n    constructor(\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<DeskBookModalComponent>\n    ) {}\n\n    public async save() {\n        this.loading.next(true);\n        this.form.patchValue({ booking_type: 'desk' });\n        const event = await this._booking_form.postForm().catch((_) => {\n            notifyError(_);\n            this.loading.next(false);\n            throw _;\n        });\n        this.event.emit({ reason: 'done', metadata: event });\n        notifySuccess('Successfully created booking');\n        this._dialog_ref.close();\n        this.loading.next(false);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { BookingRulesModalComponent } from '../ui/booking-rules-modal.component';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"\n                        (filters | async).zones\n                            ? (filters | async).zones[0]\n                            : 'All'\n                    \"\n                    (ngModelChange)=\"updateZones([$event])\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option value=\"All\" *ngIf=\"!is_map\"\n                        >All Levels</mat-option\n                    >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button\n                btn\n                matRipple\n                *ngIf=\"!manage\"\n                class=\"mx-2 w-36\"\n                matTooltip=\"New Desk Booking\"\n                (click)=\"newDeskBooking()\"\n            >\n                New Booking\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"newDesk()\"\n                matTooltip=\"New Desk\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary relative text-white rounded\"\n                matTooltip=\"Upload Desks CSV\"\n            >\n                <app-icon>cloud_upload</app-icon>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"downloadTemplate()\"\n                matTooltip=\"Download Template Desk CSV\"\n            >\n                <app-icon>download</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"manageRestrictions()\"\n                matTooltip=\"Desk Restrictions\"\n            >\n                <app-icon>lock_open</app-icon>\n            </button>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(filters | async)?.search\"\n                (modelChange)=\"setFilters({ search: $event })\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n\n    public manage = false;\n    public is_map = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe(() => {\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        this.manage = this._router.url?.includes('manage');\n        this.is_map = this._router.url?.includes('map');\n    }\n\n    public newDesk() {\n        const desk = new Desk({ id: `desk-${randomInt(999_999)}` });\n        desk.staff_name = `[NEW_DESK]`;\n        this._desks.addDesks([desk]);\n        notifyInfo('New desk added to local data.', undefined, () =>\n            notifyInfo('Make sure to save the new desk before using it.')\n        );\n    }\n\n    public newDeskBooking() {\n        this._dialog.open(DeskBookModalComponent, {});\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(BookingRulesModalComponent, {\n            data: { type: 'desk' },\n        });\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._desks.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    public downloadTemplate() {\n        const desk: any = new Desk({\n            id: 'desk-123',\n            name: 'Test Desk',\n            bookable: true,\n            groups: ['test-desk-group', 'desk-bookers'],\n            features: ['Standing Desk', 'Dual Monitor'],\n        }).toJSON();\n        delete desk.images;\n        const data = jsonToCsv([desk]);\n        downloadFile('desk-template.csv', data);\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main\n            class=\"flex-1 relative w-1/2 flex flex-col bg-base-100 overflow-hidden\"\n        >\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Desks\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends AsyncHandler implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\nimport { map } from 'rxjs/operators';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <div class=\"w-full h-4\"></div>\n        <div class=\"overflow-auto h-full w-full px-4 pb-4\">\n            <custom-table\n                class=\"min-w-[76rem] block\"\n                [dataSource]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'date',\n                    'period',\n                    'user_name',\n                    'group',\n                    'asset_name',\n                    'approver_name',\n                    'status',\n                    'checked_in'\n                ]\"\n                [display_column]=\"[\n                    'Date',\n                    'Period',\n                    'Person',\n                    'Group',\n                    'Desk',\n                    'Approver',\n                    'Status',\n                    'Checked In'\n                ]\"\n                [column_size]=\"[\n                    '4r',\n                    '10r',\n                    'flex',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '8r',\n                    '7r'\n                ]\"\n                [template]=\"{\n                    user_name: user_template,\n                    asset_name: desk_template,\n                    date: date_template,\n                    period: period_template,\n                    status: status_template,\n                    checked_in: option_template,\n                    access: option_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desk bookings'\n                        : 'There are no desk booking for the currently selected date.'\n                \"\n            ></custom-table>\n            <ng-template #date_template let-date=\"data\">\n                <div class=\"flex flex-col items-center justify-center w-full\">\n                    <div class=\"opacity-60\">{{ date | date: 'MMM' }}</div>\n                    <div class=\"text-xl\">{{ date | date: 'dd' }}</div>\n                </div>\n            </ng-template>\n            <ng-template #period_template let-row=\"row\">\n                <ng-container *ngIf=\"row.status !== 'declined' && !row.deleted\">\n                    <ng-container *ngIf=\"!row.all_day\">\n                        {{ row.date | date: time_format }} &ndash;\n                        {{ row.end | date: time_format }}\n                    </ng-container>\n                    <ng-container *ngIf=\"row.all_day\">All Day</ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"row.status === 'declined' || row.deleted\">\n                    <div\n                        class=\"text-xs py-1 px-2 bg-error rounded-2xl text-white\"\n                    >\n                        Expired\n                    </div>\n                </ng-container>\n            </ng-template>\n            <ng-template #desk_template let-row=\"row\">\n                {{ row.asset_name || row.asset_id }}\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                <div class=\"flex flex-col justify-center\">\n                    <div class=\"select-all\">\n                        {{\n                            row.user_name ||\n                                row.user_email ||\n                                row.booked_by_name ||\n                                row.booked_by_email\n                        }}\n                    </div>\n                    <div\n                        *ngIf=\"row.user_name\"\n                        class=\"text-xs opacity-30 select-all\"\n                    >\n                        {{ row.user_email }}\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template #status_template let-row=\"row\">\n                <button\n                    matRipple\n                    [matMenuTriggerFor]=\"statusMenu\"\n                    class=\"rounded-3xl px-2 py-1 flex items-center space-x-2 capitalize\"\n                    [class.bg-success]=\"row.approved\"\n                    [class.text-white]=\"row.approved || row.rejected\"\n                    [class.bg-warning]=\"!row.approved && !row.rejected\"\n                    [class.text-black]=\"!row.approved && !row.rejected\"\n                    [class.bg-error]=\"row.rejected\"\n                >\n                    <div class=\"ml-2\">\n                        {{\n                            row.approved\n                                ? 'Approved'\n                                : row.rejected\n                                ? 'Declined'\n                                : 'Tentative'\n                        }}\n                    </div>\n                    <app-icon class=\"text-xl\">arrow_drop_down</app-icon>\n                </button>\n                <mat-menu #statusMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"approve(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\"\n                                >event_available</app-icon\n                            >\n                            <div>Approve Desk</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"reject(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">event_busy</app-icon>\n                            <div>Decline Desk</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n            <ng-template #option_template let-data=\"data\" let-row=\"row\">\n                <button\n                    matRipple\n                    class=\"rounded-3xl px-2 py-1 text-white flex items-center space-x-2\"\n                    [matMenuTriggerFor]=\"checkinMenu\"\n                    [class.bg-neutral]=\"!data\"\n                    [class.bg-success]=\"data\"\n                    [class.opacity-30]=\"row.status === 'ended'\"\n                    [disabled]=\"row.status === 'ended'\"\n                    [matTooltip]=\"\n                        row.status === 'ended'\n                            ? 'Desk booking has ended'\n                            : 'Check-in or check-out desk'\n                    \"\n                >\n                    <div class=\"ml-2\">{{ data ? 'Yes' : 'No' }}</div>\n                    <app-icon class=\"text-xl\">arrow_drop_down</app-icon>\n                </button>\n                <mat-menu #checkinMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"checkin(row, true)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">check</app-icon>\n                            <div>Check-in</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"checkin(row, false)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">cancel</app-icon>\n                            <div>Check-out</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n        </div>\n\n        <button\n            btn\n            matRipple\n            class=\"absolute bottom-2 left-2 w-32 mx-auto my-4\"\n            *ngIf=\"!loading && (has_more_pages | async)\"\n            (click)=\"loadMore()\"\n        >\n            Load More\n        </button>\n        <button\n            icon\n            matRipple\n            class=\"absolute bottom-2 right-2 bg-base-100 shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly has_more_pages = this._state.has_more_pages;\n    public readonly bookings = this._state.bookings.pipe(\n        map((i) =>\n            i.map((booking) => ({\n                ...booking,\n                end: booking.date + booking.duration * 60 * 1000,\n            }))\n        )\n    );\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n    public readonly loadMore = () => this._state.nextPage();\n\n    public readonly checkin = (d, s?) =>\n        this.runMethod('checkin', async () => {\n            await this._state.checkinDesk(d, s);\n            d.checked_in = s ?? true;\n        });\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _settings: SettingsService\n    ) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-2 right-2\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    class=\"white\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-base-100 shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends AsyncHandler implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._desks_state.setOptions({ use_api: true });\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                const level = this._org.levelWithID(opts.zones);\n                if (level) this._state.setLevel(level.id);\n                this._desks_state.setOptions({\n                    date: opts.date || Date.now(),\n                    all_day: true,\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n    unique,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\nconst QR_CODES = {};\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <div class=\"w-full h-4\"></div>\n        <div\n            class=\"w-full relative pl-8 pb-4\"\n            [style.margin-bottom]=\"changed > 0 ? '4rem' : ''\"\n            (dragenter)=\"handleDrag('enter', $event)\"\n            (window:dragend)=\"handleDrag('end', $event)\"\n        >\n            <custom-table\n                class=\"min-w-[76rem] block\"\n                [dataSource]=\"desks\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'map_id',\n                    'bookable',\n                    'name',\n                    'groups',\n                    'features',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'ID',\n                    'Bookable',\n                    'Name',\n                    'Groups',\n                    'Features',\n                    ' '\n                ]\"\n                [column_size]=\"['12r', '6r', '12r', 'flex', '16r', '10r']\"\n                [template]=\"{\n                    map_id: text_edit_template,\n                    name: text_edit_template,\n                    bookable: bookable_edit_template,\n                    groups: list_edit_template,\n                    features: list_edit_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desks'\n                        : 'No desks for selected level'\n                \"\n                [reset_page]=\"page_reset\"\n                [pagination]=\"true\"\n                [page_size]=\"20\"\n            ></custom-table>\n            <ng-template\n                #list_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <item-list-field\n                    class=\"w-full\"\n                    hide-outline\n                    [placeholder]=\"\n                        key === 'groups' ? 'User Groups' : 'Features'\n                    \"\n                    [name]=\"key\"\n                    [ngModel]=\"\n                        (changes[row.id] ? changes[row.id][key] : null) || data\n                    \"\n                    (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                >\n                </item-list-field>\n            </ng-template>\n            <ng-template\n                #text_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <div class=\"w-full h-12\" hide-outline>\n                    <mat-form-field class=\"h-12 w-full\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [placeholder]=\"key\"\n                            [name]=\"key\"\n                            [ngModel]=\"\n                                (changes[row.id]\n                                    ? changes[row.id][key]\n                                    : null) || data\n                            \"\n                            (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                        />\n                    </mat-form-field>\n                </div>\n            </ng-template>\n            <ng-template #bookable_edit_template let-data=\"data\" let-row=\"row\">\n                <div class=\"flex items-center justify-center pl-4\">\n                    <mat-checkbox\n                        [ngModel]=\"changes[row.id]?.bookable ?? data\"\n                        (ngModelChange)=\"\n                            setRowValue(row.id, 'bookable', $event)\n                        \"\n                    ></mat-checkbox>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <div\n                        class=\"p-2 text-2xl text-warning\"\n                        [class.opacity-0]=\"!changes[row.id]\"\n                        matTooltip=\"Desk has unsaved changes\"\n                    >\n                        <app-icon>warning</app-icon>\n                    </div>\n                    <button icon (click)=\"removeDesk(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        customTooltip\n                        [content]=\"qr_menu\"\n                        (click)=\"loadQrCode(row)\"\n                    >\n                        <app-icon>qr_code</app-icon>\n                    </button>\n                    <ng-template #qr_menu>\n                        <div class=\"bg-base-100 py-2 shadow rounded\">\n                            <div class=\"\" printable>\n                                <a\n                                    [href]=\"row.qr_link | safe: 'url'\"\n                                    target=\"_blank\"\n                                    ref=\"noopener noreferrer\"\n                                    class=\"block p-2 mx-4 my-2 rounded-lg border border-base-200 bg-base-100\"\n                                >\n                                    <img class=\"w-48\" [src]=\"row.qr_code\" />\n                                </a>\n                                <div\n                                    class=\"w-[calc(100%-2rem)] text-center mt-2 font-mono text-sm bg-base-200 rounded p-2 mx-4\"\n                                >\n                                    {{ row.name || row.id }}\n                                </div>\n                            </div>\n                            <button\n                                btn\n                                matRipple\n                                class=\"w-[calc(100%-2rem)] mx-4 my-2\"\n                                (click)=\"print()\"\n                            >\n                                Print QR Code\n                            </button>\n                        </div>\n                    </ng-template>\n                </div>\n            </ng-template>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-base-100 bg-opacity-60\"\n                *ngIf=\"loading\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n            <div\n                *ngIf=\"dragging\"\n                class=\"absolute inset-0 bg-neutral flex items-center justify-center\"\n            >\n                <div class=\"bg-base-100 p-4 rounded shadow\">\n                    <div\n                        class=\"border-4 border-base-200 border-dashed rounded flex flex-col items-center justify-center w-64 h-64\"\n                    >\n                        Drop CSV file to add desks\n                    </div>\n                </div>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </div>\n        </div>\n        <div\n            class=\"fixed bottom-0 left-64 right-0 p-2 bg-base-100 shadow border-t border-base-200 flex items-center justify-center space-x-4\"\n            *ngIf=\"changed > 0\"\n        >\n            <p class=\"flex-1 text-center pl-8\">\n                {{ changed }} Desk(s) with unsaved changes\n            </p>\n            <div class=\"flex items-center justify-center space-x-2\">\n                <button clear btn matRipple class=\"inverse\" (click)=\"clear()\">\n                    Clear Changes\n                </button>\n                <button save btn matRipple (click)=\"save()\">\n                    Save Changes\n                </button>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent extends AsyncHandler {\n    public changes: Record<string, Partial<Desk>> = {};\n    public loading: string;\n    public dragging = false;\n    public page_reset = 0;\n    public readonly filters = this._state.filters;\n    public readonly desks = combineLatest([\n        this._state.new_desks,\n        this._state.desks,\n    ]).pipe(map(([d, n]) => d.concat(n)));\n\n    public get changed() {\n        return Object.keys(this.changes).length || 0;\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _element: ElementRef\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'new_desks',\n            this._state.new_desks.subscribe((desks) => {\n                this.page_reset = Date.now();\n                const el = this._element?.nativeElement?.parentElement;\n                if (el) el.scrollTop = 0;\n                for (const desk of desks) {\n                    this.changes[desk.id] = {};\n                }\n            })\n        );\n    }\n\n    public setRowValue<K extends keyof Desk>(\n        id: string,\n        key: K,\n        value: Desk[K]\n    ): void {\n        if (!this.changes[id]) this.changes[id] = {};\n        this.changes[id][key] = value;\n    }\n\n    public async removeDesk(desk: Desk) {\n        const new_desks = await this._state.new_desks.pipe(take(1)).toPromise();\n        if (new_desks.find((_) => _.id === desk.id)) {\n            delete this.changes[desk.id];\n            return this._state.removeNewDesk(desk);\n        }\n        const resp = await openConfirmModal(\n            {\n                title: 'Remove desk',\n                content: `Remove desk ${desk.name}?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.close();\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.filter((_) => _.id !== desk.id);\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        this.loading = 'Removing desk...';\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        delete this.changes[desk.id];\n        notifySuccess('Successfully updated desks');\n        this._state.setFilters({});\n        this.loading = '';\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = unique(\n            desks.map((_) =>\n                new Desk({ ..._, ...(this.changes[_.id] || {}) }).toJSON()\n            ),\n            'id'\n        );\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                const msg =\n                    e?.status === 403\n                        ? 'You do not have the required permissions to save desk changes.'\n                        : e.message || e;\n                notifyError(`Error saving desk data. Error: ${msg}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.clearNewDesks();\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public clear() {\n        this._state.clearNewDesks();\n        this.changes = {};\n    }\n\n    public loadQrCode(item: any) {\n        item.qr_link = `${\n            location.origin\n        }/workplace/#/book/code?asset_id=${encodeURIComponent(item.id)}`;\n        item.qr_code = generateQRCode(\n            `${\n                location.origin\n            }/workplace/#/book/code?asset_id=${encodeURIComponent(item.id)}`\n        );\n    }\n\n    public print() {\n        window.print();\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        this.loading = 'Loading CSV file...';\n        this.dragging = false;\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n        this.loading = '';\n    }\n\n    public handleDrag(type: 'enter' | 'leave' | 'end', event: DragEvent) {\n        this.dragging = type === 'enter';\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifyInfo,\n    notifySuccess,\n    randomInt,\n} from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { take } from 'rxjs/operators';\nimport { BookingRulesModalComponent } from '../ui/booking-rules-modal.component';\n\n@Component({\n    selector: '[app-new-desks]',\n    template: `\n        <app-topbar class=\" print:hidden\"></app-topbar>\n        <div class=\"flex flex-1 h-px print:hidden\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center w-full py-4 px-8 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Desk Bookings</h2>\n                    <div class=\"flex-1 w-px\"></div>\n                    <searchbar\n                        class=\"mr-2\"\n                        [model]=\"(filters | async)?.search\"\n                        (modelChange)=\"setFilters({ search: $event })\"\n                    ></searchbar>\n                    <button\n                        btn\n                        matRipple\n                        class=\"space-x-2\"\n                        (click)=\"newDeskBooking()\"\n                    >\n                        <div>New Booking</div>\n                        <app-icon>add</app-icon>\n                    </button>\n                </div>\n                <div class=\"w-full flex items-center px-8 space-x-2\">\n                    <mat-form-field appearance=\"outline\" class=\"h-[3.5rem]\">\n                        <mat-select\n                            multiple\n                            [ngModel]=\"(filters | async)?.zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"border-l h-full !ml-8 !mr-4\"></div>\n                    <div class=\"flex-1 w-px\"></div>\n                    <ng-container *ngIf=\"path === 'events'\">\n                        <date-options\n                            (dateChange)=\"setDate($event)\"\n                        ></date-options>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            matTooltip=\"Refresh List\"\n                            class=\"ml-2 rounded border border-base-200\"\n                            (click)=\"refresh()\"\n                            [disabled]=\"loading | async\"\n                        >\n                            <app-icon>refresh</app-icon>\n                        </button>\n                    </ng-container>\n                    <ng-container *ngIf=\"path === 'manage'\">\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-secondary text-white rounded\"\n                            (click)=\"newDesk()\"\n                            matTooltip=\"New Desk\"\n                        >\n                            <app-icon>add</app-icon>\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-secondary relative text-white rounded\"\n                            matTooltip=\"Upload Desks CSV\"\n                        >\n                            <app-icon>cloud_upload</app-icon>\n                            <input\n                                type=\"file\"\n                                class=\"absolute inset-0 opacity-0\"\n                                (change)=\"loadCSVData($event)\"\n                            />\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-secondary text-white rounded\"\n                            (click)=\"downloadTemplate()\"\n                            matTooltip=\"Download Template Desk CSV\"\n                        >\n                            <app-icon>download</app-icon>\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-secondary text-white rounded\"\n                            (click)=\"manageRestrictions()\"\n                            matTooltip=\"Desk Restrictions\"\n                        >\n                            <app-icon>lock_open</app-icon>\n                        </button>\n                    </ng-container>\n                </div>\n                <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                    <router-outlet></router-outlet>\n                </div>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"(loading | async) && path === 'events'\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewDesksComponent\n    extends AsyncHandler\n    implements OnInit, OnDestroy\n{\n    public readonly loading = this._state.loading;\n    public path: string;\n    /** List of levels for the active building */\n    public readonly filters = this._state.filters;\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    public readonly setFilters = (o) => this._state.setFilters(o);\n    public readonly refresh = () => this._state.refresh();\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: DesksStateService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                    console.log('Path:', this.path);\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n\n    public newDeskBooking() {\n        const ref = this._dialog.open(DeskBookModalComponent, {});\n        ref.afterClosed().subscribe((_) => {\n            this._state.refresh();\n        });\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(BookingRulesModalComponent, {\n            data: { type: 'desk' },\n        });\n    }\n\n    public newDesk() {\n        this._state.addDesks([new Desk({ id: `desk-${randomInt(999_999)}` })]);\n        notifyInfo('New desk added to local data.', undefined, () =>\n            notifyInfo('Make sure to save the new desk before using it.')\n        );\n    }\n\n    public downloadTemplate() {\n        const desk: any = new Desk({\n            id: 'desk-123',\n            name: 'Test Desk',\n            bookable: true,\n            groups: ['test-desk-group', 'desk-bookers'],\n            features: ['Standing Desk', 'Dual Monitor'],\n        }).toJSON();\n        delete desk.images;\n        const data = jsonToCsv([desk]);\n        downloadFile('desk-template.csv', data);\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { NewDeskFormDetailsComponent } from 'apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { NewDesksComponent } from './new-desks.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: 'new',\n        component: NewDesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [\n        NewDesksComponent,\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n        NewDeskFormDetailsComponent,\n        DeskBookModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"x_google_ignoreList":[]}