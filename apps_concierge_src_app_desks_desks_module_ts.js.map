{"version":3,"file":"apps_concierge_src_app_desks_desks_module_ts.js","mappings":"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","names":["i0","_r9","ctx_r8","setOptions","group","members","ctx_r10","tmp_0_0","ctx_r1","options","tmp_1_0","tmp_2_0","tmp_3_0","tmp_4_0","tmp_5_0","tmp_6_0","tmp_7_0","$event","_r12","ctx_r11","form","patchValue","secondary_resource","ctx_r4","value","_c20","_r14","ctx_r13","ctx_r5","_c23","NewDeskFormDetailsComponent_div_0_section_41_p_8_Template","ctx_r6","ctx_r7","date","duration","NewDeskFormDetailsComponent_div_0_section_1_Template","NewDeskFormDetailsComponent_div_0_div_8_Template","_r17","ctx_r16","NewDeskFormDetailsComponent_div_0_mat_checkbox_37_Template","NewDeskFormDetailsComponent_div_0_div_38_Template","NewDeskFormDetailsComponent_div_0_section_39_Template","NewDeskFormDetailsComponent_div_0_section_41_Template","NewDeskFormDetailsComponent_div_0_section_42_Template","ctx_r0","allow_groups","can_book_for_others","end_date","all_day","force_time","undefined","use_24hr","tmp_9_0","get","disabled","tmp_10_0","allow_all_day","can_book_lockers","tmp_18_0","contains","has_assets","NewDeskFormDetailsComponent","AsyncHandler","building","this","_org","bld","_settings","can_recurr","needs_reason","allow_time_changes","endOfDay","addDays","Date","now","constructor","_state","super","find","EventEmitter","buildings","building_list","levels","active_levels","features","set","hours","minutes","valueOf","from_id","recurrence_options","o","setFeature","f","e","ngOnChanges","changes","selected_desk","id","resources","t","i1","i2","i3","core","Xpm","selectors","inputs","outputs","decls","vars","consts","i18n_0","$localize","NewDeskFormDetailsComponent_div_0_Template","ctx","_r5","save","DeskBookModalComponent","_booking_form","_dialog_ref","event","loading","BehaviorSubject","_this","_asyncToGenerator","next","booking_type","postForm","catch","_","notifyError","emit","reason","metadata","notifySuccess","close","template","rf","DeskBookModalComponent_main_7_Template","DeskBookModalComponent_footer_9_Template","DeskBookModalComponent_ng_template_11_Template","_r2","data_r14","ctx_r9","time_format","data_r15","length","_r20","row_r16","row","ctx_r18","edit","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_6_button_1_Template","_r22","ctx_r21","remove","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_2_Template","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_4_Template","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_6_Template","restrictions","_c0","_c1","_c2","_c3","_r8","_r10","_r24","ctx_r23","add","ctx_r25","DeskRestrictionModalComponent_ng_container_7_main_1_Template","DeskRestrictionModalComponent_ng_container_7_footer_2_Template","adding","_r4","row_r29","_r31","ctx_r30","selected","map_id","ctx_r28","_r33","ctx_r32","start_date","ctx_r34","setEndDate","ctx_r35","search","DeskRestrictionModalComponent_ng_template_10_ng_template_14_Template","ctx_r36","ctx_r37","addRestriction","_r26","desk_list","_c4","_c5","_c6","_c7","_r27","DeskRestrictionModalComponent","_desks","startOfDay","desks","end","ngOnInit","initialised","pipe","first","toPromise","showMetadata","subscribe","details","Array","item","start","items","reduce","map","s","restriction","filter","_this2","take","push","randomInt","_this3","disableClose","updateMetadata","name","description","isBefore","i4","DeskRestrictionModalComponent_ng_container_2_Template","DeskRestrictionModalComponent_ng_container_7_Template","DeskRestrictionModalComponent_ng_template_8_Template","DeskRestrictionModalComponent_ng_template_10_Template","level_r7","display_name","newDeskBooking","_r11","newDesk","_r13","ctx_r12","loadCSVData","_r15","ctx_r14","downloadTemplate","manageRestrictions","DesksTopbarComponent","_route","_router","_dialog","filters","manage","is_map","setDate","setFilters","updateZones","zones","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","subscription","queryParamMap","params","has","split","level","levelWithID","parent_id","approve","reject","url","includes","events","_ref","zone","lvl","_x","apply","arguments","addDesks","Desk","open","data","loadTextFileFromInputEvent","m","list","csvToJson","console","error","desk","bookable","groups","toJSON","jsonToCsv","downloadFile","booking","showBooking","approveDesk","_this4","rejectDesk","DesksTopbarComponent_mat_option_5_Template","DesksTopbarComponent_mat_option_6_Template","DesksTopbarComponent_button_8_Template","DesksTopbarComponent_button_9_Template","DesksTopbarComponent_button_10_Template","DesksTopbarComponent_button_11_Template","DesksTopbarComponent_button_12_Template","tmp_8_0","DesksComponent","refresh","NavigationEnd","url_parts","path","parts","ngOnDestroy","attrs","DesksComponent_mat_progress_bar_13_Template","date_r14","row_r15","ctx_r3","asset_name","asset_id","row_r17","user_email","DeskBookingsComponent_ng_template_11_div_3_Template","user_name","booked_by_name","booked_by_email","row_r20","_r23","ctx_r22","ctx_r24","approved","rejected","_r21","row_r26","_r29","checkin","data_r25","_r32","ctx_r31","loadMore","DeskBookingsComponent","has_more_pages","bookings","i","rejectAll","rejectAllDesks","nextPage","d","runMethod","checkinDesk","checked_in","fn","DeskBookingsComponent_ng_template_5_Template","DeskBookingsComponent_ng_template_7_Template","DeskBookingsComponent_ng_template_9_Template","DeskBookingsComponent_ng_template_11_Template","DeskBookingsComponent_ng_template_13_Template","DeskBookingsComponent_ng_template_15_Template","DeskBookingsComponent_button_17_Template","_r6","_r0","DeskMapViewComponent","_desk","_desks_state","map_url","styles","map_styles","positions","map_positions","actions","map_actions","map_features","setHost","u","host","use_api","opts","setLevel","ExploreDesksService","zoom","center","restoredCtx","row_r12","key_r13","key","setRowValue","data_r11","key_r18","ctx_r19","data_r16","row_r22","data_r21","row_r25","_r28","ctx_r27","removeDesk","ctx_r29","loadQrCode","qr_code","changed","DesksManageComponent","Object","keys","new_desk_count","resp","openConfirmModal","title","content","icon","updated_desks","message","unique","status","clearNewDesks","generateQRCode","location","origin","encodeURIComponent","dragging","combineLatest","new_desks","n","concat","handleDrag","type","DesksManageComponent_ng_template_5_Template","DesksManageComponent_ng_template_7_Template","DesksManageComponent_ng_template_9_Template","DesksManageComponent_ng_template_11_Template","DesksManageComponent_div_13_Template","DesksManageComponent_div_14_Template","DesksManageComponent_div_15_Template","level_r4","ROUTES","component","NewDesksComponent","log","afterClosed","NewDesksComponent_mat_option_19_Template","NewDesksComponent_ng_container_23_Template","NewDesksComponent_ng_container_24_Template","NewDesksComponent_mat_progress_bar_27_Template","children","redirectTo","DesksModule","oAB","cJS","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","SharedBookingsModule","FormFieldsModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component.ts","./apps/concierge/src/app/desks/desk-book-modal.component.ts","./apps/concierge/src/app/desks/desk-restriction-modal.component.ts","./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/new-desks.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BookingFormService } from '@placeos/bookings';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { addDays, endOfDay, set } from 'date-fns';\n\n@Component({\n    selector: 'new-desk-form-details',\n    styles: [],\n    template: `\n        <!-- <div class=\"m-2 bg-yellow-500 p-2 text-center rounded shadow text-sm\">\n            The selected desk hasn't been booked. Please book the desk to be\n            able to check-in.\n        </div> -->\n        <div\n            class=\"p-0 sm:py-4 sm:px-16 divide-y divide-gray-300 space-y-2\"\n            *ngIf=\"form\"\n            [formGroup]=\"form\"\n        >\n            <section class=\"flex items-center\" *ngIf=\"allow_groups\">\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-primary]=\"!(options | async)?.group\"\n                    [class.opacity-60]=\"(options | async)?.group\"\n                    (click)=\"setOptions({ group: false, members: [] })\"\n                >\n                    <app-icon class=\"text-2xl\">person</app-icon>\n                    <div class=\"\" i18n>Single</div>\n                    <div\n                        class=\"absolute h-2 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-gray-200]=\"(options | async)?.group\"\n                        [class.bg-primary]=\"!(options | async)?.group\"\n                    ></div>\n                </button>\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-primary]=\"(options | async)?.group\"\n                    [class.opacity-60]=\"!(options | async)?.group\"\n                    (click)=\"setOptions({ group: true })\"\n                >\n                    <app-icon class=\"text-2xl\">group_add</app-icon>\n                    <div class=\"\" i18n>Group</div>\n                    <div\n                        class=\"absolute h-2 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-gray-200]=\"!(options | async)?.group\"\n                        [class.bg-primary]=\"(options | async)?.group\"\n                    ></div>\n                </button>\n            </section>\n            <section class=\"p-2\" [class.!border-none]=\"allow_groups\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        1\n                    </div>\n                    <div class=\"text-xl\" i18n>Details</div>\n                </h3>\n                <div\n                    class=\"w-full\"\n                    *ngIf=\"can_book_for_others && !(options | async)?.group\"\n                >\n                    <label for=\"title\">Host<span>*</span></label>\n                    <a-user-search-field\n                        formControlName=\"user\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center flex-wrap sm:space-x-2\">\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"title\">Add Title<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"title\"\n                                formControlName=\"title\"\n                                placeholder=\"e.g. Focus Time\"\n                            />\n                            <mat-error i18n\n                                >Booking title is required.</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"date\" i18n>Date<span>*</span></label>\n                        <a-date-field\n                            name=\"date\"\n                            formControlName=\"date\"\n                            [to]=\"end_date\"\n                            i18n\n                        >\n                            Date and time must be in the future\n                        </a-date-field>\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n>\n                            Start Time<span>*</span>\n                        </label>\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            [force_time]=\"\n                                form.value.all_day ? force_time : undefined\n                            \"\n                            [use_24hr]=\"use_24hr\"\n                            [disabled]=\"\n                                form.value.all_day || form.get('date')?.disabled\n                            \"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3 relative\">\n                        <label for=\"end-time\" i18n>\n                            End Time<span>*</span>\n                        </label>\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"10 * 60\"\n                            [min]=\"60\"\n                            [step]=\"60\"\n                            [use_24hr]=\"use_24hr\"\n                            [force]=\"form.value.all_day ? 'All Day' : ''\"\n                        >\n                        </a-duration-field>\n                        <mat-checkbox\n                            formControlName=\"all_day\"\n                            *ngIf=\"allow_all_day\"\n                            class=\"absolute -top-2 right-0\"\n                            i18n\n                        >\n                            All Day\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"can_book_lockers\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <mat-checkbox\n                            [ngModel]=\"!!form.value.secondary_resource\"\n                            (ngModelChange)=\"\n                                form.patchValue({\n                                    secondary_resource: $event ? 'locker' : ''\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            i18n\n                        >\n                            Require locker\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"(options | async)?.group\">\n                <h3 class=\"space-x-2 flex items-center\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        2\n                    </div>\n                    <div class=\"text-xl\" i18n>Group Members</div>\n                    <div class=\"flex-1 w-px\"></div>\n                </h3>\n                <div class=\"overflow-hidden\">\n                    <a-user-list-field\n                        class=\"mt-4\"\n                        [ngModel]=\"(options | async)?.members || []\"\n                        (ngModelChange)=\"setOptions({ members: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"form.contains('resources')\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 3 : 2 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Desk</div>\n                </h3>\n                <desk-list-field formControlName=\"resources\"></desk-list-field>\n                <p\n                    *ngIf=\"(options | async)?.group\"\n                    class=\"text-center rounded px-2 py-1 bg-yellow-400 shadow text-xs\"\n                >\n                    Desks nearby to the selected desk will booked for group\n                    members\n                </p>\n            </section>\n            <section class=\"p-2\" *ngIf=\"has_assets\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 4 : 3 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Request Asset</div>\n                </h3>\n                <asset-list-field\n                    [date]=\"form.value.date\"\n                    [duration]=\"form.value.duration\"\n                    formControlName=\"assets\"\n                ></asset-list-field>\n            </section>\n        </div>\n    `,\n})\nexport class NewDeskFormDetailsComponent extends AsyncHandler {\n    @Input() public form: FormGroup;\n    @Output() public find = new EventEmitter<void>();\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    public readonly force_time = set(Date.now(), {\n        hours: 6,\n        minutes: 0,\n    }).valueOf();\n\n    /** Selected desk for booking */\n    public selected_desk: Desk;\n    public from_id = false;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public readonly setFeature = (f, e) => this._state.setFeature(f, e);\n\n    public get can_book_for_others() {\n        return this._settings.get('app.desks.can_book_for_others');\n    }\n\n    public get can_book_lockers() {\n        return this._settings.get('app.desks.can_book_lockers');\n    }\n    public get can_recurr() {\n        return this._settings.get('app.desks.recurrence_allowed');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    public get has_assets() {\n        return !!this._settings.get('app.desks.has_assets');\n    }\n\n    public get needs_reason() {\n        return this._settings.get('app.desks.needs_reason') === true;\n    }\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n\n    public get allow_all_day() {\n        return (\n            this.allow_time_changes &&\n            !!this._settings.get('app.desks.allow_all_day')\n        );\n    }\n\n    public get end_date() {\n        return endOfDay(\n            addDays(\n                Date.now(),\n                this._settings.get('app.desks.available_period') || 90\n            )\n        );\n    }\n\n    public get use_24hr() {\n        return this._settings.get('app.use_24_hour_time');\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.form && this.form) {\n            if (this.selected_desk?.id) {\n                this.form.patchValue({ resources: [this.selected_desk] });\n            }\n        }\n    }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { BookingFormService } from '@placeos/bookings';\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'desk-book-modal',\n    template: `\n        <header>\n            <h2>New Desk Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!(loading | async); else load_state\"\n            class=\"overflow-auto p-4 max-h-[65vh]\"\n        >\n            <new-desk-form-details [form]=\"form\"></new-desk-form-details>\n        </main>\n        <footer\n            *ngIf=\"!(loading | async)\"\n            class=\"flex justify-center items-center p-2 border-t border-gray-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Making booking request...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskBookModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public readonly loading = new BehaviorSubject(false);\n\n    public get form() {\n        return this._booking_form.form;\n    }\n\n    constructor(\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<DeskBookModalComponent>\n    ) {}\n\n    public async save() {\n        this.loading.next(true);\n        this.form.patchValue({ booking_type: 'desk' });\n        const event = await this._booking_form.postForm().catch((_) => {\n            notifyError(_);\n            this.loading.next(false);\n            throw _;\n        });\n        this.event.emit({ reason: 'done', metadata: event });\n        notifySuccess('Successfully created booking');\n        this._dialog_ref.close();\n        this.loading.next(false);\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport {\n    ResourceRestriction,\n    SettingsService,\n    notifyError,\n    notifySuccess,\n    randomInt,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { endOfDay, isBefore, startOfDay } from 'date-fns';\nimport { first, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-restriction-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h2>\n                <ng-container *ngIf=\"adding\">Add</ng-container> Desk\n                Restrictions\n            </h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main\n                class=\"h-[65vh] overflow-auto\"\n                *ngIf=\"!adding; else add_state\"\n            >\n                <custom-table\n                    class=\"block w-[36rem] max-w-[80vw]\"\n                    [dataSource]=\"restrictions\"\n                    [columns]=\"['start', 'end', 'items', 'actions']\"\n                    [display_column]=\"['Start', 'End', 'No. of Desks', ' ']\"\n                    [column_size]=\"['10r', '10r', 'flex', '7r']\"\n                    [template]=\"{\n                        start: date_template,\n                        end: date_template,\n                        items: count_template,\n                        actions: actions_template\n                    }\"\n                    empty=\"No desk restrictions set\"\n                ></custom-table>\n                <ng-template #date_template let-data=\"data\">\n                    {{ data | date: 'mediumDate' }}\n                    {{ data | date: time_format }}\n                </ng-template>\n                <ng-template #count_template let-data=\"data\">\n                    {{ data?.length || '0' }} desk(s)\n                </ng-template>\n                <ng-template #actions_template let-row=\"row\">\n                    <div class=\"flex items-center justify-end space-x-2 w-full\">\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            *ngIf=\"row.id\"\n                            (click)=\"edit(row)\"\n                        >\n                            <app-icon>edit</app-icon>\n                        </button>\n                        <button btn icon matRipple (click)=\"remove(row)\">\n                            <app-icon>delete</app-icon>\n                        </button>\n                    </div>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n                *ngIf=\"!adding\"\n            >\n                <button btn matRipple class=\"inverse w-40\" (click)=\"add()\">\n                    Add Restriction\n                </button>\n                <button btn matRipple (click)=\"save()\" class=\"w-40\">\n                    Save Restrictions\n                </button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <div\n                class=\"flex flex-col items-center justify-center w-[20rem] h-[16rem] space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Saving desk restriction changes...</p>\n            </div>\n        </ng-template>\n        <ng-template #add_state>\n            <main class=\"flex flex-col h-[65vh] overflow-auto\">\n                <div class=\"flex items-center space-x-2 px-2 pt-2\">\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <mat-date-range-input [rangePicker]=\"picker\">\n                            <input\n                                matStartDate\n                                placeholder=\"Start date\"\n                                [(ngModel)]=\"start_date\"\n                            />\n                            <input\n                                matEndDate\n                                placeholder=\"End date\"\n                                [ngModel]=\"end_date\"\n                                (ngModelChange)=\"setEndDate($event)\"\n                            />\n                        </mat-date-range-input>\n                        <mat-datepicker-toggle\n                            matIconSuffix\n                            [for]=\"picker\"\n                        ></mat-datepicker-toggle>\n                        <mat-date-range-picker #picker></mat-date-range-picker>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <app-icon matPrefix>search</app-icon>\n                        <input\n                            matInput\n                            [(ngModel)]=\"search\"\n                            placeholder=\"Filter desks\"\n                        />\n                    </mat-form-field>\n                </div>\n                <custom-table\n                    class=\"block w-[36rem] max-w-[80vw]\"\n                    [dataSource]=\"desk_list\"\n                    [filter]=\"search\"\n                    [columns]=\"['toggle', 'name', 'map_id']\"\n                    [display_column]=\"[' ', 'name', 'MapID']\"\n                    [column_size]=\"['4r', 'flex', '12r']\"\n                    [template]=\"{\n                        toggle: toggle_template\n                    }\"\n                    empty=\"No desk restrictions set\"\n                ></custom-table>\n                <ng-template #toggle_template let-row=\"row\">\n                    <mat-checkbox\n                        [(ngModel)]=\"selected[row.id || row.map_id]\"\n                    ></mat-checkbox>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n            >\n                <button\n                    btn\n                    matRipple\n                    class=\"inverse w-32\"\n                    (click)=\"adding = false\"\n                >\n                    Back\n                </button>\n                <button btn matRipple (click)=\"addRestriction()\" class=\"w-48\">\n                    Add to Restrictions\n                </button>\n            </footer>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskRestrictionModalComponent {\n    public loading = false;\n    public adding = false;\n    public search = '';\n    public id = '';\n    public selected: Record<string, boolean> = {};\n    public start_date = startOfDay(Date.now());\n    public end_date = endOfDay(Date.now());\n    public restrictions: ResourceRestriction[] = [];\n    public readonly desk_list = this._desks.desks;\n\n    public readonly setEndDate = (end: Date) => (this.end_date = endOfDay(end));\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _settings: SettingsService,\n        private _dialog_ref: MatDialogRef<DeskRestrictionModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        showMetadata(this._org.building.id, 'desk_restrictions').subscribe(\n            ({ details }) => {\n                this.restrictions = details instanceof Array ? details : [];\n            }\n        );\n    }\n\n    public add() {\n        this.search = '';\n        this.id = '';\n        this.start_date = startOfDay(Date.now());\n        this.end_date = endOfDay(Date.now());\n        this.selected = {};\n        this.adding = true;\n    }\n\n    public edit(item: ResourceRestriction) {\n        this.search = '';\n        this.id = item.id;\n        this.start_date = new Date(item.start);\n        this.end_date = new Date(item.end);\n        this.selected = item.items.reduce(\n            (map, id) => ({ ...map, [id]: true }),\n            {}\n        );\n        this.adding = true;\n    }\n\n    public remove(restriction: ResourceRestriction) {\n        this.restrictions = this.restrictions.filter((_) => _ !== restriction);\n    }\n\n    public async addRestriction() {\n        const desks = await this.desk_list.pipe(take(1)).toPromise();\n        if (this.id) {\n            this.restrictions = this.restrictions.filter(\n                (_) => _.id !== this.id\n            );\n        }\n        this.restrictions.push({\n            id: this.id || `restriction-${randomInt(999_999, 9_999_999)}`,\n            start: this.start_date.valueOf(),\n            end: this.end_date.valueOf(),\n            items: desks.filter((_) => this.selected[_.id]).map((_) => _.id),\n        });\n        this.adding = false;\n    }\n\n    public async save() {\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        await updateMetadata(this._org.building.id, {\n            name: 'desk_restrictions',\n            description: 'Desk restrictions',\n            details: this.restrictions.filter((_) =>\n                isBefore(Date.now(), _.end)\n            ),\n        })\n            .toPromise()\n            .catch((_) => {\n                this.loading = false;\n                this._dialog_ref.disableClose = false;\n                notifyError('Failed to update desk restrictions');\n                throw _;\n            });\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close();\n        notifySuccess('Successfully updated desk restrictions');\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { DeskRestrictionModalComponent } from './desk-restriction-modal.component';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"\n                        (filters | async).zones\n                            ? (filters | async).zones[0]\n                            : 'All'\n                    \"\n                    (ngModelChange)=\"updateZones([$event])\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option value=\"All\" *ngIf=\"!is_map\"\n                        >All Levels</mat-option\n                    >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button\n                btn\n                matRipple\n                *ngIf=\"!manage\"\n                class=\"mx-2 w-36\"\n                matTooltip=\"New Desk Booking\"\n                (click)=\"newDeskBooking()\"\n            >\n                New Booking\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"newDesk()\"\n                matTooltip=\"New Desk\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary relative text-white rounded\"\n                matTooltip=\"Upload Desks CSV\"\n            >\n                <app-icon>cloud_upload</app-icon>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"downloadTemplate()\"\n                matTooltip=\"Download Template Desk CSV\"\n            >\n                <app-icon>download</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"manageRestrictions()\"\n                matTooltip=\"Desk Restrictions\"\n            >\n                <app-icon>lock_open</app-icon>\n            </button>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(filters | async)?.search\"\n                (modelChange)=\"setFilters({ search: $event })\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n\n    public manage = false;\n    public is_map = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe(() => {\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        this.manage = this._router.url?.includes('manage');\n        this.is_map = this._router.url?.includes('map');\n    }\n\n    public newDesk() {\n        this._desks.addDesks([new Desk({ id: `desk-${randomInt(999_999)}` })]);\n        notifySuccess(\n            'New desk added to local data. Make sure to save the desk before using it.'\n        );\n    }\n\n    public newDeskBooking() {\n        this._dialog.open(DeskBookModalComponent, {});\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(DeskRestrictionModalComponent, {});\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._desks.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    public downloadTemplate() {\n        const desk: any = new Desk({\n            id: 'desk-123',\n            name: 'Test Desk',\n            bookable: true,\n            groups: ['test-desk-group', 'desk-bookers'],\n            features: ['Standing Desk', 'Dual Monitor'],\n        }).toJSON();\n        const data = jsonToCsv([desk]);\n        downloadFile('desk-template.csv', data);\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main\n            class=\"flex-1 relative w-1/2 flex flex-col bg-gray-200 dark:bg-neutral-600 overflow-hidden\"\n        >\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/book', 'desks', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Desks\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends AsyncHandler implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\nimport { map } from 'rxjs/operators';\nimport { SettingsService } from '@placeos/common';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <div class=\"w-full h-4\"></div>\n        <div class=\"overflow-auto h-full w-full px-4 pb-4\">\n            <custom-table\n                class=\"min-w-[76rem] block\"\n                [dataSource]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'date',\n                    'period',\n                    'user_name',\n                    'group',\n                    'asset_name',\n                    'approver_name',\n                    'status',\n                    'checked_in'\n                ]\"\n                [display_column]=\"[\n                    'Date',\n                    'Period',\n                    'Person',\n                    'Group',\n                    'Desk',\n                    'Approver',\n                    'Status',\n                    'Checked In'\n                ]\"\n                [column_size]=\"[\n                    '4r',\n                    '10r',\n                    'flex',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '8r',\n                    '7r'\n                ]\"\n                [template]=\"{\n                    user_name: user_template,\n                    asset_name: desk_template,\n                    date: date_template,\n                    period: period_template,\n                    status: status_template,\n                    checked_in: option_template,\n                    access: option_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desk bookings'\n                        : 'There are no desk booking for the currently selected date.'\n                \"\n            ></custom-table>\n            <ng-template #date_template let-date=\"data\">\n                <div class=\"flex flex-col items-center justify-center w-full\">\n                    <div class=\"opacity-60\">{{ date | date: 'MMM' }}</div>\n                    <div class=\"text-xl\">{{ date | date: 'dd' }}</div>\n                </div>\n            </ng-template>\n            <ng-template #period_template let-row=\"row\">\n                {{ row.date | date: time_format }} &ndash;\n                {{ row.end | date: time_format }}\n            </ng-template>\n            <ng-template #desk_template let-row=\"row\">\n                {{ row.asset_name || row.asset_id }}\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                <div class=\"flex flex-col justify-center\">\n                    <div class=\"select-all\">\n                        {{\n                            row.user_name ||\n                                row.user_email ||\n                                row.booked_by_name ||\n                                row.booked_by_email\n                        }}\n                    </div>\n                    <div\n                        *ngIf=\"row.user_name\"\n                        class=\"text-xs opacity-30 select-all\"\n                    >\n                        {{ row.user_email }}\n                    </div>\n                </div>\n            </ng-template>\n            <ng-template #status_template let-row=\"row\">\n                <button\n                    matRipple\n                    [matMenuTriggerFor]=\"statusMenu\"\n                    class=\"rounded-3xl px-2 py-1 flex items-center space-x-2 capitalize\"\n                    [class.bg-success]=\"row.approved\"\n                    [class.text-white]=\"row.approved || row.rejected\"\n                    [class.bg-pending]=\"!row.approved && !row.rejected\"\n                    [class.text-black]=\"!row.approved && !row.rejected\"\n                    [class.bg-error]=\"row.rejected\"\n                >\n                    <div class=\"ml-2\">\n                        {{\n                            row.approved\n                                ? 'Approved'\n                                : row.rejected\n                                ? 'Declined'\n                                : 'Tentative'\n                        }}\n                    </div>\n                    <app-icon class=\"text-xl\">arrow_drop_down</app-icon>\n                </button>\n                <mat-menu #statusMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"approve(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\"\n                                >event_available</app-icon\n                            >\n                            <div>Approve Desk</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"reject(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">event_busy</app-icon>\n                            <div>Decline Desk</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n            <ng-template #option_template let-data=\"data\" let-row=\"row\">\n                <button\n                    matRipple\n                    class=\"rounded-3xl px-2 py-1 text-white flex items-center space-x-2\"\n                    [matMenuTriggerFor]=\"checkinMenu\"\n                    [class.bg-neutral-600]=\"!data\"\n                    [class.bg-success]=\"data\"\n                >\n                    <div class=\"ml-2\">{{ data ? 'Yes' : 'No' }}</div>\n                    <app-icon class=\"text-xl\">arrow_drop_down</app-icon>\n                </button>\n                <mat-menu #checkinMenu=\"matMenu\">\n                    <button mat-menu-item (click)=\"checkin(row, true)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">check</app-icon>\n                            <div>Check-in</div>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"checkin(row, false)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon class=\"text-2xl\">cancel</app-icon>\n                            <div>Check-out</div>\n                        </div>\n                    </button>\n                </mat-menu>\n            </ng-template>\n        </div>\n\n        <button\n            btn\n            matRipple\n            class=\"absolute bottom-2 left-2 w-32 mx-auto my-4\"\n            *ngIf=\"!loading && (has_more_pages | async)\"\n            (click)=\"loadMore()\"\n        >\n            Load More\n        </button>\n        <button\n            icon\n            matRipple\n            class=\"absolute bottom-2 right-2 bg-white shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly has_more_pages = this._state.has_more_pages;\n    public readonly bookings = this._state.bookings.pipe(\n        map((i) =>\n            i.map((booking) => ({\n                ...booking,\n                end: booking.date + booking.duration * 60 * 1000,\n            }))\n        )\n    );\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n    public readonly loadMore = () => this._state.nextPage();\n\n    public readonly checkin = (d, s?) =>\n        this.runMethod('checkin', async () => {\n            await this._state.checkinDesk(d, s);\n            d.checked_in = s ?? true;\n        });\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    public get time_format() {\n        return this._settings.time_format;\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _settings: SettingsService\n    ) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-2 right-2\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    class=\"white\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white dark:bg-neutral-700 shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends AsyncHandler implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this._desks_state.setOptions({ use_api: true });\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                const level = this._org.levelWithID(opts.zones);\n                if (level) this._state.setLevel(level.id);\n                this._desks_state.setOptions({\n                    date: opts.date || Date.now(),\n                    all_day: true,\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n    unique,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\nconst QR_CODES = {};\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <div class=\"w-full h-4\"></div>\n        <div\n            class=\"w-full h-full overflow-auto relative px-4 pb-4\"\n            (dragenter)=\"handleDrag('enter', $event)\"\n            (window:dragend)=\"handleDrag('end', $event)\"\n        >\n            <custom-table\n                class=\"min-w-[72rem] block\"\n                [dataSource]=\"desks\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'map_id',\n                    'bookable',\n                    'name',\n                    'groups',\n                    'features',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'ID',\n                    'Bookable',\n                    'Name',\n                    'Groups',\n                    'Features',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '6r', '12r', 'flex', '16r', '10r']\"\n                [template]=\"{\n                    map_id: text_edit_template,\n                    name: text_edit_template,\n                    bookable: bookable_edit_template,\n                    groups: list_edit_template,\n                    features: list_edit_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desks'\n                        : 'No desks for selected level'\n                \"\n                [pagination]=\"true\"\n                [page_size]=\"20\"\n            ></custom-table>\n            <ng-template\n                #list_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <item-list-field\n                    class=\"w-full\"\n                    hide-outline\n                    [placeholder]=\"\n                        key === 'groups' ? 'User Groups' : 'Features'\n                    \"\n                    [name]=\"key\"\n                    [ngModel]=\"\n                        (changes[row.id] ? changes[row.id][key] : null) || data\n                    \"\n                    (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                >\n                </item-list-field>\n            </ng-template>\n            <ng-template\n                #text_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <div class=\"w-full h-12\" hide-outline>\n                    <mat-form-field class=\"h-12 w-full\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [placeholder]=\"key\"\n                            [name]=\"key\"\n                            [ngModel]=\"\n                                (changes[row.id]\n                                    ? changes[row.id][key]\n                                    : null) || data\n                            \"\n                            (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                        />\n                    </mat-form-field>\n                </div>\n            </ng-template>\n            <ng-template #bookable_edit_template let-data=\"data\" let-row=\"row\">\n                <div class=\"flex items-center justify-center pl-4\">\n                    <mat-checkbox\n                        [ngModel]=\"changes[row.id]?.bookable ?? data\"\n                        (ngModelChange)=\"\n                            setRowValue(row.id, 'bookable', $event)\n                        \"\n                    ></mat-checkbox>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <div\n                        class=\"p-2 text-2xl text-pending\"\n                        [class.opacity-0]=\"!changes[row.id]\"\n                        matTooltip=\"Desk has unsaved changes\"\n                    >\n                        <app-icon>warning</app-icon>\n                    </div>\n                    <button icon (click)=\"removeDesk(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        [matMenuTriggerFor]=\"menu\"\n                        (click)=\"loadQrCode(row)\"\n                    >\n                        <app-icon>qr_code</app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img class=\"w-48\" [src]=\"row.qr_code\" />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button btn matRipple class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n            <div\n                class=\"fixed bottom-2 left-1/2 transform -translate-x-1/2 p-4 rounded bg-white shadow\"\n                *ngIf=\"changed > 0\"\n            >\n                <p class=\"mb-2 text-xl\">\n                    {{ changed }} Desk(s) with unsaved changes\n                </p>\n                <div class=\"flex items-center justify-center\">\n                    <button save btn matRipple (click)=\"save()\">\n                        Save Changes\n                    </button>\n                </div>\n            </div>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-white bg-opacity-60\"\n                *ngIf=\"loading\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n            <div\n                *ngIf=\"dragging\"\n                class=\"absolute inset-0 bg-black/60 flex items-center justify-center\"\n            >\n                <div class=\"bg-white p-4 rounded shadow\">\n                    <div\n                        class=\"border-4 border-gray-300 border-dashed rounded flex flex-col items-center justify-center w-64 h-64\"\n                    >\n                        Drop CSV file to add desks\n                    </div>\n                </div>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent extends AsyncHandler {\n    public changes = {};\n    public loading: string;\n    public dragging = false;\n    public readonly filters = this._state.filters;\n    public readonly desks = combineLatest([\n        this._state.desks,\n        this._state.new_desks,\n    ]).pipe(map(([d, n]) => d.concat(n)));\n\n    public get changed() {\n        return (\n            (Object.keys(this.changes).length || 0) +\n            (this._state.new_desk_count || 0)\n        );\n    }\n\n    public setRowValue(id: string, key: string, value: any) {\n        if (!this.changes[id]) this.changes[id] = {};\n        this.changes[id][key] = value;\n    }\n\n    public async removeDesk(desk: Desk) {\n        const resp = await openConfirmModal(\n            {\n                title: 'Remove desk',\n                content: `Remove desk ${desk.name}?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.close();\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.filter((_) => _.id !== desk.id);\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        this.loading = 'Removing desk...';\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.setFilters({});\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = unique(\n            desks.map((_) =>\n                new Desk({ ..._, ...(this.changes[_.id] || {}) }).toJSON()\n            ),\n            'id'\n        );\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                const msg =\n                    e?.status === 403\n                        ? 'You do not have the required permissions to save desk changes.'\n                        : e.message || e;\n                notifyError(`Error saving desk data. Error: ${msg}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.clearNewDesks();\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public loadQrCode(item: any) {\n        item.qr_code = generateQRCode(\n            `${\n                location.origin\n            }/workplace/#/book/code?asset_id=${encodeURIComponent(item.id)}`\n        );\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        this.loading = 'Loading CSV file...';\n        this.dragging = false;\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n        this.loading = '';\n    }\n\n    public handleDrag(type: 'enter' | 'leave' | 'end', event: DragEvent) {\n        this.dragging = type === 'enter';\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    randomInt,\n} from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { take } from 'rxjs/operators';\nimport { DeskRestrictionModalComponent } from './desk-restriction-modal.component';\n\n@Component({\n    selector: '[app-new-desks]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <div class=\"flex items-center w-full py-4 px-8 space-x-2\">\n                    <h2 class=\"text-2xl font-medium\">Desk Bookings</h2>\n                    <div class=\"flex-1 w-px\"></div>\n                    <searchbar\n                        class=\"mr-2\"\n                        [model]=\"(filters | async)?.search\"\n                        (modelChange)=\"setFilters({ search: $event })\"\n                    ></searchbar>\n                    <button\n                        btn\n                        matRipple\n                        class=\"space-x-2\"\n                        (click)=\"newDeskBooking()\"\n                    >\n                        <div>New Booking</div>\n                        <app-icon>add</app-icon>\n                    </button>\n                </div>\n                <div class=\"w-full flex items-center px-8 space-x-2\">\n                    <mat-form-field appearance=\"outline\" class=\"h-[3.5rem]\">\n                        <mat-select\n                            multiple\n                            [ngModel]=\"(filters | async)?.zones\"\n                            (ngModelChange)=\"updateZones($event)\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                    <div class=\"border-l h-full !ml-8 !mr-4\"></div>\n                    <div class=\"flex-1 w-px\"></div>\n                    <ng-container *ngIf=\"path === 'events'\">\n                        <date-options\n                            (dateChange)=\"setDate($event)\"\n                        ></date-options>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            matTooltip=\"Refresh List\"\n                            class=\"ml-2 rounded border border-gray-200\"\n                            (click)=\"refresh()\"\n                            [disabled]=\"loading | async\"\n                        >\n                            <app-icon>refresh</app-icon>\n                        </button>\n                    </ng-container>\n                    <ng-container *ngIf=\"path === 'manage'\">\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary text-white rounded\"\n                            (click)=\"newDesk()\"\n                            matTooltip=\"New Desk\"\n                        >\n                            <app-icon>add</app-icon>\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary relative text-white rounded\"\n                            matTooltip=\"Upload Desks CSV\"\n                        >\n                            <app-icon>cloud_upload</app-icon>\n                            <input\n                                type=\"file\"\n                                class=\"absolute inset-0 opacity-0\"\n                                (change)=\"loadCSVData($event)\"\n                            />\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary text-white rounded\"\n                            (click)=\"downloadTemplate()\"\n                            matTooltip=\"Download Template Desk CSV\"\n                        >\n                            <app-icon>download</app-icon>\n                        </button>\n                        <button\n                            btn\n                            icon\n                            matRipple\n                            class=\"bg-primary text-white rounded\"\n                            (click)=\"manageRestrictions()\"\n                            matTooltip=\"Desk Restrictions\"\n                        >\n                            <app-icon>lock_open</app-icon>\n                        </button>\n                    </ng-container>\n                </div>\n                <div class=\"flex-1 h-1/2 w-full relative overflow-auto px-4\">\n                    <router-outlet></router-outlet>\n                </div>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"(loading | async) && path === 'events'\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n        `,\n    ],\n})\nexport class NewDesksComponent\n    extends AsyncHandler\n    implements OnInit, OnDestroy\n{\n    public readonly loading = this._state.loading;\n    public path: string;\n    /** List of levels for the active building */\n    public readonly filters = this._state.filters;\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    public readonly setFilters = (o) => this._state.setFilters(o);\n    public readonly refresh = () => this._state.refresh();\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: DesksStateService,\n        private _router: Router,\n        private _route: ActivatedRoute,\n        private _dialog: MatDialog,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.refresh();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                    console.log('Path:', this.path);\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n\n    public newDeskBooking() {\n        const ref = this._dialog.open(DeskBookModalComponent, {});\n        ref.afterClosed().subscribe((_) => {\n            this._state.refresh();\n        });\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(DeskRestrictionModalComponent, {});\n    }\n\n    public newDesk() {\n        this._state.addDesks([new Desk({ id: `desk-${randomInt(999_999)}` })]);\n        notifySuccess(\n            'New desk added to local data. Make sure to save the desk before using it.'\n        );\n    }\n\n    public downloadTemplate() {\n        const desk: any = new Desk({\n            id: 'desk-123',\n            name: 'Test Desk',\n            bookable: true,\n            groups: ['test-desk-group', 'desk-bookers'],\n            features: ['Standing Desk', 'Dual Monitor'],\n        }).toJSON();\n        const data = jsonToCsv([desk]);\n        downloadFile('desk-template.csv', data);\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { NewDeskFormDetailsComponent } from 'apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { DeskRestrictionModalComponent } from './desk-restriction-modal.component';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { NewDesksComponent } from './new-desks.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: 'new',\n        component: NewDesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [\n        NewDesksComponent,\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n        NewDeskFormDetailsComponent,\n        DeskBookModalComponent,\n        DeskRestrictionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"x_google_ignoreList":[]}