{"version":3,"mappings":"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","names":["i0","ctx_r4","ctx_r6","DesksTopbarComponent","BaseClass","constructor","_desks","_org","_route","_router","super","this","active_levels","filters","date","setFilters","o","zones","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","ngOnInit","initialised","pipe","first","_","toPromise","subscription","queryParamMap","subscribe","params","has","get","split","length","updateZones","level","levelWithID","building","buildings","find","bld","id","parent_id","setDate","Date","approve","reject","manage","url","includes","levels","__awaiter","take","n","_a","filter","zone","lvl","push","newDesk","addDesks","Desk","randomInt","notifySuccess","loadCSVData","event","data","loadTextFileFromInputEvent","catch","m","e","notifyError","list","csvToJson","map","Object","console","error","booking","showBooking","approveDesk","rejectDesk","selectors","ctx","DesksComponent","_state","loading","startPolling","events","NavigationEnd","url_parts","i","path","parts","t","ngOnDestroy","stopPolling","ctx_r18","ctx_r20","ctx_r21","DeskBookingsComponent","bookings","rejectAllDesks","d","runMethod","checkinDesk","name","fn","DeskMapViewComponent","_desk","_desks_state","map_url","map_styles","map_positions","map_actions","map_features","u","setOptions","host","opts","setLevel","ExploreDesksService","ctx_r14","ctx_r19","ctx_r28","ctx_r30","ctx_r32","ROUTES","component","children","combineLatest","desks","new_desks","concat","changed","keys","changes","new_desk_count","save","updated_desks","toJSON","updateMetadata","description","details","message","dragging","handleDrag","type","DesksManageComponent","$event","redirectTo","DesksModule","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule"],"sources":["./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport { BaseClass, csvToJson, loadTextFileFromInputEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                [ngModel]=\"(filters | async).zones[0]\"\n                (ngModelChange)=\"updateZones([$event])\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option value=\"All\">All Levels</mat-option>\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <button mat-button *ngIf=\"manage\" class=\"mx-2 w-32\" (click)=\"newDesk()\">New Desk</button>\n        <button mat-button *ngIf=\"manage\" class=\"relative w-32\">\n            Upload CSV\n            <input\n                type=\"file\"\n                class=\"absolute inset-0 opacity-0\"\n                (change)=\"loadCSVData($event)\"\n            />\n        </button>\n        <div class=\"flex-1 w-2\"></div>\n        <searchbar\n            class=\"mr-2\"\n            [model]=\"(filters | async)?.search\"\n            (modelChange)=\"setFilters({ search: $event })\"\n        ></searchbar>\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends BaseClass implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n\n    public manage = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url.includes('manage');\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n    }\n\n    public newDesk() {\n        this._desks.addDesks([new Desk({ id: `desk-${randomInt(999_999)}` })]);\n        notifySuccess('New desk added to local data. Make sure to save the desk before using it.')\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._desks.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Desks\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends BaseClass implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <div class=\"overflow-auto h-full w-full\">\n            <custom-table\n                class=\"min-w-[76rem]\"\n                [dataSource]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'user_name',\n                    'group',\n                    'date',\n                    'status',\n                    'approver_name',\n                    'checked_in',\n                    'access',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Person',\n                    'Group',\n                    'Date',\n                    'Status',\n                    'Approver',\n                    'Checked In',\n                    'Access',\n                    ' '\n                ]\"\n                [column_size]=\"['flex', '', '12r', '', '10r', '', '', '12r']\"\n                [template]=\"{\n                    user_name: user_template,\n                    date: date_template,\n                    status: status_template,\n                    checked_in: bool_template,\n                    access: bool_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desk bookings'\n                        : 'There are no desk booking for the currently selected date.'\n                \"\n            ></custom-table>\n            <ng-template #date_template let-data=\"data\">\n                {{ data | date }} at {{ data | date: 'shortTime' }}\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                {{\n                    row.user_name ||\n                        row.user_email ||\n                        row.booked_by_name ||\n                        row.booked_by_email\n                }}\n            </ng-template>\n            <ng-template #status_template let-data=\"data\">\n                <span\n                    class=\"capitalize text-white px-2 py-1 rounded border border-gray-200\"\n                    [class.bg-success]=\"data === 'approved'\"\n                    [class.bg-pending]=\"data === 'tentative'\"\n                    [class.bg-error]=\"\n                        data === 'cancelled' || data === 'declined'\n                    \"\n                >\n                    {{ data }}\n                </span>\n            </ng-template>\n            <ng-template #bool_template let-data=\"data\">\n                {{ data ? 'Yes' : 'No' }}\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <action-icon (click)=\"checkin(row)\">how_to_reg</action-icon>\n                    <button\n                        mat-icon-button\n                        (click)=\"approve(row)\"\n                        matTooltip=\"Approve Desk\"\n                    >\n                        <app-icon>event_available</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        (click)=\"reject(row)\"\n                        matTooltip=\"Reject Desk\"\n                    >\n                        <app-icon>event_busy</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        [disabled]=\"!row.extension_data?.checkin_qr_code\"\n                        [matMenuTriggerFor]=\"menu\"\n                        matTooltip=\"View Desk QR code\"\n                    >\n                        <app-icon *ngIf=\"row.extension_data?.checkin_qr_code\">\n                            qr_code\n                        </app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img\n                                class=\"w-48\"\n                                [src]=\"row.extension_data?.checkin_qr_code\"\n                            />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button mat-button class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n        </div>\n        <button\n            mat-icon-button\n            class=\"absolute bottom-2 right-2 bg-white shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n\n    public readonly checkin = (d) =>\n        this.runMethod('checkin', async () => this._state.checkinDesk(d));\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-0 right-0\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                const level = this._org.levelWithID(opts.zones);\n                if (level) this._state.setLevel(level.id);\n                this._desks_state.setOptions({\n                    date: opts.date ? new Date(opts.date) : new Date(),\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport {\n    BaseClass,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    randomInt\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <div\n            class=\"w-full h-full overflow-auto relative\"\n            (dragenter)=\"handleDrag('enter', $event)\"\n            (window:dragend)=\"handleDrag('end', $event)\"\n        >\n            <custom-table\n                class=\"min-w-[72rem] block\"\n                [dataSource]=\"desks\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'id',\n                    'bookable',\n                    'name',\n                    'groups',\n                    'features',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'ID',\n                    'Bookable',\n                    'Name',\n                    'Groups',\n                    'Features',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '6r', '12r', 'flex', '16r', '10r']\"\n                [template]=\"{\n                    id: text_edit_template,\n                    name: text_edit_template,\n                    bookable: bookable_edit_template,\n                    groups: list_edit_template,\n                    features: list_edit_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desks'\n                        : 'No desks for selected level'\n                \"\n            ></custom-table>\n            <ng-template\n                #list_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <item-list-field\n                    class=\"w-full\"\n                    hide-outline\n                    [placeholder]=\"\n                        key === 'groups' ? 'User Groups' : 'Features'\n                    \"\n                    [ngModel]=\"\n                        (changes[row.id] ? changes[row.id][key] : null) ?? data\n                    \"\n                    (ngModelChange)=\"\n                        changes[row.id] && changes[row.id][key]\n                            ? ''\n                            : (changes[row.id] = {});\n                        changes[row.id][key] = $event\n                    \"\n                >\n                </item-list-field>\n            </ng-template>\n            <ng-template\n                #text_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <div class=\"w-full h-12\" hide-outline>\n                    <mat-form-field class=\"h-12 w-full\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [placeholder]=\"key\"\n                            [ngModel]=\"\n                                (changes[row.id]\n                                    ? changes[row.id][key]\n                                    : null) ?? data\n                            \"\n                            (ngModelChange)=\"\n                                changes[row.id] && changes[row.id][key]\n                                    ? ''\n                                    : (changes[row.id] = {});\n                                changes[row.id][key] = $event\n                            \"\n                        />\n                    </mat-form-field>\n                </div>\n            </ng-template>\n            <ng-template #bookable_edit_template let-data=\"data\" let-row=\"row\">\n                <div class=\"flex items-center justify-center pl-4\">\n                    <mat-checkbox\n                        [ngModel]=\"changes[row.id]?.bookable ?? data\"\n                        (ngModelChange)=\"\n                            changes[row.id]\n                                ? (changes[row.id].bookable = $event)\n                                : (changes[row.id] = { bookable: $event })\n                        \"\n                    ></mat-checkbox>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <div\n                        class=\"p-2 text-2xl text-pending\"\n                        [class.opacity-0]=\"!changes[row.id]\"\n                        matTooltip=\"Desk has unsaved changes\"\n                    >\n                        <app-icon>warning</app-icon>\n                    </div>\n                    <button mat-icon-button (click)=\"removeDesk(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        mat-icon-button\n                        [disabled]=\"!row.qr_code\"\n                        [matMenuTriggerFor]=\"menu\"\n                    >\n                        <app-icon *ngIf=\"row.qr_code\">qr_code</app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img class=\"w-48\" [src]=\"row.qr_code\" />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button mat-button class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n            <div\n                class=\"fixed bottom-2 left-1/2 transform -translate-x-1/2 p-4 rounded bg-white shadow\"\n                *ngIf=\"changed > 0\"\n            >\n                <p class=\"mb-2 text-xl\">\n                    {{ changed }} Desk(s) with unsaved changes\n                </p>\n                <div class=\"flex items-center justify-center\">\n                    <button save mat-button (click)=\"save()\">\n                        Save Changes\n                    </button>\n                </div>\n            </div>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-white bg-opacity-60\"\n                *ngIf=\"loading\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n            <div\n                *ngIf=\"dragging\"\n                class=\"absolute inset-0 bg-black/60 flex items-center justify-center\"\n            >\n                <div class=\"bg-white p-4 rounded shadow\">\n                    <div\n                        class=\"border-4 border-gray-300 border-dashed rounded flex flex-col items-center justify-center w-64 h-64\"\n                    >\n                        Drop CSV file to add desks\n                    </div>\n                </div>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent extends BaseClass {\n    public changes = {};\n    public loading: string;\n    public dragging = false;\n    public readonly filters = this._state.filters;\n    public readonly desks = combineLatest([\n        this._state.desks,\n        this._state.new_desks,\n    ]).pipe(map(([d, n]) => d.concat(n)));\n\n    public get changed() {\n        return Object.keys(this.changes).length + this._state.new_desk_count;\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.map((_) =>\n            new Desk({ ..._, ...(this.changes[_.id] || {}) }).toJSON()\n        );\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this.loading = '';\n        this.changes = {};\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        this.loading = 'Loading CSV file...';\n        this.dragging = false;\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n        this.loading = '';\n    }\n\n    public handleDrag(type: 'enter' | 'leave' | 'end', event: DragEvent) {\n        this.dragging = type === 'enter';\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: 'events' },\n];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"sourceRoot":"webpack:///","file":"apps_concierge_src_app_desks_desks_module_ts.js"}