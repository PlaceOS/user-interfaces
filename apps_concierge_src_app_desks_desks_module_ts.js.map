{"version":3,"sources":["./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"names":["DesksTopbarComponent","_desks","_org","_route","_router","super","levels","this","active_levels","filters","setDate","date","setFilters","o","updateZones","zones","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","initialised","pipe","first","_","toPromise","subscription","queryParamMap","subscribe","params","has","get","split","length","level","levelWithID","building","buildings","find","bld","id","parent_id","Date","approve","reject","take","filter","zone","lvl","push","booking","approveDesk","rejectDesk","DesksComponent","_state","loading","startPolling","events","e","url_parts","url","path","parts","ngOnDestroy","stopPolling","DeskBookingsComponent","bookings","rejectAll","rejectAllDesks","checkin","d","runMethod","checkinDesk","name","fn","catch","i","DeskMapViewComponent","_desk","_desks_state","map_url","styles","map_styles","positions","map_positions","actions","map_actions","features","map_features","setHost","u","setOptions","host","opts","ROUTES","component","children","DesksManageComponent","changes","desks","Object","keys","updated_desks","map","toJSON","description","details","message","redirectTo","DesksModule"],"mappings":"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","file":"apps_concierge_src_app_desks_desks_module_ts.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [ngModel]=\"(filters | async).zones || []\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option value=\"All\">All Levels</mat-option>\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <div class=\"flex-1 w-2\"></div>\n        <searchbar\n            class=\"mr-2\"\n            [model]=\"(filters | async)?.search\"\n            (modelChange)=\"setFilters({ search: $event })\"\n        ></searchbar>\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends BaseClass implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Desks\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends BaseClass implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <custom-table\n            class=\"min-w-[76rem]\"\n            [dataSource]=\"bookings\"\n            [filter]=\"(filters | async)?.search\"\n            [columns]=\"[\n                'user_name',\n                'group',\n                'date',\n                'status',\n                'approver_name',\n                'checked_in',\n                'access',\n                'actions'\n            ]\"\n            [display_column]=\"[\n                'Person',\n                'Group',\n                'Date',\n                'Status',\n                'Approver',\n                'Checked In',\n                'Access',\n                ' '\n            ]\"\n            [column_size]=\"['flex', '', '12r', '', '10r', '', '', '12r']\"\n            [template]=\"{\n                user_name: user_template,\n                date: date_template,\n                status: status_template,\n                checked_in: bool_template,\n                access: bool_template,\n                actions: action_template\n            }\"\n            [empty]=\"\n                (filters | async)?.search\n                    ? 'No matching desk bookings'\n                    : 'There are no desk booking for the currently selected date.'\n            \"\n        ></custom-table>\n        <ng-template #date_template let-data=\"data\">\n            {{ data | date }} at {{ data | date: 'shortTime' }}\n        </ng-template>\n        <ng-template #user_template let-row=\"row\">\n            {{ row.user_name || row.user_email || row.booked_by_name || row.booked_by_email }}\n        </ng-template>\n        <ng-template #status_template let-data=\"data\">\n            <span\n                class=\"capitalize text-white px-2 py-1 rounded border border-gray-200\"\n                [class.bg-success]=\"data === 'approved'\"\n                [class.bg-pending]=\"data === 'tentative'\"\n                [class.bg-error]=\"data === 'cancelled' || data === 'declined'\"\n            >\n                {{ data }}\n            </span>\n        </ng-template>\n        <ng-template #bool_template let-data=\"data\">\n            {{ data ? 'Yes' : 'No' }}\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"flex items-center justify-end space-x-2\">\n                <action-icon (click)=\"checkin(row)\">how_to_reg</action-icon>\n                <button mat-icon-button (click)=\"approve(row)\">\n                    <app-icon>event_available</app-icon>\n                </button>\n                <button mat-icon-button (click)=\"reject(row)\">\n                    <app-icon>event_busy</app-icon>\n                </button>\n                <button\n                    mat-icon-button\n                    [disabled]=\"!row.extension_data?.checkin_qr_code\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <app-icon *ngIf=\"row.extension_data?.checkin_qr_code\"\n                        >qr_code</app-icon\n                    >\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <div class=\"p-2 mx-4 my-2 rounded-lg border border-black\">\n                        <img\n                            class=\"w-48\"\n                            [src]=\"row.extension_data?.checkin_qr_code\"\n                        />\n                    </div>\n                    <div mat-menu-item class=\"underline\">\n                        <button mat-button class=\"w-full\">Print QR Code</button>\n                    </div>\n                </mat-menu>\n            </div>\n        </ng-template>\n        <button\n            mat-icon-button\n            class=\"absolute bottom-2 right-2 bg-white shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                overflow: hidden;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n\n    public readonly checkin = (d) =>\n        this.runMethod('checkin', async () => this._state.checkinDesk(d));\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { BaseClass } from '@placeos/common';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-0 right-0\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends BaseClass implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                this._desks_state.setOptions({\n                    date: opts.date ? new Date(opts.date) : new Date(),\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { notifyError, notifySuccess } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <custom-table\n            class=\"min-w-[72rem] block\"\n            [dataSource]=\"desks\"\n            [filter]=\"(filters | async)?.search\"\n            [columns]=\"[\n                'id',\n                'bookable',\n                'name',\n                'groups',\n                'features',\n                'actions'\n            ]\"\n            [display_column]=\"[\n                'ID',\n                'Bookable',\n                'Name',\n                'Groups',\n                'Features',\n                ' '\n            ]\"\n            [column_size]=\"['8r', '6r', '12r', 'flex', '16r', '10r']\"\n            [template]=\"{\n                id: text_edit_template,\n                name: text_edit_template,\n                bookable: bookable_edit_template,\n                groups: list_edit_template,\n                features: list_edit_template,\n                actions: action_template\n            }\"\n            [empty]=\"\n                (filters | async)?.search\n                    ? 'No matching desks'\n                    : 'No desks for selected level'\n            \"\n        ></custom-table>\n        <ng-template\n            #list_edit_template\n            let-data=\"data\"\n            let-row=\"row\"\n            let-key=\"key\"\n        >\n            <item-list-field\n                class=\"w-full\"\n                hide-outline\n                [placeholder]=\"key === 'groups' ? 'User Groups' : 'Features'\"\n                [ngModel]=\"(changes[row.id] ? changes[row.id][key] : null) ?? data\"\n                (ngModelChange)=\"\n                    changes[row.id] && changes[row.id][key]\n                        ? ''\n                        : (changes[row.id] = {});\n                    changes[row.id][key] = $event\n                \"\n            >\n            </item-list-field>\n        </ng-template>\n        <ng-template\n            #text_edit_template\n            let-data=\"data\"\n            let-row=\"row\"\n            let-key=\"key\"\n        >\n            <div class=\"w-full h-12\" hide-outline>\n                <mat-form-field class=\"h-12 w-full\" appearance=\"outline\">\n                    <input\n                        matInput\n                        [placeholder]=\"key\"\n                        [ngModel]=\"(changes[row.id] ? changes[row.id][key] : null) ?? data\"\n                        (ngModelChange)=\"\n                            changes[row.id] && changes[row.id][key]\n                                ? ''\n                                : (changes[row.id] = {});\n                            changes[row.id][key] = $event\n                        \"\n                    />\n                </mat-form-field>\n            </div>\n        </ng-template>\n        <ng-template #bookable_edit_template let-data=\"data\" let-row=\"row\">\n            <div class=\"flex items-center justify-center pl-4\">\n                <mat-checkbox\n                    [ngModel]=\"changes[row.id]?.bookable ?? data\"\n                    (ngModelChange)=\"\n                        changes[row.id]\n                            ? (changes[row.id].bookable = $event)\n                            : (changes[row.id] = { bookable: $event })\n                    \"\n                ></mat-checkbox>\n            </div>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"flex items-center justify-end space-x-2\">\n                <div\n                    class=\"p-2 text-2xl text-pending\"\n                    [class.opacity-0]=\"!changes[row.id]\"\n                    matTooltip=\"Desk has unsaved changes\"\n                >\n                    <app-icon>warning</app-icon>\n                </div>\n                <button mat-icon-button (click)=\"removeDesk(row)\">\n                    <app-icon>delete</app-icon>\n                </button>\n                <button\n                    mat-icon-button\n                    [disabled]=\"!row.qr_code\"\n                    [matMenuTriggerFor]=\"menu\"\n                >\n                    <app-icon *ngIf=\"row.qr_code\">qr_code</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <div class=\"p-2 mx-4 my-2 rounded-lg border border-black\">\n                        <img class=\"w-48\" [src]=\"row.qr_code\" />\n                    </div>\n                    <div mat-menu-item class=\"underline\">\n                        <button mat-button class=\"w-full\">Print QR Code</button>\n                    </div>\n                </mat-menu>\n            </div>\n        </ng-template>\n        <div\n            class=\"fixed bottom-2 left-1/2 transform -translate-x-1/2 p-4 rounded bg-white shadow\"\n            *ngIf=\"changed > 0\"\n        >\n            <p class=\"mb-2 text-xl\">\n                {{ changed }} Desk(s) with unsaved changes\n            </p>\n            <div class=\"flex items-center justify-center\">\n                <button save mat-button (click)=\"save()\">Save Changes</button>\n            </div>\n        </div>\n        <div\n            class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-white bg-opacity-60\"\n            *ngIf=\"loading\"\n        >\n            <mat-spinner diameter=\"32\"></mat-spinner>\n            <p>{{ loading }}</p>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent {\n    public changes = {};\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly desks = this._state.desks;\n\n    public get changed() {\n        return Object.keys(this.changes).length;\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.map((_) =>\n            new Desk({ ..._, ...(this.changes[_.id] || {}) }).toJSON()\n        );\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this.loading = '';\n        this.changes = {};\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService\n    ) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: 'events' },\n];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"sourceRoot":"webpack:///"}