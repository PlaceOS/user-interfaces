{"version":3,"file":"apps_concierge_src_app_desks_desks_module_ts.js","mappings":"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","names":["i0","_r9","ctx_r8","setOptions","group","members","ctx_r10","tmp_0_0","ctx_r1","options","tmp_1_0","tmp_2_0","tmp_3_0","tmp_4_0","tmp_5_0","tmp_6_0","tmp_7_0","$event","_r12","ctx_r11","form","patchValue","secondary_resource","ctx_r4","value","_c20","_r14","ctx_r13","ctx_r5","_c23","NewDeskFormDetailsComponent_div_0_section_41_p_8_Template","ctx_r6","ctx_r7","date","duration","NewDeskFormDetailsComponent_div_0_section_1_Template","NewDeskFormDetailsComponent_div_0_div_8_Template","_r17","ctx_r16","NewDeskFormDetailsComponent_div_0_mat_checkbox_37_Template","NewDeskFormDetailsComponent_div_0_div_38_Template","NewDeskFormDetailsComponent_div_0_section_39_Template","NewDeskFormDetailsComponent_div_0_section_41_Template","NewDeskFormDetailsComponent_div_0_section_42_Template","ctx_r0","allow_groups","can_book_for_others","get","allow_all_day","can_book_lockers","tmp_12_0","contains","has_assets","NewDeskFormDetailsComponent","AsyncHandler","building","this","_org","bld","_settings","can_recurr","needs_reason","allow_time_changes","constructor","_state","super","find","EventEmitter","buildings","building_list","levels","active_levels","features","from_id","recurrence_options","o","setFeature","f","e","ngOnChanges","changes","subscription","valueChanges","subscribe","list","length","setBookingAsset","desk","asset_id","undefined","selected_desk","id","asset_name","name","map_id","description","booking_type","zones","zone","parent_id","booking_asset","t","i1","i2","i3","core","Xpm","selectors","inputs","outputs","decls","vars","consts","i18n_0","$localize","NewDeskFormDetailsComponent_div_0_Template","ctx","_r5","save","ctx_r3","loading","DeskBookModalComponent","_booking_form","_dialog_ref","event","BehaviorSubject","_this","_asyncToGenerator","next","postForm","catch","_","notifyError","emit","reason","metadata","notifySuccess","close","template","rf","DeskBookModalComponent_main_7_Template","DeskBookModalComponent_footer_9_Template","DeskBookModalComponent_ng_template_11_Template","_r2","data_r18","row_r19","_r21","row","ctx_r20","remove","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_2_Template","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_4_Template","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_6_Template","DeskRestrictionModalComponent_ng_container_7_main_1_ng_template_8_Template","restrictions","_c0","_c1","_c2","_r8","_r10","_r23","ctx_r22","add","ctx_r24","DeskRestrictionModalComponent_ng_container_7_main_1_Template","DeskRestrictionModalComponent_ng_container_7_footer_2_Template","adding","_r4","row_r28","_r30","ctx_r29","selected","ctx_r27","_r32","ctx_r31","start_date","ctx_r33","end_date","ctx_r34","search","DeskRestrictionModalComponent_ng_template_10_ng_template_14_Template","ctx_r35","ctx_r36","addRestriction","_r25","desk_list","_c3","_c4","_c5","_r26","DeskRestrictionModalComponent","_desks","startOfDay","Date","now","endOfDay","desks","ngOnInit","initialised","pipe","first","toPromise","showMetadata","details","Array","restriction","filter","_this2","take","push","start","valueOf","end","assets","map","_this3","disableClose","updateMetadata","isBefore","DeskRestrictionModalComponent_ng_container_2_Template","DeskRestrictionModalComponent_ng_container_7_Template","DeskRestrictionModalComponent_ng_template_8_Template","DeskRestrictionModalComponent_ng_template_10_Template","level_r7","display_name","newDeskBooking","_r11","newDesk","_r13","ctx_r12","loadCSVData","_r15","ctx_r14","downloadTemplate","manageRestrictions","DesksTopbarComponent","_route","_router","_dialog","filters","manage","is_map","setDate","setFilters","updateZones","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","queryParamMap","params","has","split","level","levelWithID","approve","reject","url","includes","events","_ref","lvl","_x","apply","arguments","addDesks","Desk","randomInt","open","data","loadTextFileFromInputEvent","m","csvToJson","console","error","bookable","groups","toJSON","jsonToCsv","downloadFile","booking","showBooking","approveDesk","_this4","rejectDesk","i4","DesksTopbarComponent_mat_option_5_Template","DesksTopbarComponent_mat_option_6_Template","DesksTopbarComponent_button_8_Template","DesksTopbarComponent_button_9_Template","DesksTopbarComponent_button_10_Template","DesksTopbarComponent_button_11_Template","DesksTopbarComponent_button_12_Template","tmp_8_0","DesksComponent","startPolling","NavigationEnd","url_parts","path","parts","ngOnDestroy","stopPolling","attrs","DesksComponent_mat_progress_bar_7_Template","row_r14","row_r15","user_name","user_email","booked_by_name","booked_by_email","data_r16","data_r17","row_r18","_r22","ctx_r21","checkin","ctx_r23","DeskBookingsComponent_ng_template_14_app_icon_10_Template","extension_data","checkin_qr_code","_r20","DeskBookingsComponent","bookings","rejectAll","rejectAllDesks","d","runMethod","checkinDesk","fn","i","DeskBookingsComponent_ng_template_4_Template","DeskBookingsComponent_ng_template_6_Template","DeskBookingsComponent_ng_template_8_Template","DeskBookingsComponent_ng_template_10_Template","DeskBookingsComponent_ng_template_12_Template","DeskBookingsComponent_ng_template_14_Template","_r0","_r6","DeskMapViewComponent","_desk","_desks_state","map_url","styles","map_styles","positions","map_positions","actions","map_actions","map_features","setHost","u","host","opts","setLevel","ExploreDesksService","zoom","center","restoredCtx","row_r12","key_r13","key","setRowValue","data_r11","row_r17","key_r18","ctx_r19","row_r22","_r24","data_r21","row_r25","_r28","removeDesk","loadQrCode","qr_code","_r31","ctx_r30","changed","ctx_r9","_r33","ctx_r32","DesksManageComponent","Object","keys","new_desk_count","resp","openConfirmModal","title","content","icon","updated_desks","message","unique","status","clearNewDesks","item","generateQRCode","location","origin","encodeURIComponent","dragging","combineLatest","new_desks","n","concat","handleDrag","type","DesksManageComponent_ng_template_4_Template","DesksManageComponent_ng_template_6_Template","DesksManageComponent_ng_template_8_Template","DesksManageComponent_ng_template_10_Template","DesksManageComponent_div_12_Template","DesksManageComponent_div_13_Template","DesksManageComponent_div_14_Template","ROUTES","component","children","redirectTo","DesksModule","oAB","cJS","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","SharedBookingsModule","FormFieldsModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component.ts","./apps/concierge/src/app/desks/desk-book-modal.component.ts","./apps/concierge/src/app/desks/desk-restriction-modal.component.ts","./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BookingFormService } from '@placeos/bookings';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'new-desk-form-details',\n    styles: [],\n    template: `\n        <!-- <div class=\"m-2 bg-yellow-500 p-2 text-center rounded shadow text-sm\">\n            The selected desk hasn't been booked. Please book the desk to be\n            able to check-in.\n        </div> -->\n        <div\n            class=\"p-0 sm:py-4 sm:px-16 divide-y divide-gray-300 space-y-2\"\n            *ngIf=\"form\"\n            [formGroup]=\"form\"\n        >\n            <section class=\"flex items-center\" *ngIf=\"allow_groups\">\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-primary]=\"!(options | async)?.group\"\n                    [class.opacity-60]=\"(options | async)?.group\"\n                    (click)=\"setOptions({ group: false, members: [] })\"\n                >\n                    <app-icon class=\"text-2xl\">person</app-icon>\n                    <div class=\"\" i18n>Single</div>\n                    <div\n                        class=\"absolute h-2 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-gray-200]=\"(options | async)?.group\"\n                        [class.bg-primary]=\"!(options | async)?.group\"\n                    ></div>\n                </button>\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-primary]=\"(options | async)?.group\"\n                    [class.opacity-60]=\"!(options | async)?.group\"\n                    (click)=\"setOptions({ group: true })\"\n                >\n                    <app-icon class=\"text-2xl\">group_add</app-icon>\n                    <div class=\"\" i18n>Group</div>\n                    <div\n                        class=\"absolute h-2 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-gray-200]=\"!(options | async)?.group\"\n                        [class.bg-primary]=\"(options | async)?.group\"\n                    ></div>\n                </button>\n            </section>\n            <section class=\"p-2\" [class.!border-none]=\"allow_groups\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        1\n                    </div>\n                    <div class=\"text-xl\" i18n>Details</div>\n                </h3>\n                <div\n                    class=\"w-full\"\n                    *ngIf=\"can_book_for_others && !(options | async)?.group\"\n                >\n                    <label for=\"title\">Host<span>*</span></label>\n                    <a-user-search-field\n                        formControlName=\"user\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center flex-wrap sm:space-x-2\">\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"title\">Add Title<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"title\"\n                                formControlName=\"title\"\n                                placeholder=\"e.g. Focus Time\"\n                            />\n                            <mat-error i18n\n                                >Booking title is required.</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"date\" i18n>Date<span>*</span></label>\n                        <a-date-field name=\"date\" formControlName=\"date\" i18n>\n                            Date and time must be in the future\n                        </a-date-field>\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n\n                            >Start Time<span>*</span></label\n                        >\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3 relative\">\n                        <label for=\"end-time\" i18n\n                            >End Time<span>*</span></label\n                        >\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"12 * 60\"\n                            [min]=\"60\"\n                            [step]=\"60\"\n                        >\n                        </a-duration-field>\n                        <mat-checkbox\n                            formControlName=\"all_day\"\n                            *ngIf=\"allow_all_day\"\n                            class=\"absolute -top-2 right-0\"\n                            i18n\n                        >\n                            All Day\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"can_book_lockers\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <mat-checkbox\n                            [ngModel]=\"!!form.value.secondary_resource\"\n                            (ngModelChange)=\"\n                                form.patchValue({\n                                    secondary_resource: $event ? 'locker' : ''\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            i18n\n                        >\n                            Require locker\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"(options | async)?.group\">\n                <h3 class=\"space-x-2 flex items-center\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        2\n                    </div>\n                    <div class=\"text-xl\" i18n>Group Members</div>\n                    <div class=\"flex-1 w-px\"></div>\n                </h3>\n                <div class=\"overflow-hidden\">\n                    <a-user-list-field\n                        class=\"mt-4\"\n                        [ngModel]=\"(options | async)?.members || []\"\n                        (ngModelChange)=\"setOptions({ members: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"form.contains('resources')\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 3 : 2 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Desk</div>\n                </h3>\n                <desk-list-field formControlName=\"resources\"></desk-list-field>\n                <p\n                    *ngIf=\"(options | async)?.group\"\n                    class=\"text-center rounded px-2 py-1 bg-yellow-400 shadow text-xs\"\n                >\n                    Desks nearby to the selected desk will booked for group\n                    members\n                </p>\n            </section>\n            <section class=\"p-2\" *ngIf=\"has_assets\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 4 : 3 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Request Asset</div>\n                </h3>\n                <asset-list-field\n                    [date]=\"form.value.date\"\n                    [duration]=\"form.value.duration\"\n                    formControlName=\"assets\"\n                ></asset-list-field>\n            </section>\n        </div>\n    `,\n})\nexport class NewDeskFormDetailsComponent extends AsyncHandler {\n    @Input() public form: FormGroup;\n    @Output() public find = new EventEmitter<void>();\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    /** Selected desk for booking */\n    public selected_desk: Desk;\n    public from_id = false;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public readonly setFeature = (f, e) => this._state.setFeature(f, e);\n\n    public get can_book_for_others() {\n        return this._settings.get('app.desks.can_book_for_others');\n    }\n\n    public get can_book_lockers() {\n        return this._settings.get('app.desks.can_book_lockers');\n    }\n    public get can_recurr() {\n        return this._settings.get('app.desks.recurrence_allowed');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    public get has_assets() {\n        return !!this._settings.get('app.desks.has_assets');\n    }\n\n    public get needs_reason() {\n        return this._settings.get('app.desks.needs_reason') === true;\n    }\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n\n    public get allow_all_day() {\n        return (\n            this.allow_time_changes &&\n            !!this._settings.get('app.desks.allow_all_day')\n        );\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.form && this.form) {\n            this.subscription(\n                'change',\n                this.form.get('resources')?.valueChanges?.subscribe((list) => {\n                    list?.length ? this.setBookingAsset(list[0]) : '';\n                })\n            );\n        }\n    }\n\n    private setBookingAsset(desk: Desk) {\n        this._state.form.patchValue({ asset_id: undefined });\n        if (!desk) return;\n        this.selected_desk = desk;\n        this._state.form.patchValue({\n            asset_id: desk?.id,\n            asset_name: desk.name,\n            map_id: desk?.map_id || desk?.id,\n            description: desk.name,\n            booking_type: 'desk',\n            zones: desk.zone ? [desk.zone?.parent_id, desk.zone?.id] : [],\n            booking_asset: desk,\n        });\n    }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { BookingFormService } from '@placeos/bookings';\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'desk-book-modal',\n    template: `\n        <header>\n            <h2>New Desk Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!(loading | async); else load_state\"\n            class=\"overflow-auto p-4\"\n        >\n            <new-desk-form-details [form]=\"form\"></new-desk-form-details>\n        </main>\n        <footer\n            *ngIf=\"!(loading | async)\"\n            class=\"flex justify-center items-center p-2 border-t border-gray-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading | async }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskBookModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public readonly loading = new BehaviorSubject(false);\n\n    public get form() {\n        return this._booking_form.form;\n    }\n\n    constructor(\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<DeskBookModalComponent>\n    ) {}\n\n    public async save() {\n        this.loading.next(true);\n        const event = await this._booking_form.postForm().catch((_) => {\n            notifyError(_);\n            this.loading.next(false);\n            throw _;\n        });\n        this.event.emit({ reason: 'done', metadata: event });\n        notifySuccess('Successfully created booking');\n        this._dialog_ref.close();\n        this.loading.next(false);\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { notifyError, notifySuccess } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { endOfDay, isBefore, startOfDay } from 'date-fns';\nimport { first, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\nimport { AssetRestriction } from '@placeos/bookings';\n\n@Component({\n    selector: 'desk-restriction-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h2>\n                <ng-container *ngIf=\"adding\">Add</ng-container> Desk\n                Restrictions\n            </h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main\n                class=\"h-[65vh] overflow-auto\"\n                *ngIf=\"!adding; else add_state\"\n            >\n                <custom-table\n                    class=\"block w-[calc(80vw)]\"\n                    [dataSource]=\"restrictions\"\n                    [columns]=\"['start', 'duration', 'assets', 'actions']\"\n                    [display_column]=\"['Date', 'Period', 'No. of Desks', ' ']\"\n                    [template]=\"{\n                        start: date_template,\n                        duration: duration_template,\n                        assets: count_template,\n                        actions: actions_template\n                    }\"\n                    empty=\"No desk restrictions set\"\n                ></custom-table>\n                <ng-template #date_template let-data=\"data\">\n                    {{ data | date: 'mediumDate' }}\n                </ng-template>\n                <ng-template #duration_template let-data=\"data\">\n                    {{ data }}\n                </ng-template>\n                <ng-template #count_template let-data=\"data\">\n                    {{ data?.length || '0' }} desk(s)\n                </ng-template>\n                <ng-template #actions_template let-row=\"row\">\n                    <button btn icon matRipple (click)=\"remove(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n                *ngIf=\"!adding\"\n            >\n                <button btn matRipple class=\"inverse\" (click)=\"add()\">\n                    Add Restriction\n                </button>\n                <button btn matRipple (click)=\"save()\">\n                    Save Restrictions\n                </button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <div\n                class=\"flex flex-col items-center justify-center w-[20rem] h-[16rem] space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Saving desk restriction changes...</p>\n            </div>\n        </ng-template>\n        <ng-template #add_state>\n            <main class=\"flex flex-col h-[65vh] overflow-auto\">\n                <div class=\"flex items-center space-x-2 px-2 pt-2\">\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <mat-date-range-input [rangePicker]=\"picker\">\n                            <input\n                                matStartDate\n                                placeholder=\"Start date\"\n                                [(ngModel)]=\"start_date\"\n                            />\n                            <input\n                                matEndDate\n                                placeholder=\"End date\"\n                                [(ngModel)]=\"end_date\"\n                            />\n                        </mat-date-range-input>\n                        <mat-datepicker-toggle\n                            matIconSuffix\n                            [for]=\"picker\"\n                        ></mat-datepicker-toggle>\n                        <mat-date-range-picker #picker></mat-date-range-picker>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <app-icon matPrefix>search</app-icon>\n                        <input\n                            matInput\n                            [(ngModel)]=\"search\"\n                            placeholder=\"Filter desks\"\n                        />\n                    </mat-form-field>\n                </div>\n                <custom-table\n                    class=\"block w-[calc(65vw)]\"\n                    [dataSource]=\"desk_list\"\n                    [filter]=\"search\"\n                    [columns]=\"['toggle', 'name', 'map_id']\"\n                    [display_column]=\"[' ', 'name', 'MapID']\"\n                    [template]=\"{\n                        toggle: toggle_template\n                    }\"\n                    empty=\"No desk restrictions set\"\n                ></custom-table>\n                <ng-template #toggle_template let-row=\"row\">\n                    <mat-checkbox\n                        [(ngModel)]=\"selected[row.id || row.map_id]\"\n                    ></mat-checkbox>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n            >\n                <button\n                    btn\n                    matRipple\n                    class=\"inverse w-32\"\n                    (click)=\"adding = false\"\n                >\n                    Back\n                </button>\n                <button btn matRipple (click)=\"addRestriction()\" class=\"w-32\">\n                    Add to Restrictions\n                </button>\n            </footer>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskRestrictionModalComponent {\n    public loading = false;\n    public adding = false;\n    public search = '';\n    public selected: Record<string, boolean> = {};\n    public start_date = startOfDay(Date.now());\n    public end_date = endOfDay(Date.now());\n    public restrictions: AssetRestriction[] = [];\n    public readonly desk_list = this._desks.desks;\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog_ref: MatDialogRef<DeskRestrictionModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        showMetadata(this._org.building.id, 'desk_restrictions').subscribe(\n            ({ details }) => {\n                this.restrictions = details instanceof Array ? details : [];\n            }\n        );\n    }\n\n    public add() {\n        this.search = '';\n        this.start_date = startOfDay(Date.now());\n        this.end_date = endOfDay(Date.now());\n        this.selected = {};\n        this.adding = true;\n    }\n\n    public remove(restriction: AssetRestriction) {\n        this.restrictions = this.restrictions.filter((_) => _ !== restriction);\n    }\n\n    public async addRestriction() {\n        const desks = await this.desk_list.pipe(take(1)).toPromise();\n        this.restrictions.push({\n            start: this.start_date.valueOf(),\n            end: this.end_date.valueOf(),\n            assets: desks.filter((_) => this.selected[_.id]).map((_) => _.id),\n        });\n        this.adding = false;\n    }\n\n    public async save() {\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        await updateMetadata(this._org.building.id, {\n            name: 'desk_restrictions',\n            description: 'Desk restrictions',\n            details: this.restrictions.filter((_) =>\n                isBefore(Date.now(), _.end)\n            ),\n        })\n            .toPromise()\n            .catch((_) => {\n                this.loading = false;\n                this._dialog_ref.disableClose = false;\n                notifyError('Failed to update desk restrictions');\n                throw _;\n            });\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close();\n        notifySuccess('Successfully updated desk restrictions');\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    csvToJson,\n    downloadFile,\n    jsonToCsv,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { DeskRestrictionModalComponent } from './desk-restriction-modal.component';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"\n                        (filters | async).zones\n                            ? (filters | async).zones[0]\n                            : 'All'\n                    \"\n                    (ngModelChange)=\"updateZones([$event])\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option value=\"All\" *ngIf=\"!is_map\"\n                        >All Levels</mat-option\n                    >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button\n                btn\n                matRipple\n                *ngIf=\"!manage\"\n                class=\"mx-2 w-36\"\n                matTooltip=\"New Desk Booking\"\n                (click)=\"newDeskBooking()\"\n            >\n                New Booking\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"newDesk()\"\n                matTooltip=\"New Desk\"\n            >\n                <app-icon>add</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary relative text-white rounded\"\n                matTooltip=\"Upload Desks CSV\"\n            >\n                <app-icon>cloud_upload</app-icon>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"downloadTemplate()\"\n                matTooltip=\"Download Template Desk CSV\"\n            >\n                <app-icon>download</app-icon>\n            </button>\n            <button\n                btn\n                icon\n                matRipple\n                *ngIf=\"manage\"\n                class=\"bg-primary mx-2 text-white rounded\"\n                (click)=\"manageRestrictions()\"\n                matTooltip=\"Desk Restrictions\"\n            >\n                <app-icon>lock_open</app-icon>\n            </button>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(filters | async)?.search\"\n                (modelChange)=\"setFilters({ search: $event })\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n\n    public manage = false;\n    public is_map = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe(() => {\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        this.manage = this._router.url?.includes('manage');\n        this.is_map = this._router.url?.includes('map');\n    }\n\n    public newDesk() {\n        this._desks.addDesks([new Desk({ id: `desk-${randomInt(999_999)}` })]);\n        notifySuccess(\n            'New desk added to local data. Make sure to save the desk before using it.'\n        );\n    }\n\n    public newDeskBooking() {\n        this._dialog.open(DeskBookModalComponent, {});\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(DeskRestrictionModalComponent, {});\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._desks.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    public downloadTemplate() {\n        const desk: any = new Desk({\n            id: 'desk-123',\n            name: 'Test Desk',\n            bookable: true,\n            groups: ['test-desk-group', 'desk-bookers'],\n            features: ['Standing Desk', 'Dual Monitor'],\n        }).toJSON();\n        const data = jsonToCsv([desk]);\n        downloadFile('desk-template.csv', data);\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <desks-topbar class=\"w-full\"></desks-topbar>\n                <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                    <router-outlet></router-outlet>\n                </div>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends AsyncHandler implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <div class=\"overflow-auto h-full w-full\">\n            <custom-table\n                class=\"min-w-[76rem] block\"\n                [dataSource]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'user_name',\n                    'group',\n                    'desk_name',\n                    'date',\n                    'status',\n                    'approver_name',\n                    'checked_in',\n                    'access',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Person',\n                    'Group',\n                    'Desk',\n                    'Time',\n                    'Status',\n                    'Approver',\n                    'Checked In',\n                    'Access',\n                    ' '\n                ]\"\n                [column_size]=\"['18r', '', '16r', '', '', '10r', '', '', '12r']\"\n                [template]=\"{\n                    user_name: user_template,\n                    desk_name: desk_template,\n                    date: date_template,\n                    status: status_template,\n                    checked_in: bool_template,\n                    access: bool_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desk bookings'\n                        : 'There are no desk booking for the currently selected date.'\n                \"\n            ></custom-table>\n            <ng-template #date_template let-data=\"data\">\n                {{ data | date: 'shortTime' }}\n            </ng-template>\n            <ng-template #desk_template let-row=\"row\">\n                {{ row.asset_name || row.asset_id }}\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                {{\n                    row.user_name ||\n                        row.user_email ||\n                        row.booked_by_name ||\n                        row.booked_by_email\n                }}\n            </ng-template>\n            <ng-template #status_template let-data=\"data\">\n                <span\n                    class=\"capitalize text-white px-2 py-1 rounded border border-gray-200\"\n                    [class.bg-success]=\"data === 'approved'\"\n                    [class.bg-pending]=\"data === 'tentative'\"\n                    [class.bg-error]=\"\n                        data === 'cancelled' ||\n                        data === 'declined' ||\n                        data === 'ended'\n                    \"\n                >\n                    {{ data }}\n                </span>\n            </ng-template>\n            <ng-template #bool_template let-data=\"data\">\n                <div\n                    [class.bg-red-500]=\"!data\"\n                    [class.bg-green-500]=\"data\"\n                    class=\"rounded h-8 w-8 flex items-center justify-center text-2xl text-white mx-auto\"\n                >\n                    <app-icon>{{ data ? 'done' : 'close' }}</app-icon>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <action-icon matTooltip=\"Check-in\" (click)=\"checkin(row)\">\n                        how_to_reg\n                    </action-icon>\n                    <button\n                        icon\n                        matRipple\n                        (click)=\"approve(row)\"\n                        matTooltip=\"Approve Desk\"\n                        title=\"\"\n                    >\n                        <app-icon>event_available</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        (click)=\"reject(row)\"\n                        matTooltip=\"Reject Desk\"\n                        title=\"\"\n                    >\n                        <app-icon>event_busy</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        [disabled]=\"!row.extension_data?.checkin_qr_code\"\n                        [matMenuTriggerFor]=\"menu\"\n                        matTooltip=\"View Desk QR code\"\n                        title=\"\"\n                    >\n                        <app-icon *ngIf=\"row.extension_data?.checkin_qr_code\">\n                            qr_code\n                        </app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img\n                                class=\"w-48\"\n                                [src]=\"row.extension_data?.checkin_qr_code\"\n                            />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button btn matRipple class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n        </div>\n        <button\n            icon\n            matRipple\n            class=\"absolute bottom-2 right-2 bg-white shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n\n    public readonly checkin = (d) =>\n        this.runMethod('checkin', async () => this._state.checkinDesk(d));\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-2 right-2\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    class=\"white\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white dark:bg-neutral-700 shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends AsyncHandler implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription('desk_polling', this._desks_state.startPolling());\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                const level = this._org.levelWithID(opts.zones);\n                if (level) this._state.setLevel(level.id);\n                this._desks_state.setOptions({\n                    date: opts.date || Date.now(),\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n    unique,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\nconst QR_CODES = {};\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <div\n            class=\"w-full h-full overflow-auto relative\"\n            (dragenter)=\"handleDrag('enter', $event)\"\n            (window:dragend)=\"handleDrag('end', $event)\"\n        >\n            <custom-table\n                class=\"min-w-[72rem] block\"\n                [dataSource]=\"desks\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'map_id',\n                    'bookable',\n                    'name',\n                    'groups',\n                    'features',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'ID',\n                    'Bookable',\n                    'Name',\n                    'Groups',\n                    'Features',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '6r', '12r', 'flex', '16r', '10r']\"\n                [template]=\"{\n                    map_id: text_edit_template,\n                    name: text_edit_template,\n                    bookable: bookable_edit_template,\n                    groups: list_edit_template,\n                    features: list_edit_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desks'\n                        : 'No desks for selected level'\n                \"\n                [pagination]=\"true\"\n                [page_size]=\"20\"\n            ></custom-table>\n            <ng-template\n                #list_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <item-list-field\n                    class=\"w-full\"\n                    hide-outline\n                    [placeholder]=\"\n                        key === 'groups' ? 'User Groups' : 'Features'\n                    \"\n                    [name]=\"key\"\n                    [ngModel]=\"\n                        (changes[row.id] ? changes[row.id][key] : null) || data\n                    \"\n                    (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                >\n                </item-list-field>\n            </ng-template>\n            <ng-template\n                #text_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <div class=\"w-full h-12\" hide-outline>\n                    <mat-form-field class=\"h-12 w-full\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [placeholder]=\"key\"\n                            [name]=\"key\"\n                            [ngModel]=\"\n                                (changes[row.id]\n                                    ? changes[row.id][key]\n                                    : null) || data\n                            \"\n                            (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                        />\n                    </mat-form-field>\n                </div>\n            </ng-template>\n            <ng-template #bookable_edit_template let-data=\"data\" let-row=\"row\">\n                <div class=\"flex items-center justify-center pl-4\">\n                    <mat-checkbox\n                        [ngModel]=\"changes[row.id]?.bookable ?? data\"\n                        (ngModelChange)=\"\n                            setRowValue(row.id, 'bookable', $event)\n                        \"\n                    ></mat-checkbox>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <div\n                        class=\"p-2 text-2xl text-pending\"\n                        [class.opacity-0]=\"!changes[row.id]\"\n                        matTooltip=\"Desk has unsaved changes\"\n                    >\n                        <app-icon>warning</app-icon>\n                    </div>\n                    <button icon (click)=\"removeDesk(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        [matMenuTriggerFor]=\"menu\"\n                        (click)=\"loadQrCode(row)\"\n                    >\n                        <app-icon>qr_code</app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img class=\"w-48\" [src]=\"row.qr_code\" />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button btn matRipple class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n            <div\n                class=\"fixed bottom-2 left-1/2 transform -translate-x-1/2 p-4 rounded bg-white shadow\"\n                *ngIf=\"changed > 0\"\n            >\n                <p class=\"mb-2 text-xl\">\n                    {{ changed }} Desk(s) with unsaved changes\n                </p>\n                <div class=\"flex items-center justify-center\">\n                    <button save btn matRipple (click)=\"save()\">\n                        Save Changes\n                    </button>\n                </div>\n            </div>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-white bg-opacity-60\"\n                *ngIf=\"loading\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n            <div\n                *ngIf=\"dragging\"\n                class=\"absolute inset-0 bg-black/60 flex items-center justify-center\"\n            >\n                <div class=\"bg-white p-4 rounded shadow\">\n                    <div\n                        class=\"border-4 border-gray-300 border-dashed rounded flex flex-col items-center justify-center w-64 h-64\"\n                    >\n                        Drop CSV file to add desks\n                    </div>\n                </div>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent extends AsyncHandler {\n    public changes = {};\n    public loading: string;\n    public dragging = false;\n    public readonly filters = this._state.filters;\n    public readonly desks = combineLatest([\n        this._state.desks,\n        this._state.new_desks,\n    ]).pipe(map(([d, n]) => d.concat(n)));\n\n    public get changed() {\n        return (\n            (Object.keys(this.changes).length || 0) +\n            (this._state.new_desk_count || 0)\n        );\n    }\n\n    public setRowValue(id: string, key: string, value: any) {\n        if (!this.changes[id]) this.changes[id] = {};\n        this.changes[id][key] = value;\n    }\n\n    public async removeDesk(desk: Desk) {\n        const resp = await openConfirmModal(\n            {\n                title: 'Remove desk',\n                content: `Remove desk ${desk.name}?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.close();\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.filter((_) => _.id !== desk.id);\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        this.loading = 'Removing desk...';\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.setFilters({});\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = unique(\n            desks.map((_) =>\n                new Desk({ ..._, ...(this.changes[_.id] || {}) }).toJSON()\n            ),\n            'id'\n        );\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                const msg =\n                    e?.status === 403\n                        ? 'You do not have the required permissions to save desk changes.'\n                        : e.message || e;\n                notifyError(`Error saving desk data. Error: ${msg}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.clearNewDesks();\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public loadQrCode(item: any) {\n        item.qr_code = generateQRCode(\n            `${\n                location.origin\n            }/workplace/#/book/code?asset_id=${encodeURIComponent(item.id)}`\n        );\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        this.loading = 'Loading CSV file...';\n        this.dragging = false;\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n        this.loading = '';\n    }\n\n    public handleDrag(type: 'enter' | 'leave' | 'end', event: DragEvent) {\n        this.dragging = type === 'enter';\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { NewDeskFormDetailsComponent } from 'apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { DeskRestrictionModalComponent } from './desk-restriction-modal.component';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: 'events' },\n];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n        NewDeskFormDetailsComponent,\n        DeskBookModalComponent,\n        DeskRestrictionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"x_google_ignoreList":[]}