{"version":3,"file":"apps_concierge_src_app_desks_desks_module_ts.js","mappings":"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","names":["i0","members","NewDeskFormDetailsComponent","AsyncHandler","building","this","_org","bld","can_book_for_others","_settings","get","can_book_lockers","can_recurr","allow_groups","has_assets","needs_reason","allow_time_changes","allow_all_day","constructor","_state","super","EventEmitter","building_list","active_levels","options","features","o","setOptions","f","e","setFeature","ngOnChanges","changes","form","subscription","valueChanges","subscribe","list","length","setBookingAsset","desk","patchValue","asset_id","undefined","selected_desk","id","asset_name","name","map_id","description","booking_type","zones","zone","parent_id","booking_asset","core","selectors","$localize","DeskBookModalComponent","_booking_form","_dialog_ref","BehaviorSubject","save","_this","loading","next","event","postForm","catch","_","notifyError","emit","reason","metadata","notifySuccess","close","DeskRestrictionModalComponent","_desks","startOfDay","Date","now","endOfDay","desks","ngOnInit","initialised","pipe","first","toPromise","showMetadata","details","restrictions","Array","add","search","start_date","end_date","selected","adding","remove","restriction","filter","addRestriction","_this2","desk_list","take","push","start","valueOf","end","assets","map","_this3","disableClose","console","log","isBefore","updateMetadata","DesksTopbarComponent","_route","_router","_dialog","filters","date","setFilters","navigate","relativeTo","queryParams","zone_ids","join","queryParamsHandling","queryParamMap","params","has","split","updateZones","level","levelWithID","buildings","find","setDate","approve","reject","manage","url","includes","is_map","events","levels","lvl","newDesk","addDesks","Desk","randomInt","newDeskBooking","open","manageRestrictions","loadCSVData","data","loadTextFileFromInputEvent","m","csvToJson","error","booking","showBooking","approveDesk","_this4","rejectDesk","ctx","DesksComponent","startPolling","NavigationEnd","url_parts","path","parts","ngOnDestroy","stopPolling","DeskBookingsComponent","bookings","rejectAllDesks","d","runMethod","checkinDesk","fn","i","DeskMapViewComponent","_desk","_desks_state","map_url","map_styles","map_positions","map_actions","map_features","u","host","opts","setLevel","ExploreDesksService","$event","DesksManageComponent","changed","Object","keys","new_desk_count","setRowValue","key","value","removeDesk","resp","openConfirmModal","title","content","icon","updated_desks","message","unique","toJSON","status","clearNewDesks","loadQrCode","item","qr_code","generateQRCode","location","origin","encodeURIComponent","combineLatest","new_desks","n","concat","dragging","handleDrag","type","ROUTES","component","children","redirectTo","DesksModule","CommonModule","FormsModule","MatTabsModule","ReactiveFormsModule","UIModule","SharedExploreModule","SharedBookingsModule","FormFieldsModule","MatRadioModule","MatFormFieldModule","MatCheckboxModule","MatInputModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component.ts","./apps/concierge/src/app/desks/desk-book-modal.component.ts","./apps/concierge/src/app/desks/desk-restriction-modal.component.ts","./apps/concierge/src/app/desks/desks-topbar.component.ts","./apps/concierge/src/app/desks/desks.component.ts","./apps/concierge/src/app/desks/desk-bookings.component.ts","./apps/concierge/src/app/desks/desk-map-view.component.ts","./apps/concierge/src/app/desks/desks-manage.component.ts","./apps/concierge/src/app/desks/desks.module.ts"],"sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    SimpleChanges,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BookingFormService } from '@placeos/bookings';\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'new-desk-form-details',\n    styles: [],\n    template: `\n        <!-- <div class=\"m-2 bg-yellow-500 p-2 text-center rounded shadow text-sm\">\n            The selected desk hasn't been booked. Please book the desk to be\n            able to check-in.\n        </div> -->\n        <div\n            class=\"p-0 sm:py-4 sm:px-16 divide-y divide-gray-300 space-y-2\"\n            *ngIf=\"form\"\n            [formGroup]=\"form\"\n        >\n            <section class=\"flex items-center\" *ngIf=\"allow_groups\">\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-primary]=\"!(options | async)?.group\"\n                    [class.opacity-60]=\"(options | async)?.group\"\n                    (click)=\"setOptions({ group: false, members: [] })\"\n                >\n                    <app-icon class=\"text-2xl\">person</app-icon>\n                    <div class=\"\" i18n>Single</div>\n                    <div\n                        class=\"absolute h-2 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-gray-200]=\"(options | async)?.group\"\n                        [class.bg-primary]=\"!(options | async)?.group\"\n                    ></div>\n                </button>\n                <button\n                    matRipple\n                    class=\"relative h-16 flex items-center justify-center flex-1 space-x-2\"\n                    [class.text-primary]=\"(options | async)?.group\"\n                    [class.opacity-60]=\"!(options | async)?.group\"\n                    (click)=\"setOptions({ group: true })\"\n                >\n                    <app-icon class=\"text-2xl\">group_add</app-icon>\n                    <div class=\"\" i18n>Group</div>\n                    <div\n                        class=\"absolute h-2 inset-x-0 bottom-0 !m-0\"\n                        [class.bg-gray-200]=\"!(options | async)?.group\"\n                        [class.bg-primary]=\"(options | async)?.group\"\n                    ></div>\n                </button>\n            </section>\n            <section class=\"p-2\" [class.!border-none]=\"allow_groups\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        1\n                    </div>\n                    <div class=\"text-xl\" i18n>Details</div>\n                </h3>\n                <div\n                    class=\"w-full\"\n                    *ngIf=\"can_book_for_others && !(options | async)?.group\"\n                >\n                    <label for=\"title\">Host<span>*</span></label>\n                    <a-user-search-field\n                        formControlName=\"user\"\n                    ></a-user-search-field>\n                </div>\n                <div class=\"flex items-center flex-wrap sm:space-x-2\">\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"title\">Add Title<span>*</span></label>\n                        <mat-form-field appearance=\"outline\" class=\"w-full\">\n                            <input\n                                matInput\n                                name=\"title\"\n                                formControlName=\"title\"\n                                placeholder=\"e.g. Focus Time\"\n                            />\n                            <mat-error i18n\n                                >Booking title is required.</mat-error\n                            >\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex-1 min-w-[256px]\">\n                        <label for=\"date\" i18n>Date<span>*</span></label>\n                        <a-date-field name=\"date\" formControlName=\"date\" i18n>\n                            Date and time must be in the future\n                        </a-date-field>\n                    </div>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex-1 w-1/3\">\n                        <label for=\"start-time\" i18n\n                            >Start Time<span>*</span></label\n                        >\n                        <a-time-field\n                            name=\"start-time\"\n                            [ngModel]=\"form.value.date\"\n                            (ngModelChange)=\"form.patchValue({ date: $event })\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                        ></a-time-field>\n                    </div>\n                    <div class=\"flex-1 w-1/3 relative\">\n                        <label for=\"end-time\" i18n\n                            >End Time<span>*</span></label\n                        >\n                        <a-duration-field\n                            name=\"end-time\"\n                            formControlName=\"duration\"\n                            [time]=\"form.get('date')?.value\"\n                            [max]=\"12 * 60\"\n                            [min]=\"60\"\n                            [step]=\"60\"\n                        >\n                        </a-duration-field>\n                        <mat-checkbox\n                            formControlName=\"all_day\"\n                            *ngIf=\"allow_all_day\"\n                            class=\"absolute -top-2 right-0\"\n                            i18n\n                        >\n                            All Day\n                        </mat-checkbox>\n                    </div>\n                </div>\n                <div\n                    class=\"flex items-center space-x-2\"\n                    *ngIf=\"can_book_lockers\"\n                >\n                    <div class=\"flex-1 w-1/3\">\n                        <mat-checkbox\n                            [ngModel]=\"!!form.value.secondary_resource\"\n                            (ngModelChange)=\"\n                                form.patchValue({\n                                    secondary_resource: $event ? 'locker' : ''\n                                })\n                            \"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            i18n\n                        >\n                            Require locker\n                        </mat-checkbox>\n                    </div>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"(options | async)?.group\">\n                <h3 class=\"space-x-2 flex items-center\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        2\n                    </div>\n                    <div class=\"text-xl\" i18n>Group Members</div>\n                    <div class=\"flex-1 w-px\"></div>\n                </h3>\n                <div class=\"overflow-hidden\">\n                    <a-user-list-field\n                        class=\"mt-4\"\n                        [ngModel]=\"(options | async)?.members || []\"\n                        (ngModelChange)=\"setOptions({ members: $event })\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                    ></a-user-list-field>\n                </div>\n            </section>\n            <section class=\"p-2\" *ngIf=\"form.contains('resources')\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 3 : 2 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Desk</div>\n                </h3>\n                <desk-list-field formControlName=\"resources\"></desk-list-field>\n                <p\n                    *ngIf=\"(options | async)?.group\"\n                    class=\"text-center rounded px-2 py-1 bg-yellow-400 shadow text-xs\"\n                >\n                    Desks nearby to the selected desk will booked for group\n                    members\n                </p>\n            </section>\n            <section class=\"p-2\" *ngIf=\"has_assets\">\n                <h3 class=\"space-x-2 flex items-center mb-4\">\n                    <div\n                        class=\"bg-black/20 rounded-full h-6 w-6 flex items-center justify-center\"\n                    >\n                        {{ (options | async)?.group ? 4 : 3 }}\n                    </div>\n                    <div class=\"text-xl\" i18n>Request Asset</div>\n                </h3>\n                <asset-list-field formControlName=\"assets\"></asset-list-field>\n            </section>\n        </div>\n    `,\n})\nexport class NewDeskFormDetailsComponent extends AsyncHandler {\n    @Input() public form: FormGroup;\n    @Output() public find = new EventEmitter<void>();\n    /** List of available buildings to select */\n    public readonly buildings = this._org.building_list;\n    /** List of available levels for the selected building */\n    public readonly levels = this._org.active_levels;\n    /** List of set options for desk booking */\n    public readonly options = this._state.options;\n    /** List of set options for desk booking */\n    public readonly features = this._state.features;\n\n    /** Selected desk for booking */\n    public selected_desk: Desk;\n    public from_id = false;\n\n    public readonly recurrence_options = ['daily', 'weekly', 'monthly'];\n\n    public get building() {\n        return this._org.building;\n    }\n    public set building(bld) {\n        this._org.building = bld;\n    }\n\n    public readonly setOptions = (o) => this._state.setOptions(o);\n\n    public readonly setFeature = (f, e) => this._state.setFeature(f, e);\n\n    public get can_book_for_others() {\n        return this._settings.get('app.desks.can_book_for_others');\n    }\n\n    public get can_book_lockers() {\n        return this._settings.get('app.desks.can_book_lockers');\n    }\n    public get can_recurr() {\n        return this._settings.get('app.desks.recurrence_allowed');\n    }\n\n    public get allow_groups() {\n        return this._settings.get('app.desks.allow_groups');\n    }\n\n    public get has_assets() {\n        return !!this._settings.get('app.desks.has_assets');\n    }\n\n    public get needs_reason() {\n        return this._settings.get('app.desks.needs_reason') === true;\n    }\n\n    public get allow_time_changes() {\n        return !!this._settings.get('app.desks.allow_time_changes');\n    }\n\n    public get allow_all_day() {\n        return (\n            this.allow_time_changes &&\n            !!this._settings.get('app.desks.allow_all_day')\n        );\n    }\n\n    constructor(\n        private _state: BookingFormService,\n        private _org: OrganisationService,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.form && this.form) {\n            this.subscription(\n                'change',\n                this.form.get('resources')?.valueChanges?.subscribe((list) => {\n                    list?.length ? this.setBookingAsset(list[0]) : '';\n                })\n            );\n        }\n    }\n\n    private setBookingAsset(desk: Desk) {\n        this._state.form.patchValue({ asset_id: undefined });\n        if (!desk) return;\n        this.selected_desk = desk;\n        this._state.form.patchValue({\n            asset_id: desk?.id,\n            asset_name: desk.name,\n            map_id: desk?.map_id || desk?.id,\n            description: desk.name,\n            booking_type: 'desk',\n            zones: desk.zone ? [desk.zone?.parent_id, desk.zone?.id] : [],\n            booking_asset: desk,\n        });\n    }\n}\n","import { Component, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { BookingFormService } from '@placeos/bookings';\nimport { DialogEvent, notifyError, notifySuccess } from '@placeos/common';\nimport { BehaviorSubject } from 'rxjs';\n\n@Component({\n    selector: 'desk-book-modal',\n    template: `\n        <header>\n            <h2>New Desk Booking</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            *ngIf=\"!(loading | async); else load_state\"\n            class=\"overflow-auto p-4\"\n        >\n            <new-desk-form-details [form]=\"form\"></new-desk-form-details>\n        </main>\n        <footer\n            *ngIf=\"!(loading | async)\"\n            class=\"flex justify-center items-center p-2 border-t border-gray-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>{{ loading | async }}</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskBookModalComponent {\n    @Output() public event = new EventEmitter<DialogEvent>();\n    public readonly loading = new BehaviorSubject(false);\n\n    public get form() {\n        return this._booking_form.form;\n    }\n\n    constructor(\n        private _booking_form: BookingFormService,\n        private _dialog_ref: MatDialogRef<DeskBookModalComponent>\n    ) {}\n\n    public async save() {\n        this.loading.next(true);\n        const event = await this._booking_form.postForm().catch((_) => {\n            notifyError(_);\n            this.loading.next(false);\n            throw _;\n        });\n        this.event.emit({ reason: 'done', metadata: event });\n        notifySuccess('Successfully created booking');\n        this._dialog_ref.close();\n        this.loading.next(false);\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { notifyError, notifySuccess } from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { endOfDay, isBefore, startOfDay } from 'date-fns';\nimport { first, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\nimport { AssetRestriction } from '@placeos/bookings';\n\n@Component({\n    selector: 'desk-restriction-modal',\n    template: `\n        <header class=\"flex items-center justify-between\">\n            <h2>\n                <ng-container *ngIf=\"adding\">Add</ng-container> Desk\n                Restrictions\n            </h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <ng-container *ngIf=\"!loading; else load_state\">\n            <main\n                class=\"h-[65vh] overflow-auto\"\n                *ngIf=\"!adding; else add_state\"\n            >\n                <custom-table\n                    class=\"block w-[calc(80vw)]\"\n                    [dataSource]=\"restrictions\"\n                    [columns]=\"['start', 'duration', 'assets', 'actions']\"\n                    [display_column]=\"['Date', 'Period', 'No. of Desks', ' ']\"\n                    [template]=\"{\n                        start: date_template,\n                        duration: duration_template,\n                        assets: count_template,\n                        actions: actions_template\n                    }\"\n                    empty=\"No desk restrictions set\"\n                ></custom-table>\n                <ng-template #date_template let-data=\"data\">\n                    {{ data | date: 'mediumDate' }}\n                </ng-template>\n                <ng-template #duration_template let-data=\"data\">\n                    {{ data }}\n                </ng-template>\n                <ng-template #count_template let-data=\"data\">\n                    {{ data?.length || '0' }} desk(s)\n                </ng-template>\n                <ng-template #actions_template let-row=\"row\">\n                    <button btn icon matRipple (click)=\"remove(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n                *ngIf=\"!adding\"\n            >\n                <button btn matRipple class=\"inverse\" (click)=\"add()\">\n                    Add Restriction\n                </button>\n                <button btn matRipple (click)=\"save()\">\n                    Save Restrictions\n                </button>\n            </footer>\n        </ng-container>\n        <ng-template #load_state>\n            <div\n                class=\"flex flex-col items-center justify-center w-[20rem] h-[16rem] space-y-2\"\n            >\n                <mat-spinner [diameter]=\"32\"></mat-spinner>\n                <p>Saving desk restriction changes...</p>\n            </div>\n        </ng-template>\n        <ng-template #add_state>\n            <main class=\"flex flex-col h-[65vh] overflow-auto\">\n                <div class=\"flex items-center space-x-2 px-2 pt-2\">\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <mat-date-range-input [rangePicker]=\"picker\">\n                            <input\n                                matStartDate\n                                placeholder=\"Start date\"\n                                [(ngModel)]=\"start_date\"\n                            />\n                            <input\n                                matEndDate\n                                placeholder=\"End date\"\n                                [(ngModel)]=\"end_date\"\n                            />\n                        </mat-date-range-input>\n                        <mat-datepicker-toggle\n                            matIconSuffix\n                            [for]=\"picker\"\n                        ></mat-datepicker-toggle>\n                        <mat-date-range-picker #picker></mat-date-range-picker>\n                    </mat-form-field>\n                    <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                        <app-icon matPrefix>search</app-icon>\n                        <input\n                            matInput\n                            [(ngModel)]=\"search\"\n                            placeholder=\"Filter desks\"\n                        />\n                    </mat-form-field>\n                </div>\n                <custom-table\n                    class=\"block w-[calc(65vw)]\"\n                    [dataSource]=\"desk_list\"\n                    [filter]=\"search\"\n                    [columns]=\"['toggle', 'name', 'map_id']\"\n                    [display_column]=\"[' ', 'name', 'MapID']\"\n                    [template]=\"{\n                        toggle: toggle_template\n                    }\"\n                    empty=\"No desk restrictions set\"\n                ></custom-table>\n                <ng-template #toggle_template let-row=\"row\">\n                    <mat-checkbox\n                        [(ngModel)]=\"selected[row.id || row.map_id]\"\n                    ></mat-checkbox>\n                </ng-template>\n            </main>\n            <footer\n                class=\"flex items-center justify-end space-x-2 p-2 border-t border-gray-200\"\n            >\n                <button\n                    btn\n                    matRipple\n                    class=\"inverse w-32\"\n                    (click)=\"adding = false\"\n                >\n                    Back\n                </button>\n                <button btn matRipple (click)=\"addRestriction()\" class=\"w-32\">\n                    Add to Restrictions\n                </button>\n            </footer>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class DeskRestrictionModalComponent {\n    public loading = false;\n    public adding = false;\n    public search = '';\n    public selected: Record<string, boolean> = {};\n    public start_date = startOfDay(Date.now());\n    public end_date = endOfDay(Date.now());\n    public restrictions: AssetRestriction[] = [];\n    public readonly desk_list = this._desks.desks;\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog_ref: MatDialogRef<DeskRestrictionModalComponent>\n    ) {}\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        showMetadata(this._org.building.id, 'desk_restrictions').subscribe(\n            ({ details }) => {\n                this.restrictions = details instanceof Array ? details : [];\n            }\n        );\n    }\n\n    public add() {\n        this.search = '';\n        this.start_date = startOfDay(Date.now());\n        this.end_date = endOfDay(Date.now());\n        this.selected = {};\n        this.adding = true;\n    }\n\n    public remove(restriction: AssetRestriction) {\n        this.restrictions = this.restrictions.filter((_) => _ !== restriction);\n    }\n\n    public async addRestriction() {\n        const desks = await this.desk_list.pipe(take(1)).toPromise();\n        this.restrictions.push({\n            start: this.start_date.valueOf(),\n            end: this.end_date.valueOf(),\n            assets: desks.filter((_) => this.selected[_.id]).map((_) => _.id),\n        });\n        this.adding = false;\n    }\n\n    public async save() {\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        console.log(\n            'Restrictions:',\n            this.restrictions,\n            this.restrictions.filter((_) => isBefore(Date.now(), _.end))\n        );\n        await updateMetadata(this._org.building.id, {\n            name: 'desk_restrictions',\n            description: 'Desk restrictions',\n            details: this.restrictions.filter((_) =>\n                isBefore(Date.now(), _.end)\n            ),\n        })\n            .toPromise()\n            .catch((_) => {\n                this.loading = false;\n                this._dialog_ref.disableClose = false;\n                notifyError('Failed to update desk restrictions');\n                throw _;\n            });\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n        this._dialog_ref.close();\n        notifySuccess('Successfully updated desk restrictions');\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first, take } from 'rxjs/operators';\n\nimport {\n    AsyncHandler,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { DesksStateService } from './desks-state.service';\nimport { showBooking } from '@placeos/bookings';\nimport { randomInt } from '@placeos/common';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { DeskRestrictionModalComponent } from './desk-restriction-modal.component';\n\n@Component({\n    selector: 'desks-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"\n                        (filters | async).zones\n                            ? (filters | async).zones[0]\n                            : 'All'\n                    \"\n                    (ngModelChange)=\"updateZones([$event])\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option value=\"All\" *ngIf=\"!is_map\"\n                        >All Levels</mat-option\n                    >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <button\n                btn\n                matRipple\n                *ngIf=\"!manage\"\n                class=\"mx-2 w-36\"\n                (click)=\"newDeskBooking()\"\n            >\n                New Booking\n            </button>\n            <button\n                btn\n                matRipple\n                *ngIf=\"manage\"\n                class=\"mx-2 w-32\"\n                (click)=\"newDesk()\"\n            >\n                New Desk\n            </button>\n            <button btn matRipple *ngIf=\"manage\" class=\"relative w-32\">\n                Upload CSV\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </button>\n            <button\n                btn\n                matRipple\n                *ngIf=\"manage\"\n                class=\"mx-2 w-32\"\n                (click)=\"manageRestrictions()\"\n            >\n                Desk Restrictions\n            </button>\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(filters | async)?.search\"\n                (modelChange)=\"setFilters({ search: $event })\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class DesksTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** List of levels for the active building */\n    public readonly filters = this._desks.filters;\n\n    public manage = false;\n    public is_map = false;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._desks.setFilters({ date });\n    public readonly setFilters = (o) => this._desks.setFilters(o);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones: string[]) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n            queryParamsHandling: 'merge',\n        });\n        this._desks.setFilters({ zones });\n    };\n\n    constructor(\n        private _desks: DesksStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        this.updateZones(zones);\n                        const level = this._org.levelWithID(zones);\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n                if (params.has('date')) {\n                    this.setDate(new Date(+params.get('date')));\n                }\n                if (params.has('approve')) {\n                    this.approve(params.get('approve'));\n                } else if (params.has('reject')) {\n                    this.reject(params.get('reject'));\n                }\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe(() => {\n                this.manage = this._router.url?.includes('manage');\n                this.is_map = this._router.url?.includes('map');\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe(async (levels) => {\n                const filters = await this.filters.pipe(take(1)).toPromise();\n                const zones =\n                    filters?.zones?.filter(\n                        (zone) =>\n                            levels.find((lvl) => lvl.id === zone) ||\n                            zone === 'All'\n                    ) || [];\n                if (!zones.length && levels.length) {\n                    zones.push(levels[0].id);\n                }\n                this.updateZones(zones);\n            })\n        );\n        this.manage = this._router.url?.includes('manage');\n        this.is_map = this._router.url?.includes('map');\n    }\n\n    public newDesk() {\n        this._desks.addDesks([new Desk({ id: `desk-${randomInt(999_999)}` })]);\n        notifySuccess(\n            'New desk added to local data. Make sure to save the desk before using it.'\n        );\n    }\n\n    public newDeskBooking() {\n        this._dialog.open(DeskBookModalComponent, {});\n    }\n\n    public manageRestrictions() {\n        this._dialog.open(DeskRestrictionModalComponent, {});\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._desks.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n    }\n\n    /**\n     * Aprrove a desk booking\n     * @param id Booking ID to approve\n     */\n    private async approve(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.approveDesk(booking);\n        }\n    }\n\n    /**\n     * Reject a desk booking\n     * @param id Booking ID to reject\n     */\n    private async reject(id: string) {\n        const booking = await showBooking(id).toPromise();\n        if (booking) {\n            this._desks.rejectDesk(booking);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: '[app-desks]',\n    template: `\n        <sidebar></sidebar>\n        <main\n            class=\"flex-1 relative w-1/2 flex flex-col bg-gray-200 dark:bg-neutral-600 overflow-hidden\"\n        >\n            <desks-topbar class=\"w-full\"></desks-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Map View\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/desks', 'manage']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'manage'\"\n                    >\n                        Manage Desks\n                    </a>\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DesksComponent extends AsyncHandler implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n    public path: string;\n\n    constructor(private _state: DesksStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n\n    public ngOnDestroy() {\n        super.ngOnDestroy();\n        this._state.stopPolling();\n    }\n}\n","import { Component } from '@angular/core';\n\nimport { DesksStateService } from './desks-state.service';\n\n@Component({\n    selector: 'desk-bookings',\n    template: `\n        <div class=\"overflow-auto h-full w-full\">\n            <custom-table\n                class=\"min-w-[76rem]\"\n                [dataSource]=\"bookings\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'user_name',\n                    'group',\n                    'desk_name',\n                    'date',\n                    'status',\n                    'approver_name',\n                    'checked_in',\n                    'access',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Person',\n                    'Group',\n                    'Desk',\n                    'Date',\n                    'Status',\n                    'Approver',\n                    'Checked In',\n                    'Access',\n                    ' '\n                ]\"\n                [column_size]=\"[\n                    'flex',\n                    '',\n                    '',\n                    '12r',\n                    '',\n                    '10r',\n                    '',\n                    '',\n                    '12r'\n                ]\"\n                [template]=\"{\n                    user_name: user_template,\n                    desk_name: desk_template,\n                    date: date_template,\n                    status: status_template,\n                    checked_in: bool_template,\n                    access: bool_template,\n                    actions: action_template\n                }\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desk bookings'\n                        : 'There are no desk booking for the currently selected date.'\n                \"\n            ></custom-table>\n            <ng-template #date_template let-data=\"data\">\n                {{ data | date }} at {{ data | date: 'shortTime' }}\n            </ng-template>\n            <ng-template #desk_template let-row=\"row\">\n                {{ row.asset_name || row.asset_id }}\n            </ng-template>\n            <ng-template #user_template let-row=\"row\">\n                {{\n                    row.user_name ||\n                        row.user_email ||\n                        row.booked_by_name ||\n                        row.booked_by_email\n                }}\n            </ng-template>\n            <ng-template #status_template let-data=\"data\">\n                <span\n                    class=\"capitalize text-white px-2 py-1 rounded border border-gray-200\"\n                    [class.bg-success]=\"data === 'approved'\"\n                    [class.bg-pending]=\"data === 'tentative'\"\n                    [class.bg-error]=\"\n                        data === 'cancelled' ||\n                        data === 'declined' ||\n                        data === 'ended'\n                    \"\n                >\n                    {{ data }}\n                </span>\n            </ng-template>\n            <ng-template #bool_template let-data=\"data\">\n                {{ data ? 'Yes' : 'No' }}\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <action-icon (click)=\"checkin(row)\">how_to_reg</action-icon>\n                    <button\n                        icon\n                        matRipple\n                        (click)=\"approve(row)\"\n                        matTooltip=\"Approve Desk\"\n                    >\n                        <app-icon>event_available</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        (click)=\"reject(row)\"\n                        matTooltip=\"Reject Desk\"\n                    >\n                        <app-icon>event_busy</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        [disabled]=\"!row.extension_data?.checkin_qr_code\"\n                        [matMenuTriggerFor]=\"menu\"\n                        matTooltip=\"View Desk QR code\"\n                    >\n                        <app-icon *ngIf=\"row.extension_data?.checkin_qr_code\">\n                            qr_code\n                        </app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img\n                                class=\"w-48\"\n                                [src]=\"row.extension_data?.checkin_qr_code\"\n                            />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button btn matRipple class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n        </div>\n        <button\n            icon\n            matRipple\n            class=\"absolute bottom-2 right-2 bg-white shadow\"\n            [matMenuTriggerFor]=\"menu\"\n        >\n            <app-icon>more_vert</app-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\">\n            <button mat-menu-item (click)=\"rejectAll()\">Reject All</button>\n        </mat-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class DeskBookingsComponent {\n    public loading: string;\n    public readonly filters = this._state.filters;\n    public readonly bookings = this._state.bookings;\n\n    public readonly rejectAll = () => this._state.rejectAllDesks();\n\n    public readonly checkin = (d) =>\n        this.runMethod('checkin', async () => this._state.checkinDesk(d));\n    public readonly approve = (d) =>\n        this.runMethod('approve', async () => this._state.approveDesk(d));\n    public readonly reject = (d) =>\n        this.runMethod('reject', async () => this._state.rejectDesk(d));\n\n    constructor(private _state: DesksStateService) {}\n\n    private async runMethod(name: string, fn: () => Promise<any>) {\n        this.loading = name;\n        await fn().catch((i) => null);\n        this.loading = '';\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ExploreDesksService, ExploreStateService } from '@placeos/explore';\n\nimport { DesksStateService } from './desks-state.service';\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\n@Component({\n    selector: 'desk-map-view',\n    template: `\n        <div map class=\"h-full w-full relative\">\n            <i-map\n                [src]=\"url | async\"\n                [zoom]=\"(positions | async).zoom\"\n                [center]=\"(positions | async).center\"\n                [styles]=\"styles | async\"\n                [features]=\"features | async\"\n                [actions]=\"actions | async\"\n            ></i-map>\n            <explore-zoom-controls\n                class=\"absolute bottom-2 right-2\"\n            ></explore-zoom-controls>\n            <div class=\"absolute top-0 left-0 p-2 text-black\">\n                <a-user-search-field\n                    [ngModel]=\"null\"\n                    (ngModelChange)=\"setHost($event)\"\n                    class=\"white\"\n                    placeholder=\"User for bookings...\"\n                ></a-user-search-field>\n            </div>\n            <div\n                info\n                class=\"absolute bottom-0 rounded p-2 m-2 bg-white dark:bg-neutral-700 shadow text-center\"\n            >\n                Click/Tap an available desk to book it.\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                position: relative;\n                height: 100%;\n                width: 100%;\n            }\n\n            [info] {\n                left: 50%;\n                transform: translateX(-50%);\n            }\n        `,\n    ],\n    providers: [ExploreDesksService],\n})\nexport class DeskMapViewComponent extends AsyncHandler implements OnInit {\n    /** Observable for the active map */\n    public readonly url = this._state.map_url;\n    /** Observable for the active map */\n    public readonly styles = this._state.map_styles;\n    /** Observable for the active map */\n    public readonly positions = this._state.map_positions;\n    /** Observable for the active map */\n    public readonly actions = this._state.map_actions;\n    /** Observable for the active map */\n    public readonly features = this._state.map_features;\n\n    public readonly setHost = (u) => this._desks_state.setOptions({ host: u });\n\n    constructor(\n        private _state: ExploreStateService,\n        private _desk: DesksStateService,\n        private _desks_state: ExploreDesksService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        this.subscription('desk_polling', this._desks_state.startPolling());\n        this.subscription(\n            'date',\n            this._desk.filters.subscribe((opts) => {\n                const level = this._org.levelWithID(opts.zones);\n                if (level) this._state.setLevel(level.id);\n                this._desks_state.setOptions({\n                    date: opts.date ? new Date(opts.date) : new Date(),\n                    zones: opts.zones,\n                });\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    csvToJson,\n    loadTextFileFromInputEvent,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    randomInt,\n    unique,\n} from '@placeos/common';\nimport { Desk, OrganisationService } from '@placeos/organisation';\nimport { updateMetadata } from '@placeos/ts-client';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\nimport { combineLatest } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { DesksStateService } from './desks-state.service';\n\nconst QR_CODES = {};\n\n@Component({\n    selector: 'desks-manage',\n    template: `\n        <div\n            class=\"w-full h-full overflow-auto relative\"\n            (dragenter)=\"handleDrag('enter', $event)\"\n            (window:dragend)=\"handleDrag('end', $event)\"\n        >\n            <custom-table\n                class=\"min-w-[72rem] block\"\n                [dataSource]=\"desks\"\n                [filter]=\"(filters | async)?.search\"\n                [columns]=\"[\n                    'map_id',\n                    'bookable',\n                    'name',\n                    'groups',\n                    'features',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'ID',\n                    'Bookable',\n                    'Name',\n                    'Groups',\n                    'Features',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '6r', '12r', 'flex', '16r', '10r']\"\n                [template]=\"{\n                    map_id: text_edit_template,\n                    name: text_edit_template,\n                    bookable: bookable_edit_template,\n                    groups: list_edit_template,\n                    features: list_edit_template,\n                    actions: action_template\n                }\"\n                [pagination]=\"true\"\n                [page_size]=\"30\"\n                [empty]=\"\n                    (filters | async)?.search\n                        ? 'No matching desks'\n                        : 'No desks for selected level'\n                \"\n            ></custom-table>\n            <ng-template\n                #list_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <item-list-field\n                    class=\"w-full\"\n                    hide-outline\n                    [placeholder]=\"\n                        key === 'groups' ? 'User Groups' : 'Features'\n                    \"\n                    [name]=\"key\"\n                    [ngModel]=\"\n                        (changes[row.id] ? changes[row.id][key] : null) || data\n                    \"\n                    (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                >\n                </item-list-field>\n            </ng-template>\n            <ng-template\n                #text_edit_template\n                let-data=\"data\"\n                let-row=\"row\"\n                let-key=\"key\"\n            >\n                <div class=\"w-full h-12\" hide-outline>\n                    <mat-form-field class=\"h-12 w-full\" appearance=\"outline\">\n                        <input\n                            matInput\n                            [placeholder]=\"key\"\n                            [name]=\"key\"\n                            [ngModel]=\"\n                                (changes[row.id]\n                                    ? changes[row.id][key]\n                                    : null) || data\n                            \"\n                            (ngModelChange)=\"setRowValue(row.id, key, $event)\"\n                        />\n                    </mat-form-field>\n                </div>\n            </ng-template>\n            <ng-template #bookable_edit_template let-data=\"data\" let-row=\"row\">\n                <div class=\"flex items-center justify-center pl-4\">\n                    <mat-checkbox\n                        [ngModel]=\"changes[row.id]?.bookable ?? data\"\n                        (ngModelChange)=\"\n                            setRowValue(row.id, 'bookable', $event)\n                        \"\n                    ></mat-checkbox>\n                </div>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"flex items-center justify-end space-x-2\">\n                    <div\n                        class=\"p-2 text-2xl text-pending\"\n                        [class.opacity-0]=\"!changes[row.id]\"\n                        matTooltip=\"Desk has unsaved changes\"\n                    >\n                        <app-icon>warning</app-icon>\n                    </div>\n                    <button icon (click)=\"removeDesk(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        icon\n                        matRipple\n                        [matMenuTriggerFor]=\"menu\"\n                        (click)=\"loadQrCode(row)\"\n                    >\n                        <app-icon>qr_code</app-icon>\n                    </button>\n                    <mat-menu #menu=\"matMenu\">\n                        <div\n                            class=\"p-2 mx-4 my-2 rounded-lg border border-black\"\n                        >\n                            <img class=\"w-48\" [src]=\"row.qr_code\" />\n                        </div>\n                        <div mat-menu-item class=\"underline\">\n                            <button btn matRipple class=\"w-full\">\n                                Print QR Code\n                            </button>\n                        </div>\n                    </mat-menu>\n                </div>\n            </ng-template>\n            <div\n                class=\"fixed bottom-2 left-1/2 transform -translate-x-1/2 p-4 rounded bg-white shadow\"\n                *ngIf=\"changed > 0\"\n            >\n                <p class=\"mb-2 text-xl\">\n                    {{ changed }} Desk(s) with unsaved changes\n                </p>\n                <div class=\"flex items-center justify-center\">\n                    <button save btn matRipple (click)=\"save()\">\n                        Save Changes\n                    </button>\n                </div>\n            </div>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center space-y-2 bg-white bg-opacity-60\"\n                *ngIf=\"loading\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>{{ loading }}</p>\n            </div>\n            <div\n                *ngIf=\"dragging\"\n                class=\"absolute inset-0 bg-black/60 flex items-center justify-center\"\n            >\n                <div class=\"bg-white p-4 rounded shadow\">\n                    <div\n                        class=\"border-4 border-gray-300 border-dashed rounded flex flex-col items-center justify-center w-64 h-64\"\n                    >\n                        Drop CSV file to add desks\n                    </div>\n                </div>\n                <input\n                    type=\"file\"\n                    class=\"absolute inset-0 opacity-0\"\n                    (change)=\"loadCSVData($event)\"\n                />\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class DesksManageComponent extends AsyncHandler {\n    public changes = {};\n    public loading: string;\n    public dragging = false;\n    public readonly filters = this._state.filters;\n    public readonly desks = combineLatest([\n        this._state.desks,\n        this._state.new_desks,\n    ]).pipe(map(([d, n]) => d.concat(n)));\n\n    public get changed() {\n        return (\n            (Object.keys(this.changes).length || 0) +\n            (this._state.new_desk_count || 0)\n        );\n    }\n\n    public setRowValue(id: string, key: string, value: any) {\n        if (!this.changes[id]) this.changes[id] = {};\n        this.changes[id][key] = value;\n    }\n\n    public async removeDesk(desk: Desk) {\n        const resp = await openConfirmModal(\n            {\n                title: 'Remove desk',\n                content: `Remove desk ${desk.name}?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (resp.reason !== 'done') return;\n        resp.close();\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = desks.filter((_) => _.id !== desk.id);\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        this.loading = 'Removing desk...';\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                notifyError(`Error saving desk data. Error: ${e.message || e}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public async save() {\n        this.loading = 'Saving changes to desks...';\n        const desks = await this.desks.pipe(take(1)).toPromise();\n        const updated_desks = unique(\n            desks.map((_) =>\n                new Desk({ ..._, ...(this.changes[_.id] || {}) }).toJSON()\n            ),\n            'id'\n        );\n        const filters = await this.filters.pipe(take(1)).toPromise();\n        const level = this._org.levelWithID(filters.zones);\n        await updateMetadata(level.id, {\n            name: 'desks',\n            description: 'desks',\n            details: updated_desks,\n        })\n            .toPromise()\n            .catch((e) => {\n                this.loading = '';\n                const msg =\n                    e?.status === 403\n                        ? 'You do not have the required permissions to save desk changes.'\n                        : e.message || e;\n                notifyError(`Error saving desk data. Error: ${msg}`);\n                throw e;\n            });\n        notifySuccess('Successfully updated desks');\n        this._state.clearNewDesks();\n        this.loading = '';\n        this.changes = {};\n    }\n\n    public loadQrCode(item: any) {\n        item.qr_code = generateQRCode(\n            `${\n                location.origin\n            }/workplace/#/book/code?asset_id=${encodeURIComponent(item.id)}`\n        );\n    }\n\n    constructor(\n        private _state: DesksStateService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n    }\n\n    public async loadCSVData(event: InputEvent) {\n        this.loading = 'Loading CSV file...';\n        this.dragging = false;\n        const data = await loadTextFileFromInputEvent(event).catch(([m, e]) => {\n            notifyError(m);\n            throw e;\n        });\n        try {\n            const list = csvToJson(data) || [];\n            this._state.addDesks(\n                list.map(\n                    (_) =>\n                        new Desk({\n                            ..._,\n                            id: _.id || `desk-${randomInt(999_999)}`,\n                        })\n                )\n            );\n        } catch (e) {\n            console.error(e);\n        }\n        this.loading = '';\n    }\n\n    public handleDrag(type: 'enter' | 'leave' | 'end', event: DragEvent) {\n        this.dragging = type === 'enter';\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatTabsModule } from '@angular/material/tabs';\n\nimport { SharedExploreModule } from '@placeos/explore';\nimport { UIModule } from '../ui/ui.module';\n\nimport { DesksComponent } from './desks.component';\nimport { DeskBookingsComponent } from './desk-bookings.component';\nimport { DesksTopbarComponent } from './desks-topbar.component';\nimport { DeskMapViewComponent } from './desk-map-view.component';\nimport { DesksManageComponent } from './desks-manage.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { NewDeskFormDetailsComponent } from 'apps/workplace/src/app/book/new-desk-flow/new-desk-form-details.component';\nimport { DeskBookModalComponent } from './desk-book-modal.component';\nimport { SharedBookingsModule } from '@placeos/bookings';\nimport { DeskRestrictionModalComponent } from './desk-restriction-modal.component';\nimport { FormFieldsModule } from '@placeos/form-fields';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: DesksComponent,\n        children: [\n            { path: 'events', component: DeskBookingsComponent },\n            { path: 'map', component: DeskMapViewComponent },\n            { path: 'manage', component: DesksManageComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: 'events' },\n];\n\n@NgModule({\n    declarations: [\n        DesksComponent,\n        DeskBookingsComponent,\n        DesksTopbarComponent,\n        DeskMapViewComponent,\n        DesksManageComponent,\n        NewDeskFormDetailsComponent,\n        DeskBookModalComponent,\n        DeskRestrictionModalComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        MatTabsModule,\n        ReactiveFormsModule,\n        UIModule,\n        SharedExploreModule,\n        SharedBookingsModule,\n        FormFieldsModule,\n        MatRadioModule,\n        MatFormFieldModule,\n        MatCheckboxModule,\n        MatInputModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class DesksModule {}\n"],"x_google_ignoreList":[]}