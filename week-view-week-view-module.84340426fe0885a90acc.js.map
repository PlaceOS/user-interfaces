{"version":3,"sources":["./src/app/week-view/week-view-topbar.component.ts","./src/app/week-view/week-view-event.component.ts","./src/app/week-view/week-view-day.component.ts","./src/app/week-view/week-view-timeline.component.ts","./src/app/week-view/week-view.module.ts","./src/app/week-view/week-view.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.html","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/user-form/user-form.component.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/location.class.ts","/home/runner/work/user-interfaces/user-interfaces/libs/users/src/lib/users.module.ts"],"names":["WeekViewTopbarComponent","_state","_org","_route","_router","super","zones","levels","this","active_levels","options","setDate","d","setWeekends","setUIOptions","show_weekends","newBooking","updateZones","z","navigate","relativeTo","queryParams","zone_ids","join","setZones","initialised","pipe","first","_","toPromise","subscription","queryParamMap","subscribe","params","has","get","split","length","level","levelWithID","building","buildings","find","bld","id","parent_id","filter","zone","lvl","push","WeekViewEventComponent","view","e","setEvent","WeekViewDayComponent","_index","BehaviorSubject","date","map","addDays","startOfWeek","index","valueOf","events","combineLatest","filtered_week","details","start","end","endOfDay","bkn","duration","changes","next","WeekViewTimelineComponent","weekdays","event","loading","startPollingWeek","stopPolling","ROUTES","path","component","WeekViewComponent","DayViewModule","forChild","UserFormComponent","MapLocation","_data","type","location","position","map_id","x","map_width","y","map_height","variance","last_seen","Math","floor","Date","at_location","SharedUsersModule"],"mappings":"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","file":"week-view-week-view-module.84340426fe0885a90acc.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@user-interfaces/common';\nimport { OrganisationService } from '@user-interfaces/organisation';\n\nimport { EventsStateService } from '../day-view/events-state.service';\n\n@Component({\n    selector: 'week-view-topbar',\n    template: `\n        <button mat-button class=\"w-12 xl:w-auto\" (click)=\"newBooking()\">\n            <div class=\"flex items-center\">\n                <app-icon\n                    class=\"mr-2\"\n                    [icon]=\"{ class: 'material-icons', content: 'add' }\"\n                ></app-icon>\n                <div class=\"hidden xl:block\">New Booking</div>\n            </div>\n        </button>\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"zones\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option *ngFor=\"let level of levels | async\" [value]=\"level.id\">\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-slide-toggle\n            class=\"m-2\"\n            [ngModel]=\"(options | async)?.show_weekends\"\n            (ngModelChange)=\"setWeekends($event)\"\n            ><div class=\"text-xs\">Show weekends</div></mat-slide-toggle\n        >\n        <div class=\"flex-1 w-0\"></div>\n        <!-- <searchbar class=\"mr-2\"></searchbar> -->\n        <date-options (dateChange)=\"setDate($event)\"></date-options>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n            }\n\n            button {\n                min-width: 0;\n                padding: 0 .85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n                margin-left: 1em;\n            }\n        `,\n    ],\n})\nexport class WeekViewTopbarComponent extends BaseClass implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n    /** Options set for week view */\n    public readonly options = this._state.options;\n    /** Set filtered date */\n    public readonly setDate = (d) => this._state.setDate(d);\n    /** Set filtered date */\n    public readonly setWeekends = (d) => this._state.setUIOptions({ show_weekends: d });\n    /**  */\n    public readonly newBooking = (d?) => this._state.newBooking(d);\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._state.setZones(z);\n    };\n\n    constructor(\n        private _state: EventsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) => levels.find((lvl) => lvl.id === zone));\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { CalendarEvent } from '@user-interfaces/events';\nimport { EventsStateService } from '../day-view/events-state.service';\n\n@Component({\n    selector: 'week-view-event',\n    template: `\n            <div\n                content\n                matRipple\n                (click)=\"view(event)\"\n                [class]=\"\n                    'm-2 p-2 bg-white shadow rounded border-2 text-black text-left font-normal ' +\n                    (event.state === 'done' ? 'done' : event?.type)\n                \"\n            >\n                <div class=\"text-base\">{{ event?.title }}</div>\n                <div class=\"text-sm\">{{ event?.date | date: 'shortTime' }}</div>\n                <div class=\"text-sm\">\n                    {{ event?.attendees.length }} Attendee{{\n                        event?.attendees.length === 1 ? '' : 's'\n                    }}\n                </div>\n            </div>\n    `,\n    styles: [\n        `\n            button {\n                background: none !important;\n                border: none !important;\n            }\n\n            [content] {\n                width: calc(100% - 1rem);\n            }\n\n            .done {\n                opacity: 0.5;\n            }\n\n            .done:hover {\n                opacity: 1;\n            }\n\n            .cancelled {\n                border-color: #626262;\n            }\n\n            .external {\n                border-color: #d85be0;\n            }\n\n            .internal {\n                border-color: #00a4c7;\n            }\n        `,\n    ],\n})\nexport class WeekViewEventComponent {\n    @Input() public event: CalendarEvent;\n\n    public readonly view = (e) => this._state.setEvent(e);\n\n    constructor(private _state: EventsStateService) {}\n}\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { timePeriodsIntersect } from '@user-interfaces/common';\nimport { addDays, endOfDay, startOfWeek } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EventsStateService } from '../day-view/events-state.service';\n\n@Component({\n    selector: 'week-view-day',\n    template: `\n        <header\n            class=\"flex items-center justify-center border-b border-gray-200 bg-gray-500 w-full py-3 text-white\"\n        >\n            {{ date | async | date: 'EEE, MMM d, y' }}\n        </header>\n        <div class=\"flex-1 h-1/2 overflow-auto w-full\">\n            <ng-container *ngIf=\"(events | async)?.length; else empty_state\">\n                <week-view-event\n                    *ngFor=\"let event of events | async\"\n                    [event]=\"event\"\n                ></week-view-event>\n            </ng-container>\n        </div>\n        <ng-template #empty_state>\n            <p class=\"text-center p-2\">No events</p>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                align-items: center;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class WeekViewDayComponent implements OnChanges {\n    @Input() public index: number;\n\n    private _index = new BehaviorSubject<number>(0);\n\n    public readonly date = this._state.date.pipe(\n        map((date) => addDays(startOfWeek(date), this.index).valueOf())\n    );\n\n    public readonly events = combineLatest([\n        this._state.filtered_week,\n        this._state.date,\n        this._index,\n    ]).pipe(\n        map((details) => {\n            const [events, date, index] = details;\n            const start = addDays(startOfWeek(date), index).valueOf();\n            const end = endOfDay(start).valueOf();\n            return events.filter((bkn) =>\n                timePeriodsIntersect(\n                    start,\n                    end,\n                    bkn.date,\n                    bkn.date + bkn.duration * 60 * 1000\n                )\n            );\n        })\n    );\n\n    constructor(private _state: EventsStateService) {}\n\n    public ngOnChanges(changes: SimpleChanges) {\n        if (changes.index) {\n            this._index.next(this.index);\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { EventsStateService } from '../day-view/events-state.service';\n\n@Component({\n    selector: 'week-view-timeline',\n    template: `\n        <div class=\"flex divide-x border-gray-400 h-full\">\n            <ng-container *ngFor=\"let i of weekdays\">\n                <ng-container\n                    *ngIf=\"(i !== 0 && i !== 6) || (options | async).show_weekends\"\n                >\n                    <week-view-day\n                        class=\"h-full flex-1\"\n                        [index]=\"i\"\n                    ></week-view-day>\n                </ng-container>\n            </ng-container>\n        </div>\n        <mat-progress-bar *ngIf=\"loading | async\" mode=\"indeterminate\"></mat-progress-bar>\n        <view-event-details *ngIf=\"event | async\" [event]=\"event | async\"></view-event-details>\n    `,\n    styles: [\n        `\n            :host {\n                position: relative;\n                height: 100%;\n                width: 100%;\n                overflow: hidden;\n            }\n        `,\n    ],\n})\nexport class WeekViewTimelineComponent implements OnInit, OnDestroy {\n    public readonly weekdays = [0, 1, 2, 3, 4, 5, 6];\n    public readonly options = this._state.options;\n    public readonly event = this._state.event;\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: EventsStateService) {}\n\n    public ngOnInit(): void {\n        this._state.startPollingWeek();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@user-interfaces/spaces';\nimport { SharedUsersModule } from '@user-interfaces/users';\n\nimport { WeekViewComponent } from './week-view.component';\nimport { WeekViewTopbarComponent } from './week-view-topbar.component';\nimport { WeekViewTimelineComponent } from './week-view-timeline.component';\nimport { WeekViewDayComponent } from './week-view-day.component';\nimport { WeekViewEventComponent } from './week-view-event.component';\n\nconst ROUTES: Route[] = [{ path: '', component: WeekViewComponent }];\n\n@NgModule({\n    declarations: [\n        WeekViewComponent,\n        WeekViewTopbarComponent,\n        WeekViewTimelineComponent,\n        WeekViewDayComponent,\n        WeekViewEventComponent\n    ],\n    imports: [CommonModule, FormsModule, UIModule, SharedSpacesModule, SharedUsersModule, RouterModule.forChild(ROUTES)],\n})\nexport class DayViewModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-weekview',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden\">\n            <week-view-topbar></week-view-topbar>\n            <week-view-timeline></week-view-timeline>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `\n    ],\n})\nexport class WeekViewComponent {}\n","<div class=\"user form\" *ngIf=\"form\">\n    <form [formGroup]=\"form\">\n        <div class=\"field\" *ngIf=\"form.controls.name\">\n            <label\n                for=\"name\"\n                [class.error]=\"form.controls.name.invalid && form.controls.name.touched\"\n                >Name<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"name\" placeholder=\"Name\" formControlName=\"name\" />\n                <mat-error *ngIf=\"form.controls.name.invalid\">Name is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.email\">\n            <label\n                for=\"email\"\n                [class.error]=\"form.controls.email.invalid && form.controls.email.touched\"\n                >Email<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"email\" placeholder=\"Email Address\" formControlName=\"email\" />\n                <mat-error *ngIf=\"form.controls.email.invalid\">A valid email is required</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.organisation\">\n            <label\n                for=\"organisation\"\n                [class.error]=\"\n                    form.controls.organisation.invalid && form.controls.organisation.touched\n                \"\n                >Organisation<span>*</span>:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input\n                    matInput\n                    name=\"organisation\"\n                    placeholder=\"Organisation\"\n                    formControlName=\"organisation\"\n                />\n                <mat-error *ngIf=\"form.controls.organisation.invalid\"\n                    >Organisation is required</mat-error\n                >\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.phone\">\n            <label\n                for=\"phone\"\n                [class.error]=\"form.controls.phone.invalid && form.controls.phone.touched\"\n                >Phone:</label\n            >\n            <mat-form-field appearance=\"outline\">\n                <input matInput name=\"phone\" placeholder=\"Phone\" formControlName=\"phone\" />\n                <mat-error *ngIf=\"form.controls.phone.invalid\">Phone format is invalid</mat-error>\n            </mat-form-field>\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.assistance_required\">\n            <mat-checkbox color=\"primary\" formControlName=\"assistance_required\"\n                >Assistance required</mat-checkbox\n            >\n        </div>\n        <div class=\"field\" *ngIf=\"form.controls.visit_expected\">\n            <mat-checkbox color=\"primary\" formControlName=\"visit_expected\"\n                >Visit expected</mat-checkbox\n            >\n        </div>\n    </form>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'user-form',\n  templateUrl: './user-form.component.html',\n  styleUrls: ['./user-form.component.scss']\n})\nexport class UserFormComponent {\n    /** Group of form fields used for creating the system */\n    @Input() public form: FormGroup;\n}\n","import { Point } from '@yuion/svg-viewer';\nimport { HashMap } from '@user-interfaces/common';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | Point;\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n\n    constructor(_data: HashMap) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || {\n                x: _data.x / _data.map_width,\n                y: _data.y / _data.map_height,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen =\n            _data.last_seen || Math.floor(new Date().valueOf() / 1000);\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ComponentsModule } from '@user-interfaces/components';\n\nimport { NewUserModalComponent } from './new-user-modal/new-user-modal.component';\nimport { UserFormComponent } from './user-form/user-form.component';\n\n@NgModule({\n    declarations: [NewUserModalComponent, UserFormComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatDialogModule,\n        ComponentsModule,\n        MatCheckboxModule,\n    ],\n    exports: [NewUserModalComponent],\n})\nexport class SharedUsersModule {}\n"],"sourceRoot":"webpack:///"}