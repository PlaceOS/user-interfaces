{"version":3,"sources":["./node_modules/date-fns/esm/differenceInCalendarDays/index.js","./node_modules/date-fns/esm/differenceInDays/index.js","./apps/concierge/src/app/reports/reports-state.service.ts","./apps/concierge/src/app/reports/reports.utilities.ts","./apps/concierge/src/app/reports/reports-options.component.ts","./apps/concierge/src/app/reports/reports-menu.component.ts","./apps/concierge/src/app/reports/reports.component.ts","./apps/concierge/src/app/reports/spaces/report-spaces-overall.component.ts","./apps/concierge/src/app/reports/spaces/report-spaces-space-listing.component.ts","./apps/concierge/src/app/reports/spaces/report-spaces-user-listing.ts","./apps/concierge/src/app/reports/spaces/report-spaces.component.ts","./apps/concierge/src/app/reports/desks/report-desks-overall-list.component.ts","./apps/concierge/src/app/reports/desks/report-desks-level-list.component.ts","./apps/concierge/src/app/reports/desks/report-desks.component.ts","./apps/concierge/src/app/reports/catering/catering-report-state.service.ts","./apps/concierge/src/app/reports/catering/catering-report-overall.component.ts","./apps/concierge/src/app/reports/catering/catering-report-orders.component.ts","./apps/concierge/src/app/reports/catering/catering-report-items.component.ts","./apps/concierge/src/app/reports/catering/catering-report.component.ts","./apps/concierge/src/app/reports/reports.module.ts"],"names":["MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","requiredArgs","arguments","startOfDayLeft","startOfDay","startOfDayRight","timestampLeft","getTime","getTimezoneOffsetInMilliseconds","timestampRight","Math","round","compareLocalAsc","dateLeft","dateRight","diff","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","differenceInDays","toDate","sign","difference","abs","setDate","isLastDayNotFull","result","ReportsStateService","_org","_generate","Subject","_loading","BehaviorSubject","_active_bookings","_options","start","Date","end","_bookings_list","this","pipe","debounceTime","switchMap","_","options","getValue","next","type","zones","length","of","valueOf","endOfDay","filter","z","join","query","period_start","floor","period_end","zone_ids","catchError","map","shareReplay","loading","asObservable","bookings","counts","filters","Promise","all","name","m","details","toPromise","list","forEach","id","count","stats","combineLatest","util_period","total_users","reduce","c","i","attendees","total_capacity","system","capacity","utilisation","duration","occupancy","avg_length","efficiency","events","generateReportForBookings","total","Object","keys","generateReportForDeskBookings","subscribe","opts","includes","levelsForBuilding","building","lvl","format","bkn","toJSON","server_names","ReportsOptionsComponent","_state","_route","super","types","type_list","levels","active_levels","generateReport","downloadReport","setStartDate","date","setOptions","setEndDate","setZones","initialised","first","subscription","queryParamMap","params","has","get","split","level","levelWithID","buildings","find","bld","parent_id","ReportsMenuComponent","ReportsComponent","_router","parts","url","ReportSpacesOverallComponent","total_count","formatDuration","minutes","toFixed","ReportSpacesSpaceListing","_reports","space_list","booking","resources","space","push","display_name","avg_attendees","usage","period_in_days","download","data","take","ReportSpacesUserListing","user_list","s","user","email","ReportSpacesComponent","ReportDesksOverallListComponent","day_list","dates","isBefore","e","free","approved","addDays","d","ReportDesksLevelListComponent","level_list","zone","ReportDesksComponent","CateringReportStateService","catering_orders","orders","extension_data","catering","o","deliver_at","event","console","log","sort","a","b","catering_items","items","order","item","index","findIndex","options_string","quantity","total_cost","order_count","unique_items","item_count","avg_cost","csv_data","CateringReportOverallComponent","_report","CateringReportOrdersComponent","downloadOrders","CateringReportItemsComponent","ROUTES","path","component","children","CateringReportComponent","redirectTo","ReportsModule"],"mappings":"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","file":"apps_concierge_src_app_reports_reports_module_ts.js","sourcesContent":["import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * var result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * var result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * var result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = compareLocalAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import { Injectable } from '@angular/core';\nimport { showMetadata } from '@placeos/ts-client';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport { downloadFile, HashMap, jsonToCsv, notifyError } from '@placeos/common';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport { differenceInDays, endOfDay, format, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport {\n    generateReportForBookings,\n    generateReportForDeskBookings,\n} from './reports.utilities';\n\nexport interface ReportOptions {\n    type?: 'desks' | 'events';\n    start?: number | Date;\n    end?: number | Date;\n    zones?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ReportsStateService {\n    private _generate = new Subject<number>();\n    private _loading = new BehaviorSubject<string>('');\n    private _active_bookings = new BehaviorSubject<(CalendarEvent | Booking)[]>(\n        []\n    );\n\n    private _options = new BehaviorSubject<ReportOptions>({\n        start: new Date(),\n        end: new Date(),\n    });\n\n    private _bookings_list = this._generate.pipe(\n        debounceTime(500),\n        switchMap((_) => {\n            const options = this._options.getValue();\n            this._loading.next('Loading report details...');\n            if (!options?.type && !options?.zones?.length) return of([]);\n            const start = startOfDay(\n                options?.start ? new Date(options.start) : new Date()\n            ).valueOf();\n            const end = endOfDay(\n                options?.end ? new Date(options.end) : start\n            ).valueOf();\n            const zones = options?.zones\n                ? options.zones.filter((z) => z !== 'All').join(',')\n                : '';\n            const query = {\n                period_start: Math.floor(start / 1000),\n                period_end: Math.floor(end / 1000),\n            };\n            return options.type === 'desks'\n                ? queryBookings({\n                      ...query,\n                      zones: zones,\n                      type: 'desk',\n                  })\n                : queryEvents({ ...query, zone_ids: zones });\n        }),\n        catchError((_) => []),\n        map((_) => {\n            this._loading.next('');\n            if (!_?.length) {\n                notifyError('No bookings for the selected levels and period');\n            }\n            this._active_bookings.next(_ || []);\n            return _;\n        }),\n        shareReplay()\n    );\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly options = this._options.asObservable();\n\n    public readonly bookings = this._active_bookings.asObservable();\n\n    public readonly counts = this._options.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = (filters.zones || []).filter(\n                (z: any) => z !== -1 && z !== 'All'\n            );\n            return Promise.all(\n                zones.map((z) =>\n                    showMetadata(z, {\n                        name: 'desks',\n                    })\n                        .pipe(map((m) => [z, m.details.length]))\n                        .toPromise()\n                )\n            );\n        }),\n        catchError((_) => []),\n        map((list: [string, number][]) => {\n            const map: HashMap<number> = {};\n            this._active_bookings.next([]);\n            list.forEach(([id, count]) => (map[id] = count));\n            return map;\n        }),\n        shareReplay()\n    );\n\n    public readonly stats: Observable<HashMap> = combineLatest([\n        this.counts,\n        this.bookings,\n    ]).pipe(\n        map(([counts, list]) => {\n            return list[0] instanceof CalendarEvent\n                ? generateReportForBookings(\n                      list as CalendarEvent[],\n                      this.duration * 8\n                  )\n                : generateReportForDeskBookings(\n                      (list as Booking[]) || [],\n                      this.duration,\n                      counts\n                  );\n        })\n    );\n\n    public get duration() {\n        const opts = this._options.getValue();\n        return Math.abs(differenceInDays(opts.start, opts.end));\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._bookings_list.subscribe((_) => _);\n    }\n\n    public generateReport() {\n        this._generate.next(new Date().valueOf());\n    }\n\n    public setOptions(options: ReportOptions) {\n        if (options.zones?.includes('All')) {\n            options.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            options.zones &&\n            this._options.getValue()?.zones?.includes('All')\n        ) {\n            options.zones = [];\n        }\n        if (\n            options.start?.valueOf() ===\n                this._options.getValue().start?.valueOf() ||\n            options.end?.valueOf() === this._options.getValue().end?.valueOf()\n        )\n            return;\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public downloadReport() {\n        const options = this._options.getValue();\n        const bookings: HashMap[] = this._active_bookings.getValue();\n        downloadFile(\n            `report+${options.type}+${format(\n                options.start,\n                'yyyy-MM-dd'\n            )}+${format(options.end, 'yyyy-MM-dd')}.csv`,\n            jsonToCsv(\n                bookings.map((bkn) => {\n                    const details = bkn.toJSON();\n                    delete details.zones;\n                    delete details.server_names;\n                    return details;\n                })\n            )\n        );\n    }\n}\n","import { Booking } from '@placeos/bookings';\nimport { HashMap } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nexport function generateReportForDeskBookings(\n    bookings: Booking[],\n    util_period: number = 1,\n    counts: HashMap<number> = {}\n) {\n    const total = Object.keys(counts).reduce((c, i) => c + (counts[i] || 0), 0);\n    const utilisation = bookings.length / total;\n    return {\n        total,\n        count: bookings.length,\n        utilisation,\n        events: bookings,\n    };\n}\n\nexport function generateReportForBookings(\n    bookings: CalendarEvent[],\n    util_period: number = 8\n) {\n    const total_users = bookings.reduce((c, i) => c + i.attendees.length, 0);\n    const total_capacity = bookings.reduce((c, i) => c + i.system?.capacity, 0);\n    const utilisation =\n        bookings.reduce((c, i) => c + i.duration, 0) / (util_period * 60);\n    const occupancy = total_users / total_capacity;\n    return {\n        count: bookings.length,\n        avg_length:\n            bookings.reduce((c, i) => c + i.duration, 0) / bookings.length,\n        efficiency: (utilisation + occupancy) / 2,\n        total_users,\n        total_capacity,\n        occupancy,\n        utilisation,\n        events: bookings,\n    };\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass, Identity } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ReportsStateService } from './reports-state.service';\n\n@Component({\n    selector: 'reports-options',\n    template: `\n        <mat-form-field appearance=\"outline\" class=\"w-48\">\n            <mat-select\n                multiple\n                [ngModel]=\"(options | async)?.zones\"\n                (ngModelChange)=\"setZones($event)\"\n                placeholder=\"Select Levels...\"\n            >\n                <mat-option value=\"All\">All Levels</mat-option>\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\" class=\"w-64\">\n            <mat-date-range-input [rangePicker]=\"picker\">\n                <input\n                    matStartDate\n                    [ngModel]=\"(options | async)?.start\"\n                    (ngModelChange)=\"$event ? setStartDate($event) : ''\"\n                    placeholder=\"Start date\"\n                />\n                <input\n                    matEndDate\n                    [ngModel]=\"(options | async)?.end\"\n                    (ngModelChange)=\"$event ? setEndDate($event) : ''\"\n                    placeholder=\"End date\"\n                />\n            </mat-date-range-input>\n            <mat-datepicker-toggle\n                matSuffix\n                [for]=\"picker\"\n            ></mat-datepicker-toggle>\n            <mat-date-range-picker #picker></mat-date-range-picker>\n        </mat-form-field>\n        <button\n            mat-button\n            class=\"ml-4\"\n            [disabled]=\"!!(loading | async) || !(options | async)?.zones?.length\"\n            (click)=\"generateReport()\"\n        >\n            <mat-spinner *ngIf=\"loading | async\" [diameter]=\"32\"></mat-spinner>\n            <p *ngIf=\"!(loading | async)\">Generate Report</p>\n        </button>\n        <button\n            mat-button\n            class=\"ml-4\"\n            [disabled]=\"!(bookings | async)?.length\"\n            (click)=\"downloadReport()\"\n        >\n            <p>Download Report</p>\n        </button>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n            }\n\n            button {\n                min-width: 0;\n                padding: 0 0.85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                margin-left: 1em;\n            }\n\n            mat-slide-toggle div {\n                width: 5.5em;\n                white-space: initial;\n                line-height: 1.2em;\n            }\n        `,\n    ],\n})\nexport class ReportsOptionsComponent extends BaseClass {\n    /** List of selected levels */\n    public zones: string[] = [];\n\n    public readonly types: Identity[] = [\n        { id: 'internal', name: 'Internal' },\n        { id: 'external', name: 'External' },\n        { id: 'cancelled', name: 'Cancelled' },\n    ];\n    /** List of selected types */\n    public type_list: string[] = this.types.map((i) => `${i.id}`);\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly loading = this._state.loading;\n\n    public readonly bookings = this._state.bookings;\n\n    public readonly options = this._state.options;\n\n    public readonly generateReport = () => this._state.generateReport();\n\n    public readonly downloadReport = () => this._state.downloadReport();\n\n    public readonly setStartDate = (date) =>\n        this._state.setOptions({ start: new Date(date) });\n\n    public readonly setEndDate = (date) =>\n        this._state.setOptions({ end: new Date(date) });\n\n    public readonly setZones = (zones) => this._state.setOptions({ zones });\n\n    constructor(\n        private _state: ReportsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.setZones(zones);\n                    }\n                }\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'reports-menu,[reports-menu]',\n    template: `\n        <a\n            [routerLink]=\"['/reports', 'desks']\"\n            matRipple\n            class=\"h-64 w-64 m-4 p-4 flex flex-col items-center justify-center bg-white rounded shadow hover:bg-gray-100\"\n        >\n            <app-icon class=\"text-8xl\">room</app-icon>\n            <h3 class=\"text-xl font-bold mb-4\">Desks</h3>\n            <div class=\"flex items-center\">\n                <p>View Report</p>\n                <app-icon class=\"ml-2\">chevron_right</app-icon>\n            </div>\n        </a>\n        <a\n            [routerLink]=\"['/reports', 'spaces']\"\n            matRipple\n            class=\"h-64 w-64 m-4 p-4 flex flex-col items-center justify-center bg-white rounded shadow hover:bg-gray-100\"\n        >\n            <app-icon class=\"text-8xl\">meeting_room</app-icon>\n            <h3 class=\"text-xl font-bold mb-4\">Rooms</h3>\n            <div class=\"flex items-center\">\n                <p>View Report</p>\n                <app-icon class=\"ml-2\">chevron_right</app-icon>\n            </div>\n        </a>\n        <a\n            [routerLink]=\"['/reports', 'catering']\"\n            matRipple\n            class=\"h-64 w-64 m-4 p-4 flex flex-col items-center justify-center bg-white rounded shadow hover:bg-gray-100\"\n        >\n            <app-icon class=\"text-8xl\">room_service</app-icon>\n            <h3 class=\"text-xl font-bold mb-4\">Catering</h3>\n            <div class=\"flex items-center\">\n                <p>View Report</p>\n                <app-icon class=\"ml-2\">chevron_right</app-icon>\n            </div>\n        </a>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class ReportsMenuComponent {}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: '[app-reports]',\n    template: `\n        <sidebar class=\"h-full\"></sidebar>\n        <main class=\"relative overflow-hidden flex flex-col flex-1 w-1/2 h-full\">\n            <reports-options></reports-options>\n            <div class=\"flex-1 h-1/2 w-full overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <div reports-menu *ngIf=\"path === 'reports'\" class=\"absolute inset-0\"></div>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class ReportsComponent {\n\n    public get path() {\n        const parts = this._router.url.split('/');\n        return parts[parts.length - 1];\n    }\n\n    constructor(private _router: Router) {\n\n    }\n}\n","import { Component } from '@angular/core';\nimport { formatDuration } from 'date-fns';\nimport { map } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-spaces-overall',\n    template: `\n    <div\n            class=\"m-4 p-4 rounded bg-white shadow flex justify-center items-center space-x-2\"\n        >\n            <div class=\"flex flex-col items-center flex-1\">\n                <h3>Total Bookings</h3>\n                <p>{{ (total_count | async) || 0 }}</p>\n            </div>\n            <div class=\"flex flex-col items-center flex-1\">\n                <h3>Average Bookings Length</h3>\n                <p>{{ (avg_length | async) || 'None' }}</p>\n            </div>\n        </div>\n        <div\n            class=\"m-4 p-4 rounded bg-white shadow flex justify-center items-center space-x-2\"\n        >\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>Overall Efficiency</h3>\n                <p>{{ (efficiency | async) || 0 }}%</p>\n            </div>\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>Occupancy</h3>\n                <p>{{ (occupancy | async) || 0 }}%</p>\n            </div>\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>Total Attendees</h3>\n                <p>{{ (total_users | async) || 0 }}</p>\n            </div>\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>Total Capacity</h3>\n                <p>{{ (total_capacity | async) || 0 }}</p>\n            </div>\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>Utilisation</h3>\n                <p>{{ (utilisation | async) || 0 }}%</p>\n            </div>\n        </div>`,\n    styles: [`\n        h3 {\n            font-weight: 500;\n        }\n\n        p:not([simple]) {\n            font-size: 1.75rem;\n        }\n    `],\n})\nexport class ReportSpacesOverallComponent {\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly avg_length = this._state.stats.pipe(\n        map((i) => formatDuration({ minutes: i.avg_length || 0 }))\n    );\n    public readonly efficiency = this._state.stats.pipe(\n        map((i) => ((i.efficiency || 0) * 100).toFixed(1))\n    );\n    public readonly total_users = this._state.stats.pipe(\n        map((i) => i.total_users || 0)\n    );\n    public readonly total_capacity = this._state.stats.pipe(\n        map((i) => i.total_capacity || 0)\n    );\n    public readonly occupancy = this._state.stats.pipe(\n        map((i) => ((i.occupancy || 0) * 100).toFixed(1))\n    );\n    public readonly utilisation = this._state.stats.pipe(\n        map((i) => ((i.utilisation || 0) * 100).toFixed(1))\n    );\n\n    constructor(private _state: ReportsStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { downloadFile, jsonToCsv } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { differenceInDays } from 'date-fns';\nimport { combineLatest } from 'rxjs';\nimport { debounceTime, map, take } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-spaces-space-listing',\n    template: `\n        <div class=\"m-4 rounded bg-white shadow overflow-hidden\">\n            <div class=\"border-b border-gray-300 px-4 py-2 flex items-center\">\n                <h3 class=\"font-bold text-xl flex-1\">Space Utilisation</h3>\n                <button mat-icon-button (click)=\"download()\">\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                [dataSource]=\"space_list\"\n                [pagination]=\"true\"\n                [columns]=\"[\n                    'name',\n                    'capacity',\n                    'count',\n                    'utilisation',\n                    'avg_attendees',\n                    'occupancy'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Capacity',\n                    'Meeting Count',\n                    'Utilisation',\n                    'Avg. Attendees',\n                    'Occupancy'\n                ]\"\n                [column_size]=\"['flex']\"\n            ></custom-table>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ReportSpacesSpaceListing {\n\n    public readonly space_list = combineLatest([\n        this._reports.stats,\n        this._reports.options,\n    ]).pipe(\n        debounceTime(300),\n        map(([stats, { start, end }]) => {\n            let list = [];\n            for (const booking of stats.events) {\n                const resources: Space[] = booking.resources || [];\n                for (const space of resources) {\n                    if (!list.find((_) => _.id === space.id)) {\n                        list.push({\n                            id: space.id,\n                            name: space.display_name || space.name,\n                            capacity: space.capacity || 1,\n                            count: 0,\n                            attendees: 0,\n                            avg_attendees: 0,\n                            usage: 0,\n                            utilisation: 0,\n                            occupancy: 0,\n                        });\n                    }\n                    const details = list.find((_) => _.id === space.id);\n                    details.count += 1;\n                    details.usage += booking.duration;\n                    details.attendees += booking.attendees.length;\n                }\n            }\n            const period_in_days = differenceInDays(end, start);\n            for (const space of list) {\n                space.avg_attendees = space.attendees / space.count;\n                space.utilisation = space.usage / 60 / 8 / period_in_days;\n                space.occupancy = space.avg_attendees / space.capacity;\n            }\n            return list;\n        })\n    );\n\n    public readonly download = async () => {\n        const data = await this.space_list.pipe(take(1)).toPromise();\n        downloadFile('report-spaces-usage.csv', jsonToCsv(data));\n    };\n\n    constructor(private _reports: ReportsStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { downloadFile, jsonToCsv } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { combineLatest } from 'rxjs';\nimport { debounceTime, map, shareReplay, take } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-spaces-user-listing',\n    template: `\n        <div class=\"m-4 rounded bg-white shadow overflow-hidden\">\n            <div class=\"border-b border-gray-300 px-4 py-2 flex items-center\">\n                <h3 class=\"font-bold text-xl flex-1\">Staff Utilisation</h3>\n                <button mat-icon-button (click)=\"download()\">\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                [dataSource]=\"user_list\"\n                [pagination]=\"true\"\n                [columns]=\"[\n                    'name',\n                    'capacity',\n                    'count',\n                    'avg_attendees',\n                    'occupancy'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Capacity',\n                    'Meeting Count',\n                    'Avg. Attendees',\n                    'Occupancy'\n                ]\"\n                [column_size]=\"['flex']\"\n            ></custom-table>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ReportSpacesUserListing {\n    public readonly user_list = combineLatest([this._reports.stats]).pipe(\n        debounceTime(300),\n        map(([stats]) => {\n            let list = [];\n            for (const booking of stats.events) {\n                const attendees: User[] = booking.attendees || [];\n                const capacity =\n                    booking.resources.reduce((c, s) => c + s.capacity, 0) || 1;\n                for (const user of attendees) {\n                    if (!list.find((_) => _.email === user.email)) {\n                        list.push({\n                            id: user.email,\n                            name: user.name,\n                            capacity,\n                            count: 0,\n                            attendees: 0,\n                            avg_attendees: 0,\n                            occupancy: 0,\n                        });\n                    }\n                    const details = list.find((_) => _.id === user.email);\n                    details.count += 1;\n                    details.attendees += booking.attendees.length;\n                }\n            }\n            for (const space of list) {\n                space.avg_attendees = space.attendees / space.count;\n                space.occupancy = space.avg_attendees / space.capacity;\n            }\n            return list;\n        }),\n        shareReplay(1)\n    );\n\n    public readonly download = async () => {\n        const data = await this.user_list.pipe(take(1)).toPromise();\n        downloadFile('report-space-attendee-usage.csv', jsonToCsv(data));\n    };\n\n    constructor(private _reports: ReportsStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: '[report-spaces]',\n    template: `\n        <ng-container *ngIf=\"!(loading | async); else load_state\">\n            <ng-container *ngIf=\"total_count | async; else empty_state\">\n                <report-spaces-overall></report-spaces-overall>\n                <report-spaces-space-listing></report-spaces-space-listing>\n                <report-spaces-user-listing></report-spaces-user-listing>\n            </ng-container>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n                <p simple>Loading report data...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <p simple>\n                    Select levels and time period to generate a report.\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n        `,\n    ],\n})\nexport class ReportSpacesComponent {\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: ReportsStateService) {}\n\n    public ngOnInit() {\n        this._state.setOptions({ type: 'events' });\n    }\n}\n","import { Component } from '@angular/core';\nimport { Booking } from '@placeos/bookings';\nimport { downloadFile, jsonToCsv, timePeriodsIntersect } from '@placeos/common';\nimport { addDays, endOfDay, format, isBefore, startOfDay } from 'date-fns';\nimport { combineLatest } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-desks-overall-list',\n    template: `\n        <div class=\"m-4 rounded bg-white shadow overflow-hidden\">\n            <div class=\"border-b border-gray-300 p-4 flex items-center\">\n                <h3 class=\"font-bold text-xl flex-1\">Daily Utilisation</h3>\n                <button mat-icon-button (click)=\"download()\">\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                red-header\n                [dataSource]=\"day_list\"\n                [pagination]=\"true\"\n                [columns]=\"['date', 'usage', 'approved', 'count', 'utilisation']\"\n                [display_column]=\"['Date', 'Used Desks', 'Approved Bookings', 'Total Requests', 'Utilisation']\"\n                [column_size]=\"['flex']\"\n            ></custom-table>\n        </div>\n    `,\n})\nexport class ReportDesksOverallListComponent {\n\n    public readonly day_list = combineLatest([\n        this._state.options,\n        this._state.stats,\n    ]).pipe(\n        map(([options, stats]) => {\n            const { start, end } = options;\n            let date = start;\n            const dates = [];\n            while (isBefore(date, end)) {\n                const s = startOfDay(date).valueOf();\n                const e = endOfDay(s).valueOf();\n                const events: Booking[] = stats.events.filter((bkn) =>\n                    timePeriodsIntersect(\n                        s,\n                        e,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                );\n                dates.push({\n                    date: s,\n                    total: stats.total,\n                    free: stats.total - events.length,\n                    approved: events.reduce(\n                        (c, e) => c + (e.approved ? 1 : 0),\n                        0\n                    ),\n                    count: events.length,\n                    utilisation: ((events.length / stats.total) * 100).toFixed(\n                        1\n                    ),\n                });\n                date = addDays(date, 1);\n            }\n            return dates;\n        }),\n        shareReplay(1)\n    );\n\n    public readonly download = async () => {\n        let data = await this.day_list.pipe(take(1)).toPromise();\n        data = data.map(d => ({ ...d, date: format(d.date, 'MMMM d, y(EEE)') }))\n        downloadFile('desks-usage.csv', jsonToCsv(data));\n    }\n\n    constructor(private _state: ReportsStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { downloadFile, jsonToCsv } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { differenceInDays } from 'date-fns';\nimport { combineLatest } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-desks-levels-list',\n    template: `\n        <div class=\"m-4 rounded bg-white shadow overflow-hidden\">\n            <div class=\"border-b border-gray-300 p-4 flex items-center\">\n                <h3 class=\"font-bold text-xl flex-1\">Level Utilisation</h3>\n                <button mat-icon-button (click)=\"download()\">\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                red-header\n                [dataSource]=\"level_list\"\n                [pagination]=\"true\"\n                [columns]=\"[\n                    'name',\n                    'avg_usage',\n                    'approved',\n                    'count',\n                    'utilisation'\n                ]\"\n                [display_column]=\"[\n                    'Level',\n                    'Avg. Used Desks',\n                    'Approved Bookings',\n                    'Total Requests',\n                    'Utilisation'\n                ]\"\n                [column_size]=\"['flex']\"\n            ></custom-table>\n        </div>\n    `,\n})\nexport class ReportDesksLevelListComponent {\n    public readonly level_list = combineLatest([\n        this._state.options,\n        this._state.stats,\n        this._state.counts,\n    ]).pipe(\n        map(([options, stats, counts]) => {\n            const { start, end, zones } = options;\n            const duration = differenceInDays(end, start);\n            const levels = [];\n            for (const zone of zones) {\n                if (zone === 'All') continue;\n                const lvl = this._org.levelWithID([zone]);\n                const count = counts[zone] || 0;\n                const events = stats.events.filter((bkn) =>\n                    bkn.zones.includes(zone)\n                );\n                let free: any = (count * duration - events.length) / duration;\n                if (free % 1 !== 0) {\n                    free = free.toFixed(2);\n                }\n                levels.push({\n                    name: lvl?.display_name || lvl?.name,\n                    free,\n                    total: count,\n                    count: events.length,\n                    utilisation: (\n                        (events.length / (count * duration)) * 100 || 0\n                    ).toFixed(2),\n                });\n            }\n            return levels;\n        }),\n        shareReplay(1)\n    );\n\n    public readonly download = async () => {\n        let data = await this.level_list.pipe(take(1)).toPromise();\n        downloadFile('desks-levels-usage.csv', jsonToCsv(data));\n    };\n\n    constructor(\n        private _state: ReportsStateService,\n        private _org: OrganisationService\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: '[report-desks]',\n    template: `\n        <ng-container *ngIf=\"!(loading | async); else load_state\">\n            <ng-container *ngIf=\"total_count | async; else empty_state\">\n                <div\n                    class=\"m-4 p-4 rounded bg-white shadow flex justify-center items-center space-x-2\"\n                >\n                    <div class=\"flex flex-col items-center flex-1\">\n                        <h3>Total Bookings</h3>\n                        <p>{{ (total_count | async) || 0 }}</p>\n                    </div>\n                    <div class=\"flex flex-col items-center flex-1\">\n                        <h3>Utilisation</h3>\n                        <p>{{ (utilisation | async) || 0 }}%</p>\n                    </div>\n                </div>\n                <report-desks-overall-list></report-desks-overall-list>\n                <report-desks-levels-list></report-desks-levels-list>\n            </ng-container>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n                <p simple>Loading report data...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <p simple>\n                    Select levels and time period to generate a report.\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            h3 {\n                font-weight: 500;\n            }\n\n            p:not([simple]) {\n                font-size: 1.75rem;\n            }\n        `,\n    ],\n})\nexport class ReportDesksComponent {\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly utilisation = this._state.stats.pipe(\n        map((i) => ((i.utilisation || 0) * 100).toFixed(1))\n    );\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: ReportsStateService) {}\n\n    public ngOnInit() {\n        this._state.setOptions({ type: 'desks' });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CateringItem, CateringOrder } from '@placeos/catering';\nimport { downloadFile, flatten, jsonToCsv } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\nimport { combineLatest } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringReportStateService {\n    /** List of catering orders for the selected period and levels */\n    public readonly catering_orders = this._reports.bookings.pipe(\n        map((list) => {\n            const orders: CateringOrder[] = flatten(\n                list\n                    .filter(\n                        (_: CalendarEvent) => _.extension_data?.catering?.length\n                    )\n                    .map((_) =>\n                        _.extension_data?.catering.map(\n                            (o) =>\n                                new CateringOrder({\n                                    ...o,\n                                    deliver_at: _.date,\n                                    event: _,\n                                })\n                        )\n                    )\n            );\n            console.log('Orders:', orders);\n            return orders\n                .filter((_) => _)\n                .sort((a, b) => a.event?.date - b.event?.date);\n        }),\n        shareReplay(1)\n    );\n\n    /** List of catering items for the selected period and levels */\n    public readonly catering_items = this.catering_orders.pipe(\n        map((orders) => {\n            const items: CateringItem[] = [];\n            for (const order of orders) {\n                for (const item of order?.items || []) {\n                    const index = items.findIndex(\n                        (_) => item.options_string === _.options_string\n                    );\n                    if (index >= 0) {\n                        item[index] = new CateringItem({\n                            ...item,\n                            quantity: item?.quantity + item[index]?.quantity,\n                        });\n                    } else {\n                        items.push(item);\n                    }\n                }\n            }\n            return items.sort((a, b) => b.quantity - a.quantity);\n        })\n    );\n\n    public readonly stats = combineLatest([\n        this.catering_orders,\n        this.catering_items,\n    ]).pipe(\n        map(([orders, items]) => {\n            const total_cost = orders.reduce((c, i) => c + i.total_cost, 0);\n            return {\n                order_count: orders.length,\n                unique_items: items.length,\n                item_count: orders.reduce((c, i) => c + i.item_count, 0),\n                total_cost,\n                avg_cost: total_cost / orders.length,\n            };\n        })\n    );\n\n    constructor(private _reports: ReportsStateService) {}\n\n    public async downloadOrders() {\n        const orders = await this.catering_orders.pipe(take(1)).toPromise();\n        const csv_data = jsonToCsv(orders);\n        return downloadFile('catering-orders.csv', csv_data);\n    }\n}\n","import { Component } from '@angular/core';\nimport { CateringReportStateService } from './catering-report-state.service';\n\n@Component({\n    selector: 'catering-report-overall',\n    template: `\n        <div\n            class=\"bg-white shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div class=\"text-3xl\">\n                {{ (stats | async)?.order_count || '0' }}\n            </div>\n            <div class=\"\">Orders</div>\n        </div>\n        <div\n            class=\"bg-white shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div class=\"text-3xl\">\n                {{ (stats | async)?.unique_items || '0' }}\n            </div>\n            <div class=\"\">Unique Items</div>\n        </div>\n        <div\n            class=\"bg-white shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div class=\"text-3xl\">{{ (stats | async)?.item_count || '0' }}</div>\n            <div class=\"\">Ordered Items</div>\n        </div>\n        <div\n            class=\"bg-white shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div class=\"text-3xl\">\n                {{ (stats | async)?.total_cost / 100 || 0 | currency }}\n            </div>\n            <div class=\"\">Total</div>\n        </div>\n        <div\n            class=\"bg-white shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div class=\"text-3xl\">\n                {{ (stats | async)?.avg_cost / 100 || 0 | currency }}\n            </div>\n            <div class=\"\">Order Average</div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                align-items: center;\n                justify-content: center;\n                padding: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringReportOverallComponent {\n    public readonly stats = this._report.stats;\n\n    constructor(private _report: CateringReportStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { CateringReportStateService } from './catering-report-state.service';\n\n@Component({\n    selector: 'catering-report-orders',\n    template: `\n        <div\n            class=\"w-[64rem] max-w-[calc(100%-2rem)] rounded overflow-hidden bg-white shadow mx-auto my-2\"\n        >\n            <div\n                class=\"border-b border-gray-200 flex items-center justify-between px-4\"\n            >\n                <h2 class=\"py-2 text-xl font-medium\">Orders</h2>\n                <button\n                    mat-button-icon\n                    (click)=\"download()\"\n                    matTooltip=\"Download list\"\n                >\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                class=\"w-full h-full\"\n                [dataSource]=\"orders\"\n                [columns]=\"['deliver_at', 'item_count', 'total_cost']\"\n                [display_column]=\"['Date', 'Items', 'Total Cost']\"\n                [column_size]=\"['flex']\"\n                [template]=\"{\n                    deliver_at: date_state,\n                    total_cost: cost_state\n                }\"\n                [pagination]=\"true\"\n                empty=\"No orders for selected period\"\n            ></custom-table>\n            <ng-template #date_state let-data=\"data\">\n                {{ data | date }} at {{ data | date: 'shortTime' }}\n            </ng-template>\n            <ng-template #cost_state let-data=\"data\">\n                {{ data / 100 | currency }}\n            </ng-template>\n        </div>\n    `,\n    styles: [``],\n})\nexport class CateringReportOrdersComponent {\n    public readonly orders = this._report.catering_orders;\n\n    constructor(private _report: CateringReportStateService) {}\n\n    public readonly download = () => this._report.downloadOrders();\n}\n","import { Component } from '@angular/core';\nimport { CateringOption } from '@placeos/catering';\nimport { CateringReportStateService } from './catering-report-state.service';\n\n@Component({\n    selector: 'catering-report-items',\n    template: `\n        <div\n            class=\"w-[64rem] max-w-[calc(100%-2rem)] rounded overflow-hidden bg-white shadow mx-auto my-2\"\n        >\n            <div\n                class=\"border-b border-gray-200 flex items-center justify-between px-4\"\n            >\n                <h2 class=\"py-2 text-xl font-medium\">Ordered Items</h2>\n            </div>\n            <custom-table\n                class=\"w-full h-full\"\n                [dataSource]=\"items\"\n                [columns]=\"[\n                    'name',\n                    'options',\n                    'quantity',\n                    'unit_price',\n                    'total_cost'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Options',\n                    'Quantity',\n                    'Unit Price',\n                    'Total Cost'\n                ]\"\n                [column_size]=\"['flex']\"\n                [template]=\"{\n                    options: option_state,\n                    unit_price: cost_state,\n                    total_cost: cost_state\n                }\"\n                [pagination]=\"true\"\n                empty=\"No orders for selected period\"\n            ></custom-table>\n            <ng-template #option_state let-data=\"data\">\n                <span\n                    class=\"text-xs px-2 py-1 rounded bg-gray-300\"\n                    *ngIf=\"data.length\"\n                    [matTooltip]=\"options(data)\"\n                >\n                    {{ data.length }} option(s)\n                </span>\n            </ng-template>\n            <ng-template #cost_state let-data=\"data\">\n                {{ (data || 0) / 100 | currency }}\n            </ng-template>\n        </div>\n    `,\n    styles: [``],\n})\nexport class CateringReportItemsComponent {\n    public readonly items = this._report.catering_items;\n\n    constructor(private _report: CateringReportStateService) {}\n\n    public options(opts: CateringOption[]) {\n        return opts.map((_) => _.name).join('\\n');\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'catering-report',\n    template: `\n        <ng-container *ngIf=\"!(loading | async); else load_state\">\n            <div\n                class=\"h-full w-full\"\n                *ngIf=\"total_count | async; else empty_state\"\n            >\n                <catering-report-overall></catering-report-overall>\n                <catering-report-orders></catering-report-orders>\n                <catering-report-items></catering-report-items>\n            </div>\n        </ng-container>\n        <ng-template #load_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n                <p simple>Loading report data...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <p simple>\n                    Select levels and time period to generate a report.\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class CateringReportComponent implements OnInit {\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: ReportsStateService) {}\n\n    public ngOnInit() {\n        this._state.setOptions({ type: 'events' });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\nimport { ReportsComponent } from './reports.component';\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\nimport { ReportsOptionsComponent } from './reports-options.component';\nimport { ReportSpacesComponent } from './spaces/report-spaces.component';\nimport { ReportDesksComponent } from './desks/report-desks.component';\nimport { ReportDesksOverallListComponent } from './desks/report-desks-overall-list.component';\nimport { ReportDesksLevelListComponent } from './desks/report-desks-level-list.component';\nimport { ReportsMenuComponent } from './reports-menu.component';\nimport { ReportSpacesOverallComponent } from './spaces/report-spaces-overall.component';\nimport { ReportSpacesSpaceListing } from './spaces/report-spaces-space-listing.component';\nimport { ReportSpacesUserListing } from './spaces/report-spaces-user-listing';\nimport { CateringReportComponent } from './catering/catering-report.component';\nimport { CateringReportOverallComponent } from './catering/catering-report-overall.component';\nimport { CateringReportOrdersComponent } from './catering/catering-report-orders.component';\nimport { CateringReportItemsComponent } from './catering/catering-report-items.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: ReportsComponent,\n        children: [\n            { path: '' },\n            { path: 'spaces', component: ReportSpacesComponent },\n            { path: 'desks', component: ReportDesksComponent },\n            { path: 'catering', component: CateringReportComponent },\n            { path: '**', redirectTo: 'desks' },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [\n        ReportsComponent,\n        ReportsOptionsComponent,\n\n        ReportSpacesComponent,\n        ReportSpacesOverallComponent,\n        ReportSpacesSpaceListing,\n        ReportSpacesUserListing,\n\n        ReportDesksComponent,\n        ReportDesksOverallListComponent,\n        ReportDesksLevelListComponent,\n        ReportsMenuComponent,\n\n        CateringReportComponent,\n        CateringReportOverallComponent,\n        CateringReportOrdersComponent,\n        CateringReportItemsComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatPaginatorModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class ReportsModule {}\n"],"sourceRoot":"webpack:///"}