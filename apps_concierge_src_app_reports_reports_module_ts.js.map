{"version":3,"file":"apps_concierge_src_app_reports_reports_module_ts.js","mappings":"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","names":["i0","DEFAULT_FEATURES","ReportsMenuComponent","constructor","_settings","features","this","get","core","selectors","ReportsComponent","_router","path","parts","url","split","length","ReportsStateService","_org","SpacePipe","Subject","BehaviorSubject","start","Date","end","_generate","pipe","debounceTime","switchMap","_","options","_options","getValue","_loading","next","type","zones","of","startOfDay","valueOf","endOfDay","filter","z","join","query","period_start","Math","floor","period_end","queryBookings","queryEvents","zone_ids","l","Promise","all","map","CalendarEvent","resources","r","_this","_space_pipe","transform","id","email","catchError","notifyError","_active_bookings","shareReplay","asObservable","filters","showMetadata","m","details","toPromise","list","forEach","count","combineLatest","counts","bookings","generateReportForBookings","util_period","max","total_users","reduce","c","i","attendees","total_capacity","system","capacity","utilisation","duration","occupancy","avg_length","efficiency","events","generateReportForDeskBookings","total","Object","keys","stats","date","dates","isBefore","s","e","bkn","timePeriodsIntersect","push","free","approved","toFixed","addDays","_bookings_list","subscribe","opts","abs","differenceInDays","addMinutes","generateReport","setOptions","includes","levelsForBuilding","building","lvl","downloadReport","downloadFile","format","jsonToCsv","toJSON","server_names","extension_data","factory","ReportsOptionsComponent","BaseClass","_state","_route","super","name","types","active_levels","loading","ngOnInit","initialised","first","page","subscription","queryParamMap","params","has","level","levelWithID","buildings","find","bld","parent_id","setZones","ctx","isWeekend","dirtyDate","requiredArgs","arguments","toDate","day","getDay","ReportSpacesOverallComponent","differenceInBusinessDays","dirtyDateLeft","dirtyDateRight","dateLeft","dateRight","isValid","NaN","calendarDifference","differenceInCalendarDays","sign","weeks","toInteger","result","isSameDay","now","formatDuration","minutes","people_count","ReportSpacesSpaceListing","_reports","has_attendance","booking","unique","space","toLowerCase","display_name","attendance","avg_attendance","min_attendance","max_attendance","avg_attendees","usage","no_shows","avg","min","period_in_days","space_list","data","take","ReportSpacesUserListingComponent","host","total_time","hours","user_list","ReportSpacesComponent","ReportDesksOverallListComponent","day_list","d","ReportDesksLevelListComponent","levels","zone","avg_usage","level_list","ReportDesksChartsComponent","updateDailyChart","o","updateLevelChart","labels","series","_day_chart","LineChart","mapping","_level_chart","PieChart","ReportDesksComponent","CateringReportStateService","flatten","catering","CateringOrder","deliver_at","event","sort","a","b","catering_orders","orders","items","order","item","index","findIndex","options_string","CateringItem","quantity","catering_items","total_cost","order_count","unique_items","item_count","avg_cost","downloadOrders","csv_data","CateringReportOverallComponent","_report","code","currency_code","CateringReportOrdersComponent","CateringReportItemsComponent","CateringReportComponent","USER_LIST","GetUserPipe","searchStaff","StaffUser","static","user","pure","ContactTracingStateService","distinctUntilChanged","gen","mod","getModule","system_id","currentUser","execute","username","getUnixTime","catch","err","msg","JSON","stringify","mac_address","contact_time","user_id","contact_id","distance","tap","binding","processed_events","Duration","Distance","ContactTracingOptionsComponent","ContactTracingReportComponent","ROUTES","component","children","redirectTo","pathMatch","ReportsModule","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatPaginatorModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/reports/reports-menu.component.ts","./apps/concierge/src/app/reports/reports.component.ts","./apps/concierge/src/app/reports/reports-state.service.ts","./apps/concierge/src/app/reports/reports.utilities.ts","./apps/concierge/src/app/reports/reports-options.component.ts","./node_modules/date-fns/esm/isWeekend/index.js","./apps/concierge/src/app/reports/spaces/report-spaces-overall.component.ts","./node_modules/date-fns/esm/differenceInBusinessDays/index.js","./apps/concierge/src/app/reports/spaces/report-spaces-space-listing.component.ts","./apps/concierge/src/app/reports/spaces/report-spaces-user-listing.component.ts","./apps/concierge/src/app/reports/spaces/report-spaces.component.ts","./apps/concierge/src/app/reports/desks/report-desks-overall-list.component.ts","./apps/concierge/src/app/reports/desks/report-desks-level-list.component.ts","./apps/concierge/src/app/reports/desks/report-desks-charts.component.ts","./apps/concierge/src/app/reports/desks/report-desks.component.ts","./apps/concierge/src/app/reports/catering/catering-report-state.service.ts","./apps/concierge/src/app/reports/catering/catering-report-overall.component.ts","./apps/concierge/src/app/reports/catering/catering-report-orders.component.ts","./apps/concierge/src/app/reports/catering/catering-report-items.component.ts","./apps/concierge/src/app/reports/catering/catering-report.component.ts","./apps/concierge/src/app/reports/contact-tracing/get-user.pipe.ts","./apps/concierge/src/app/reports/contact-tracing/contact-tracing-state.service.ts","./apps/concierge/src/app/reports/contact-tracing/contact-tracing-options.component.ts","./apps/concierge/src/app/reports/contact-tracing/contact-tracing-report.component.ts","./apps/concierge/src/app/reports/reports.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SettingsService } from '@placeos/common';\nimport { first } from 'rxjs/operators';\n\nconst DEFAULT_FEATURES = [\"desks\", \"spaces\", \"catering\", \"contact-tracing\"];\n\n@Component({\n    selector: 'reports-menu,[reports-menu]',\n    template: `\n        <a\n            [routerLink]=\"['/reports', 'desks']\"\n            matRipple\n            *ngIf=\"features.includes('desks')\"\n            class=\"h-64 w-64 m-4 p-4 flex flex-col items-center justify-center bg-white dark:bg-neutral-700 rounded shadow hover:opacity-80\"\n        >\n            <app-icon class=\"text-8xl\">room</app-icon>\n            <h3 class=\"text-xl font-bold mb-4\">Desks</h3>\n            <div class=\"flex items-center\">\n                <p>View Report</p>\n                <app-icon class=\"ml-2\">chevron_right</app-icon>\n            </div>\n        </a>\n        <a\n            [routerLink]=\"['/reports', 'spaces']\"\n            matRipple\n            *ngIf=\"features.includes('spaces')\"\n            class=\"h-64 w-64 m-4 p-4 flex flex-col items-center justify-center bg-white dark:bg-neutral-700 rounded shadow hover:opacity-80\"\n        >\n            <app-icon class=\"text-8xl\">meeting_room</app-icon>\n            <h3 class=\"text-xl font-bold mb-4\">Rooms</h3>\n            <div class=\"flex items-center\">\n                <p>View Report</p>\n                <app-icon class=\"ml-2\">chevron_right</app-icon>\n            </div>\n        </a>\n        <a\n            [routerLink]=\"['/reports', 'catering']\"\n            matRipple\n            *ngIf=\"features.includes('catering')\"\n            class=\"h-64 w-64 m-4 p-4 flex flex-col items-center justify-center bg-white dark:bg-neutral-700 rounded shadow hover:opacity-80\"\n        >\n            <app-icon class=\"text-8xl\">room_service</app-icon>\n            <h3 class=\"text-xl font-bold mb-4\">Catering</h3>\n            <div class=\"flex items-center\">\n                <p>View Report</p>\n                <app-icon class=\"ml-2\">chevron_right</app-icon>\n            </div>\n        </a>\n        <a\n            [routerLink]=\"['/reports', 'contact-tracing']\"\n            matRipple\n            *ngIf=\"features.includes('contact-tracing')\"\n            class=\"h-64 w-64 m-4 p-4 flex flex-col items-center justify-center bg-white dark:bg-neutral-700 rounded shadow hover:opacity-80\"\n        >\n            <app-icon class=\"text-8xl\">connect_without_contact</app-icon>\n            <h3 class=\"text-xl font-bold mb-4\">Contact Tracing</h3>\n            <div class=\"flex items-center\">\n                <p>View Report</p>\n                <app-icon class=\"ml-2\">chevron_right</app-icon>\n            </div>\n        </a>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: row !important;\n                align-items: center;\n                justify-content: center;\n                background: inherit\n            }\n        `,\n    ],\n})\nexport class ReportsMenuComponent {\n\n    public get features() {\n        return this._settings.get('app.reports.features') || DEFAULT_FEATURES;\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: '[app-reports]',\n    template: `\n        <sidebar class=\"h-full\"></sidebar>\n        <main class=\"relative overflow-hidden flex flex-col flex-1 w-1/2 h-full bg-gray-300 dark:bg-neutral-600\">\n            <router-outlet></router-outlet>\n            <div reports-menu *ngIf=\"path === 'reports'\" class=\"absolute inset-0\"></div>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            main > *:not(router-outlet) {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ReportsComponent {\n\n    public get path() {\n        const parts = this._router.url.split('/');\n        return parts[parts.length - 1];\n    }\n\n    constructor(private _router: Router) {\n\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { showMetadata } from '@placeos/ts-client';\nimport { Booking, queryBookings } from '@placeos/bookings';\nimport {\n    downloadFile,\n    HashMap,\n    jsonToCsv,\n    notifyError,\n    timePeriodsIntersect,\n} from '@placeos/common';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { OrganisationService } from '@placeos/organisation';\nimport {\n    addDays,\n    addMinutes,\n    differenceInDays,\n    endOfDay,\n    format,\n    isBefore,\n    startOfDay,\n} from 'date-fns';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport {\n    generateReportForBookings,\n    generateReportForDeskBookings,\n} from './reports.utilities';\nimport { SpacePipe } from 'libs/spaces/src/lib/space.pipe';\nimport { Space } from 'libs/spaces/src/lib/space.class';\n\nexport interface ReportOptions {\n    type?: 'desks' | 'events';\n    start?: number | Date;\n    end?: number | Date;\n    zones?: string[];\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ReportsStateService {\n    private _space_pipe: SpacePipe = new SpacePipe(this._org);\n    private _generate = new Subject<number>();\n    private _loading = new BehaviorSubject<string>('');\n    private _active_bookings = new BehaviorSubject<(CalendarEvent | Booking)[]>(\n        []\n    );\n\n    private _options = new BehaviorSubject<ReportOptions>({\n        start: new Date(),\n        end: new Date(),\n    });\n\n    private _bookings_list = this._generate.pipe(\n        debounceTime(500),\n        switchMap((_) => {\n            const options = this._options.getValue();\n            this._loading.next('Loading report details...');\n            if (!options?.type && !options?.zones?.length) return of([]);\n            const start = startOfDay(\n                options?.start ? new Date(options.start) : new Date()\n            ).valueOf();\n            const end = endOfDay(\n                options?.end ? new Date(options.end) : start\n            ).valueOf();\n            const zones = options?.zones\n                ? options.zones.filter((z) => z !== 'All').join(',')\n                : '';\n            const query = {\n                period_start: Math.floor(start / 1000),\n                period_end: Math.floor(end / 1000),\n            };\n            return options.type === 'desks'\n                ? queryBookings({\n                      ...query,\n                      zones: zones,\n                      type: 'desk',\n                  })\n                : queryEvents({ ...query, zone_ids: zones }).pipe(\n                      switchMap(async (l) =>\n                          Promise.all(\n                              l.map(\n                                  async (_: CalendarEvent) =>\n                                      new CalendarEvent({\n                                          ..._,\n                                          resources: await Promise.all(\n                                              _.resources.map((r) =>\n                                                  this._space_pipe.transform(\n                                                      r.id || r.email\n                                                  )\n                                              )\n                                          ),\n                                      } as any)\n                              )\n                          )\n                      )\n                  );\n        }),\n        catchError((_) => []),\n        map((_) => {\n            this._loading.next('');\n            if (!_?.length) {\n                notifyError('No bookings for the selected levels and period');\n            }\n            this._active_bookings.next(_ || []);\n            return _;\n        }),\n        shareReplay()\n    );\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly options = this._options.asObservable();\n\n    public readonly bookings = this._active_bookings.asObservable();\n\n    public readonly counts = this._options.pipe(\n        debounceTime(500),\n        switchMap((filters) => {\n            const zones = (filters.zones || []).filter(\n                (z: any) => z !== -1 && z !== 'All'\n            );\n            return Promise.all(\n                zones.map((z) =>\n                    showMetadata(z, 'desks')\n                        .pipe(map((m) => [z, m.details.length]))\n                        .toPromise()\n                )\n            );\n        }),\n        catchError((_) => []),\n        map((list: [string, number][]) => {\n            const map: HashMap<number> = {};\n            this._active_bookings.next([]);\n            list.forEach(([id, count]) => (map[id] = count));\n            return map;\n        }),\n        shareReplay()\n    );\n\n    public readonly stats: Observable<HashMap> = combineLatest([\n        this.counts,\n        this.bookings,\n    ]).pipe(\n        switchMap(async ([counts, list]) => {\n            if (list[0] instanceof CalendarEvent) {\n                return generateReportForBookings(\n                    list as CalendarEvent[],\n                    this.duration * 8\n                );\n            }\n            return generateReportForDeskBookings(\n                (list as Booking[]) || [],\n                this.duration,\n                counts\n            );\n        })\n    );\n\n    public readonly day_list = combineLatest([this.options, this.stats]).pipe(\n        map(([options, stats]) => {\n            const { start } = options;\n            let date = startOfDay(start);\n            const end = endOfDay(options.end || date);\n            const dates = [];\n            while (isBefore(date, end)) {\n                const s = startOfDay(date).valueOf();\n                const e = endOfDay(s).valueOf();\n                const events: Booking[] = stats.events.filter((bkn) =>\n                    timePeriodsIntersect(\n                        s,\n                        e,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                );\n                dates.push({\n                    date: s,\n                    total: stats.total,\n                    free: stats.total - events.length,\n                    approved: events.reduce(\n                        (c, e) => c + (e.approved ? 1 : 0),\n                        0\n                    ),\n                    count: events.length,\n                    utilisation: ((events.length / stats.total) * 100).toFixed(\n                        1\n                    ),\n                });\n                date = addDays(date, 1);\n            }\n            return dates;\n        }),\n        shareReplay(1)\n    );\n\n    public get duration() {\n        const opts = this._options.getValue();\n        return Math.max(\n            1,\n            Math.abs(\n                differenceInDays(\n                    startOfDay(opts.start),\n                    addMinutes(endOfDay(opts.end), 1)\n                )\n            )\n        );\n    }\n\n    constructor(private _org: OrganisationService) {\n        this._bookings_list.subscribe((_) => _);\n    }\n\n    public generateReport() {\n        this._generate.next(new Date().valueOf());\n    }\n\n    public setOptions(options: ReportOptions) {\n        if (options.zones?.includes('All')) {\n            options.zones = [\n                'All',\n                ...this._org\n                    .levelsForBuilding(this._org.building)\n                    .map((lvl) => lvl.id),\n            ];\n        } else if (\n            options.zones &&\n            this._options.getValue()?.zones?.includes('All')\n        ) {\n            options.zones = [];\n        }\n        if (\n            options.start?.valueOf() ===\n                this._options.getValue().start?.valueOf() ||\n            options.end?.valueOf() === this._options.getValue().end?.valueOf()\n        )\n            return;\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public downloadReport() {\n        const options = this._options.getValue();\n        const bookings: HashMap[] = this._active_bookings.getValue();\n        downloadFile(\n            `report+${options.type}+${format(\n                options.start,\n                'yyyy-MM-dd'\n            )}+${format(options.end, 'yyyy-MM-dd')}.csv`,\n            jsonToCsv(\n                bookings.map((bkn) => {\n                    const details = bkn.toJSON();\n                    delete details.zones;\n                    delete details.server_names;\n                    delete details.extension_data;\n                    return details;\n                })\n            )\n        );\n    }\n}\n","import { Booking } from '@placeos/bookings';\nimport { HashMap } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\n\nexport function generateReportForDeskBookings(\n    bookings: Booking[],\n    util_period: number = 1,\n    counts: HashMap<number> = {}\n) {\n    util_period = Math.max(1, util_period);\n    const total = Object.keys(counts).reduce((c, i) => c + (counts[i] || 0), 0);\n    const utilisation =\n        Math.floor((bookings.length / total / util_period) * 10000) / 10000;\n    return {\n        total,\n        count: bookings.length,\n        utilisation,\n        events: bookings,\n    };\n}\n\nexport function generateReportForBookings(\n    bookings: CalendarEvent[],\n    util_period: number = 8\n) {\n    util_period = Math.max(1, util_period);\n    const total_users = bookings.reduce((c, i) => c + i.attendees.length, 0);\n    const total_capacity = bookings.reduce((c, i) => c + i.system?.capacity, 0);\n    const utilisation =\n        Math.floor(\n            (bookings.reduce((c, i) => c + i.duration, 0) /\n                (util_period * 60)) *\n                100\n        ) / 100;\n    const occupancy = Math.floor((total_users / total_capacity) * 100) / 100;\n    return {\n        count: bookings.length,\n        avg_length:\n            Math.floor(\n                (bookings.reduce((c, i) => c + i.duration, 0) /\n                    bookings.length) *\n                    100\n            ) / 100,\n        efficiency: Math.floor(((utilisation + occupancy) / 2) * 100) / 100,\n        total_users,\n        total_capacity,\n        occupancy,\n        utilisation,\n        events: bookings,\n    };\n}\n","import { Component } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass, Identity } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { ReportsStateService } from './reports-state.service';\n\n@Component({\n    selector: 'reports-options',\n    template: `\n        <div\n            class=\"bg-white dark:bg-neutral-700 h-20 w-full flex items-center px-2 shadow z-20 border-b border-gray-200\"\n        >\n            <mat-form-field appearance=\"outline\" class=\"w-48\">\n                <mat-select\n                    multiple\n                    [ngModel]=\"(options | async)?.zones\"\n                    (ngModelChange)=\"setZones($event)\"\n                    placeholder=\"Select Levels...\"\n                >\n                    <mat-option value=\"All\">All Levels</mat-option>\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\" class=\"w-64\">\n                <mat-date-range-input [rangePicker]=\"picker\">\n                    <input\n                        matStartDate\n                        [ngModel]=\"(options | async)?.start\"\n                        (ngModelChange)=\"$event ? setStartDate($event) : ''\"\n                        placeholder=\"Start date\"\n                    />\n                    <input\n                        matEndDate\n                        [ngModel]=\"(options | async)?.end\"\n                        (ngModelChange)=\"$event ? setEndDate($event) : ''\"\n                        placeholder=\"End date\"\n                    />\n                </mat-date-range-input>\n                <mat-datepicker-toggle\n                    matSuffix\n                    [for]=\"picker\"\n                ></mat-datepicker-toggle>\n                <mat-date-range-picker #picker></mat-date-range-picker>\n            </mat-form-field>\n            <button\n                btn\n                matRipple\n                class=\"ml-4\"\n                [disabled]=\"\n                    !!(loading | async) || !(options | async)?.zones?.length\n                \"\n                (click)=\"generateReport()\"\n            >\n                <mat-spinner\n                    *ngIf=\"loading | async\"\n                    [diameter]=\"32\"\n                ></mat-spinner>\n                <p *ngIf=\"!(loading | async)\">Generate Report</p>\n            </button>\n            <button\n                btn\n                matRipple\n                class=\"ml-4\"\n                [disabled]=\"!(bookings | async)?.length\"\n                (click)=\"downloadReport()\"\n            >\n                <p>Download Report</p>\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                min-width: 0;\n                padding: 0 0.85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                margin-left: 1em;\n            }\n\n            mat-slide-toggle div {\n                width: 5.5em;\n                white-space: initial;\n                line-height: 1.2em;\n            }\n        `,\n    ],\n})\nexport class ReportsOptionsComponent extends BaseClass {\n    /** List of selected levels */\n    public zones: string[] = [];\n\n    public readonly types: Identity[] = [\n        { id: 'internal', name: 'Internal' },\n        { id: 'external', name: 'External' },\n        { id: 'cancelled', name: 'Cancelled' },\n    ];\n    /** List of selected types */\n    public type_list: string[] = this.types.map((i) => `${i.id}`);\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly loading = this._state.loading;\n\n    public readonly bookings = this._state.bookings;\n\n    public readonly options = this._state.options;\n\n    public page = '';\n\n    public readonly generateReport = () => this._state.generateReport();\n\n    public readonly downloadReport = () => this._state.downloadReport();\n\n    public readonly setStartDate = (date) =>\n        this._state.setOptions({ start: new Date(date) });\n\n    public readonly setEndDate = (date) =>\n        this._state.setOptions({ end: new Date(date) });\n\n    public readonly setZones = (zones) => this._state.setOptions({ zones });\n\n    constructor(\n        private _state: ReportsStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.page = this._router.url;\n        this.subscription(\n            'routing',\n            this._router.events.subscribe(() => {\n                this.page = this._router.url;\n            })\n        );\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.setZones(zones);\n                    }\n                }\n            })\n        );\n    }\n}\n","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isWeekend\n * @category Weekday Helpers\n * @summary Does the given date fall on a weekend?\n *\n * @description\n * Does the given date fall on a weekend?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date falls on a weekend\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Does 5 October 2014 fall on a weekend?\n * const result = isWeekend(new Date(2014, 9, 5))\n * //=> true\n */\n\nexport default function isWeekend(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day === 0 || day === 6;\n}","import { Component } from '@angular/core';\nimport {\n    differenceInBusinessDays,\n    endOfDay,\n    formatDuration,\n    startOfDay,\n} from 'date-fns';\nimport { map } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-spaces-overall',\n    template: ` <div\n            class=\"m-4 p-4 rounded bg-white dark:bg-neutral-700 shadow flex justify-center items-center space-x-2\"\n        >\n            <div class=\"flex flex-col items-center flex-1\">\n                <h3>Business Days</h3>\n                <p>{{ (business_days | async) || 0 }}</p>\n            </div>\n            <div class=\"flex flex-col items-center flex-1\">\n                <h3>Total Bookings</h3>\n                <p>{{ (total_count | async) || 0 }}</p>\n            </div>\n            <div class=\"flex flex-col items-center flex-1\">\n                <h3>Average Booking Length</h3>\n                <p>{{ (avg_length | async) || 'None' }}</p>\n            </div>\n        </div>\n        <div\n            class=\"m-4 p-4 rounded bg-white dark:bg-neutral-700 shadow flex justify-center items-center space-x-2\"\n            *ngIf=\"has_attendance | async\"\n        >\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>No show count</h3>\n                <p>{{ (no_shows | async) || 0 }}</p>\n            </div>\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>% of No show Bookings</h3>\n                <p>{{ (no_show_percent | async) || 0 }}%</p>\n            </div>\n            <div class=\"flex-1 flex flex-col items-center justify-center\">\n                <h3>Total in-room attendance</h3>\n                <p>{{ (attendance | async) || 0 }}</p>\n            </div>\n        </div>`,\n    styles: [\n        `\n            h3 {\n                font-weight: 500;\n            }\n\n            p:not([simple]) {\n                font-size: 1.75rem;\n            }\n        `,\n    ],\n})\nexport class ReportSpacesOverallComponent {\n    public readonly business_days = this._state.options.pipe(\n        map(\n            ({ start, end }) =>\n                differenceInBusinessDays(\n                    startOfDay(end || Date.now()),\n                    endOfDay(start || Date.now())\n                ) || 1\n        )\n    );\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly avg_length = this._state.stats.pipe(\n        map((i) => formatDuration({ minutes: Math.floor(i.avg_length || 0) }))\n    );\n    public readonly attendance = this._state.stats.pipe(\n        map(({ events }) =>\n            events.reduce(\n                (c, { extension_data }) =>\n                    c + (+extension_data?.people_count?.max || 0),\n                0\n            )\n        )\n    );\n    public readonly no_shows = this._state.stats.pipe(\n        map(({ events }) =>\n            events.reduce(\n                (c, { extension_data }) =>\n                    c + +extension_data?.people_count?.max ? 1 : 0,\n                0\n            )\n        )\n    );\n    public readonly no_show_percent = this._state.stats.pipe(\n        map(\n            ({ events }) =>\n                Math.floor(\n                    (events.reduce(\n                        (c, { extension_data }) =>\n                            c + +extension_data?.people_count?.max ? 1 : 0,\n                        0\n                    ) /\n                        events.length) *\n                        10000\n                ) / 100\n        )\n    );\n    public readonly has_attendance = this._state.stats.pipe(\n        map(\n            ({ events }) =>\n                !!events.find(\n                    ({ extension_data }) => !!extension_data?.people_count\n                )\n        )\n    );\n\n    constructor(private _state: ReportsStateService) {}\n}\n","import addDays from \"../addDays/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport isSameDay from \"../isSameDay/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport isWeekend from \"../isWeekend/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name differenceInBusinessDays\n * @category Day Helpers\n * @summary Get the number of business days between the given dates.\n *\n * @description\n * Get the number of business day periods between the given dates.\n * Business days being days that arent in the weekend.\n * Like `differenceInCalendarDays`, the function removes the times from\n * the dates before calculating the difference.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of business days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many business days are between\n * // 10 January 2014 and 20 July 2014?\n * const result = differenceInBusinessDays(\n *   new Date(2014, 6, 20),\n *   new Date(2014, 0, 10)\n * )\n * //=> 136\n *\n * // How many business days are between\n * // 30 November 2021 and 1 November 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 30),\n *   new Date(2021, 10, 1)\n * )\n * //=> 21\n *\n * // How many business days are between\n * // 1 November 2021 and 1 December 2021?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 11, 1)\n * )\n * //=> -22\n *\n * // How many business days are between\n * // 1 November 2021 and 1 November 2021 ?\n * const result = differenceInBusinessDays(\n *   new Date(2021, 10, 1),\n *   new Date(2021, 10, 1)\n * )\n * //=> 0\n */\n\nexport default function differenceInBusinessDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  if (!isValid(dateLeft) || !isValid(dateRight)) return NaN;\n  var calendarDifference = differenceInCalendarDays(dateLeft, dateRight);\n  var sign = calendarDifference < 0 ? -1 : 1;\n  var weeks = toInteger(calendarDifference / 7);\n  var result = weeks * 5;\n  dateRight = addDays(dateRight, weeks * 7); // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week\n\n  while (!isSameDay(dateLeft, dateRight)) {\n    // sign is used to account for both negative and positive differences\n    result += isWeekend(dateRight) ? 0 : sign;\n    dateRight = addDays(dateRight, sign);\n  }\n\n  return result === 0 ? 0 : result;\n}","import { Component } from '@angular/core';\nimport { downloadFile, jsonToCsv, unique } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { differenceInDays } from 'date-fns';\nimport { combineLatest } from 'rxjs';\nimport { debounceTime, map, take } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-spaces-space-listing',\n    template: `\n        <div\n            class=\"m-4 rounded bg-white dark:bg-neutral-700 shadow overflow-hidden\"\n        >\n            <div\n                class=\"border-b border-gray-300 dark:border-neutral-500 px-4 py-2 flex items-center\"\n            >\n                <h3 class=\"font-bold text-xl flex-1\">Room Utilisation</h3>\n                <button icon (click)=\"download()\">\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                [dataSource]=\"space_list\"\n                [pagination]=\"true\"\n                [columns]=\"column_list | async\"\n                [display_column]=\"column_name_list | async\"\n                [column_size]=\"['flex']\"\n            ></custom-table>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ReportSpacesSpaceListing {\n    public readonly space_list = combineLatest([\n        this._reports.stats,\n        this._reports.options,\n    ]).pipe(\n        debounceTime(300),\n        map(([stats, { start, end }]) => {\n            let list = [];\n            let has_attendance = false;\n            for (const booking of stats.events) {\n                const resources: Space[] = unique(\n                    booking.resources,\n                    'email'\n                ) || [booking.system];\n                for (const space of resources) {\n                    let details = list.find(\n                        (_) =>\n                            _.id === space.id ||\n                            _.id?.toLowerCase() === space.email.toLowerCase()\n                    );\n                    if (!details) {\n                        details = {\n                            id: space.id || space.email,\n                            name: space.display_name || space.name,\n                            capacity: space.capacity || 1,\n                            count: 0,\n                            attendance: 0,\n                            avg_attendance: 0,\n                            min_attendance: 99,\n                            max_attendance: 0,\n                            attendees: 0,\n                            avg_attendees: 0,\n                            usage: 0,\n                            no_shows: 0,\n                            utilisation: 0,\n                            occupancy: 0,\n                        };\n                        if (!details.id || !details.name) continue;\n                        list.push(details);\n                    }\n                    if (booking.extension_data?.people_count?.max === 0) {\n                        details.no_shows += 1;\n                    }\n                    details.count += 1;\n                    details.attendance +=\n                        booking.extension_data?.people_count?.max ?? 0;\n                    details.avg_attendance +=\n                        booking.extension_data?.people_count?.avg ?? 0;\n                    details.min_attendance = Math.min(\n                        details.max_attendance,\n                        booking.extension_data?.people_count?.max ?? 99\n                    );\n                    details.max_attendance = Math.max(\n                        details.max_attendance,\n                        booking.extension_data?.people_count?.max ?? 0\n                    );\n                    details.usage += booking.duration;\n                    details.attendees += booking.attendees.length;\n                    has_attendance =\n                        has_attendance || !!booking.extension_data.people_count;\n                }\n            }\n            const period_in_days = Math.max(\n                1,\n                differenceInDays(end, start) + 1\n            );\n            for (const space of list) {\n                space.avg_attendees =\n                    Math.floor((space.attendees / space.count) * 100) / 100;\n                space.avg_attendance =\n                    Math.floor((space.attendance / space.count) * 100) / 100;\n                space.utilisation = `${Math.floor(\n                    (space.usage / 60 / 8 / period_in_days) * 100\n                )}%`;\n                space.min_attendance =\n                    space.min_attendance === 99 ? '?' : space.min_attendance;\n                space.occupancy = `${\n                    Math.floor((space.avg_attendees / space.capacity) * 1000) /\n                    10\n                }%`;\n                if (space.attendance < 0 || !has_attendance) {\n                    space.attendance = '?';\n                    space.avg_attendance = '?';\n                }\n            }\n            return list;\n        })\n    );\n\n    public readonly has_attendance = this.space_list.pipe(\n        map((_) => !!_.find(({ attendance }) => attendance !== '?'))\n    );\n\n    public readonly column_list = this.has_attendance.pipe(\n        map((_) =>\n            !_\n                ? ['name', 'capacity', 'count', 'utilisation', 'avg_attendees']\n                : [\n                      'name',\n                      'capacity',\n                      'count',\n                      'utilisation',\n                      'avg_attendees',\n                      'attendance',\n                      'avg_attendance',\n                      'no_shows',\n                      'min_attendance',\n                      'max_attendance',\n                  ]\n        )\n    );\n    public readonly column_name_list = this.has_attendance.pipe(\n        map((_) =>\n            !_\n                ? [\n                      'Name',\n                      'Room Capacity',\n                      'Bookings',\n                      '% Time booked during office hrs',\n                      'Avg. invitees per booking',\n                  ]\n                : [\n                      'Name',\n                      'Room Capacity',\n                      'Bookings',\n                      '% Time booked during office hrs',\n                      'Avg. invitees per booking',\n                      'Total In-room Attendance',\n                      'Avg. In-room Attendance',\n                      'No Shows',\n                      'Min. In-room Attendance',\n                      'Max. In-room Attendance',\n                  ]\n        )\n    );\n\n    public readonly download = async () => {\n        const data = await this.space_list.pipe(take(1)).toPromise();\n        downloadFile('report-spaces-usage.csv', jsonToCsv(data));\n    };\n\n    constructor(private _reports: ReportsStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { downloadFile, jsonToCsv } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { formatDuration } from 'date-fns';\nimport { combineLatest } from 'rxjs';\nimport { debounceTime, map, shareReplay, take } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-spaces-user-listing',\n    template: `\n        <div\n            class=\"m-4 rounded bg-white dark:bg-neutral-700 shadow overflow-hidden\"\n        >\n            <div\n                class=\"border-b border-gray-300 dark:border-neutral-500 px-4 py-2 flex items-center\"\n            >\n                <h3 class=\"font-bold text-xl flex-1\">Meeting Organisers</h3>\n                <button icon (click)=\"download()\">\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                [dataSource]=\"user_list\"\n                [pagination]=\"true\"\n                [columns]=\"[\n                    'name',\n                    'count',\n                    'avg_attendees',\n                    'total_time',\n                    'no_shows'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Bookings',\n                    'Avg. Invitees per Booking',\n                    'Total Booked Time',\n                    'No Shows'\n                ]\"\n                [column_size]=\"['flex']\"\n            ></custom-table>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ReportSpacesUserListingComponent {\n    public readonly user_list = combineLatest([this._reports.stats]).pipe(\n        debounceTime(300),\n        map(([stats]) => {\n            let list = [];\n            for (const booking of stats.events) {\n                const host = booking.attendees?.find(\n                    (_) => _.email === booking.host\n                );\n                if (!host) continue;\n                const capacity = Math.max(\n                    booking.resources.reduce((c, s) => c + s.capacity, 0) || 1,\n                    1\n                );\n                let details = list.find(\n                    (_) => _.id?.toLowerCase() === host.email.toLowerCase()\n                );\n                if (!details) {\n                    details = {\n                        id: host.email,\n                        name: host.name,\n                        capacity,\n                        count: 0,\n                        attendees: 0,\n                        avg_attendees: 0,\n                        no_shows: 0,\n                        occupancy: 0,\n                        total_time: 0,\n                    };\n                    list.push(details);\n                }\n                if (booking.extension_data?.people_count?.max === 0) {\n                    details.no_shows += 1;\n                }\n                details.count += 1;\n                details.attendees += booking.attendees.length;\n                details.total_time += booking.duration || 15;\n            }\n            for (const space of list) {\n                space.avg_attendees =\n                    Math.floor((space.attendees / space.count) * 100) / 100;\n                space.occupancy =\n                    Math.floor((space.avg_attendees / space.capacity) * 100) /\n                    100;\n                space.total_time = formatDuration({\n                    hours: Math.floor(space.total_time / 60),\n                    minutes: space.total_time % 60,\n                });\n            }\n            return list;\n        }),\n        shareReplay(1)\n    );\n\n    public readonly download = async () => {\n        const data = await this.user_list.pipe(take(1)).toPromise();\n        downloadFile('report-space-attendee-usage.csv', jsonToCsv(data));\n    };\n\n    constructor(private _reports: ReportsStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: '[report-spaces]',\n    template: `\n        <reports-options></reports-options>\n        <div class=\"relative flex-1 h-1/2 w-full overflow-auto z-0\">\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <ng-container *ngIf=\"total_count | async; else empty_state\">\n                    <report-spaces-overall></report-spaces-overall>\n                    <report-spaces-space-listing></report-spaces-space-listing>\n                    <report-spaces-user-listing></report-spaces-user-listing>\n                </ng-container>\n            </ng-container>\n        </div>\n        <ng-template #load_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n                <p simple>Loading report data...</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div class=\"h-full w-full flex flex-col items-center p-8\">\n                <p simple>\n                    Select levels and time period to generate a report.\n                </p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ReportSpacesComponent {\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: ReportsStateService) {}\n\n    public ngOnInit() {\n        this._state.setOptions({ type: 'events' });\n    }\n}\n","import { Component } from '@angular/core';\nimport { downloadFile, jsonToCsv } from '@placeos/common';\nimport { format } from 'date-fns';\nimport { take } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-desks-overall-list',\n    template: `\n        <div\n            class=\"m-4 rounded bg-white dark:bg-neutral-700 shadow overflow-hidden\"\n        >\n            <div\n                class=\"border-b border-gray-300 dark:border-neutral-500 p-4 flex items-center\"\n            >\n                <h3 class=\"font-bold text-xl flex-1\">Daily Utilisation</h3>\n                <button icon (click)=\"download()\">\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                red-header\n                [dataSource]=\"day_list\"\n                [pagination]=\"true\"\n                [columns]=\"[\n                    'date',\n                    'usage',\n                    'approved',\n                    'count',\n                    'utilisation'\n                ]\"\n                [display_column]=\"[\n                    'Date',\n                    'Used Desks',\n                    'Approved Bookings',\n                    'Total Requests',\n                    'Utilisation'\n                ]\"\n                [column_size]=\"['flex']\"\n                [template]=\"{\n                    date: date_view,\n                    usage: percent_view,\n                    utilisation: percent_view\n                }\"\n            ></custom-table>\n            <ng-template #date_view let-data=\"data\">\n                {{ data | date: 'mediumDate' }}\n            </ng-template>\n            <ng-template #percent_view let-data=\"data\">\n                {{ data || '0' }}%\n            </ng-template>\n        </div>\n    `,\n})\nexport class ReportDesksOverallListComponent {\n    public readonly day_list = this._state.day_list;\n\n    public readonly download = async () => {\n        let data = await this.day_list.pipe(take(1)).toPromise();\n        data = data.map((d) => ({\n            ...d,\n            date: format(d.date, 'MMMM d, y(EEE)'),\n        }));\n        downloadFile('desks-usage.csv', jsonToCsv(data));\n    };\n\n    constructor(private _state: ReportsStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { downloadFile, jsonToCsv } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { differenceInDays } from 'date-fns';\nimport { combineLatest } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'report-desks-levels-list',\n    template: `\n        <div class=\"px-4 mb-4 w-full\">\n            <div\n                class=\"rounded bg-white dark:bg-neutral-700 shadow overflow-hidden w-full\"\n            >\n                <div\n                    class=\"border-b border-gray-300 dark:border-neutral-500 p-4 flex items-center\"\n                >\n                    <h3 class=\"font-bold text-xl flex-1\">Level Utilisation</h3>\n                    <button icon (click)=\"download()\">\n                        <app-icon>download</app-icon>\n                    </button>\n                </div>\n                <custom-table\n                    red-header\n                    [dataSource]=\"level_list\"\n                    [pagination]=\"true\"\n                    [columns]=\"[\n                        'name',\n                        'avg_usage',\n                        'approved',\n                        'count',\n                        'utilisation'\n                    ]\"\n                    [display_column]=\"[\n                        'Level',\n                        'Avg. Used Desks',\n                        'Approved Bookings',\n                        'Total Requests',\n                        'Utilisation'\n                    ]\"\n                    [column_size]=\"['flex']\"\n                    [template]=\"{ utilisation: percent_view }\"\n                ></custom-table>\n                <ng-template #percent_view let-data=\"data\">\n                    {{ data || '0' }}%\n                </ng-template>\n            </div>\n        </div>\n    `,\n})\nexport class ReportDesksLevelListComponent {\n    public readonly level_list = combineLatest([\n        this._state.options,\n        this._state.stats,\n        this._state.counts,\n    ]).pipe(\n        map(([options, stats, counts]) => {\n            const { start, end, zones } = options;\n            const duration = differenceInDays(end, start) || 1;\n            const levels = [];\n            for (const zone of zones) {\n                if (zone === 'All') continue;\n                const lvl = this._org.levelWithID([zone]);\n                const count = counts[zone] || 0;\n                const events = stats.events.filter((bkn) =>\n                    bkn.zones.includes(zone)\n                );\n                let free: any = (count * duration - events.length) / duration;\n                if (free % 1 !== 0) {\n                    free = free.toFixed(2);\n                }\n                levels.push({\n                    name: lvl?.display_name || lvl?.name,\n                    free,\n                    approved: events.filter((_) => _.approved).length || 0,\n                    avg_usage: events.length / duration,\n                    total: count,\n                    count: events.length,\n                    utilisation: (\n                        (events.length / ((count || 1) * duration)) * 100 || 0\n                    ).toFixed(2),\n                });\n            }\n            return levels;\n        }),\n        shareReplay(1)\n    );\n\n    public readonly download = async () => {\n        let data = await this.level_list.pipe(take(1)).toPromise();\n        downloadFile('desks-levels-usage.csv', jsonToCsv(data));\n    };\n\n    constructor(\n        private _state: ReportsStateService,\n        private _org: OrganisationService\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { ReportsStateService } from '../reports-state.service';\n\nimport { LineChart, PieChart } from 'chartist';\nimport { BaseClass } from '@placeos/common';\nimport { format } from 'date-fns';\nimport { OrganisationService } from '@placeos/organisation';\nimport { combineLatest } from 'rxjs';\n\n@Component({\n    selector: 'report-desks-charts',\n    template: `\n        <div class=\"flex items-center space-x-4 w-full px-4\">\n            <div class=\"bg-white dark:bg-neutral-700 rounded shadow flex-1\">\n                <div class=\"border-b border-gray-300 dark:border-neutral-500 p-4 text-xl font-bold\">\n                    Daily Utilisation\n                </div>\n                <div\n                    id=\"day-chart\"\n                    #util_chart\n                    class=\"ct-chart ct-octave\"\n                ></div>\n            </div>\n            <div class=\"bg-white dark:bg-neutral-700 rounded shadow flex-1\">\n                <div class=\"border-b border-gray-300 dark:border-neutral-500 p-4 text-xl font-bold\">\n                    Level Utilisation\n                </div>\n                <div\n                    id=\"level-chart\"\n                    #level_chart\n                    class=\"ct-chart ct-octave\"\n                ></div>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n            }\n        `,\n    ],\n})\nexport class ReportDesksChartsComponent extends BaseClass {\n    public readonly day_list = this._state.day_list;\n    public readonly stats = combineLatest([\n        this._state.options,\n        this._state.counts,\n    ]);\n\n    private _day_chart: any;\n    private _level_chart: any;\n\n    constructor(\n        private _state: ReportsStateService,\n        private _org: OrganisationService\n    ) {\n        super();\n    }\n\n    public ngOnInit() {\n        this.subscription(\n            'day_list',\n            this.day_list.subscribe((l) => this.updateDailyChart(l))\n        );\n        this.subscription(\n            'stats',\n            this.stats.subscribe(([o, c]) => this.updateLevelChart(o, c))\n        );\n    }\n\n    public updateDailyChart(list) {\n        const data = {\n            labels: list.map((_) => format(_.date, 'dd MMM')),\n            series: [list.map((_) => _.utilisation)],\n        };\n        this._day_chart = new LineChart('#day-chart', data);\n    }\n\n    public updateLevelChart(mapping, count) {\n        let { zones } = mapping || {};\n        if (zones.includes('All'))\n            zones = this._org.levels\n                .filter((_) => _.parent_id === this._org.building.id)\n                .map((_) => _.id);\n        const data = {\n            labels: (zones || []).map((_) => {\n                const level = this._org.levelWithID([_]);\n                return level?.display_name || level.name || '';\n            }),\n            series: (zones || []).map((_) => count[_]),\n        };\n        this._level_chart = new PieChart('#level-chart', data);\n    }\n}\n","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\n\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: '[report-desks]',\n    template: `\n        <reports-options></reports-options>\n        <div class=\"flex-1 h-1/2 w-full overflow-auto\">\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <ng-container *ngIf=\"total_count | async; else empty_state\">\n                    <div\n                        class=\"m-4 p-4 rounded bg-white shadow flex justify-center items-center space-x-2\"\n                    >\n                        <div class=\"flex flex-col items-center flex-1\">\n                            <h3>Total Bookings</h3>\n                            <p>{{ (total_count | async) || 0 }}</p>\n                        </div>\n                        <div class=\"flex flex-col items-center flex-1\">\n                            <h3>Utilisation</h3>\n                            <p>{{ (utilisation | async) || 0 }}%</p>\n                        </div>\n                    </div>\n                    <report-desks-charts></report-desks-charts>\n                    <report-desks-overall-list></report-desks-overall-list>\n                    <report-desks-levels-list></report-desks-levels-list>\n                </ng-container>\n            </ng-container>\n            <ng-template #load_state>\n                <div class=\"h-full w-full flex flex-col items-center p-8\">\n                    <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n                    <p simple>Loading report data...</p>\n                </div>\n            </ng-template>\n            <ng-template #empty_state>\n                <div class=\"h-full w-full flex flex-col items-center p-8\">\n                    <p simple>\n                        Select levels and time period to generate a report.\n                    </p>\n                </div>\n            </ng-template>\n        </div>\n    `,\n    styles: [\n        `\n            h3 {\n                font-weight: 500;\n            }\n\n            p:not([simple]) {\n                font-size: 1.75rem;\n            }\n        `,\n    ],\n})\nexport class ReportDesksComponent {\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly utilisation = this._state.stats.pipe(\n        map((i) => ((i.utilisation || 0) * 100).toFixed(1))\n    );\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: ReportsStateService) {}\n\n    public ngOnInit() {\n        this._state.setOptions({ type: 'desks' });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CateringItem, CateringOrder } from '@placeos/catering';\nimport { downloadFile, flatten, jsonToCsv } from '@placeos/common';\nimport { CalendarEvent } from '@placeos/events';\nimport { combineLatest } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CateringReportStateService {\n    /** List of catering orders for the selected period and levels */\n    public readonly catering_orders = this._reports.bookings.pipe(\n        map((list) => {\n            const orders: CateringOrder[] = flatten(\n                list\n                    .filter(\n                        (_: CalendarEvent) => _.extension_data?.catering?.length\n                    )\n                    .map((_) =>\n                        _.extension_data?.catering.map(\n                            (o) =>\n                                new CateringOrder({\n                                    ...o,\n                                    deliver_at: _.date,\n                                    event: _,\n                                })\n                        )\n                    )\n            );\n            return orders\n                .filter((_) => _)\n                .sort((a, b) => a.event?.date - b.event?.date);\n        }),\n        shareReplay(1)\n    );\n\n    /** List of catering items for the selected period and levels */\n    public readonly catering_items = this.catering_orders.pipe(\n        map((orders) => {\n            const items: CateringItem[] = [];\n            for (const order of orders) {\n                for (const item of order?.items || []) {\n                    const index = items.findIndex(\n                        (_) => item.options_string === _.options_string\n                    );\n                    if (index >= 0) {\n                        item[index] = new CateringItem({\n                            ...item,\n                            quantity: item?.quantity + item[index]?.quantity,\n                        });\n                    } else {\n                        items.push(item);\n                    }\n                }\n            }\n            return items.sort((a, b) => b.quantity - a.quantity);\n        })\n    );\n\n    public readonly stats = combineLatest([\n        this.catering_orders,\n        this.catering_items,\n    ]).pipe(\n        map(([orders, items]) => {\n            const total_cost = orders.reduce((c, i) => c + i.total_cost, 0);\n            return {\n                order_count: orders.length,\n                unique_items: items.length,\n                item_count: orders.reduce((c, i) => c + i.item_count, 0),\n                total_cost,\n                avg_cost: total_cost / orders.length,\n            };\n        })\n    );\n\n    constructor(private _reports: ReportsStateService) {}\n\n    public async downloadOrders() {\n        const orders = await this.catering_orders.pipe(take(1)).toPromise();\n        const csv_data = jsonToCsv(orders);\n        return downloadFile('catering-orders.csv', csv_data);\n    }\n}\n","import { Component } from '@angular/core';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CateringReportStateService } from './catering-report-state.service';\n\n@Component({\n    selector: 'catering-report-overall',\n    template: `\n        <div\n            class=\"bg-white dark:bg-neutral-700 shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div count class=\"text-3xl\">\n                {{ (stats | async)?.order_count || '0' }}\n            </div>\n            <div class=\"\">Orders</div>\n        </div>\n        <div\n            class=\"bg-white dark:bg-neutral-700 shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div unique class=\"text-3xl\">\n                {{ (stats | async)?.unique_items || '0' }}\n            </div>\n            <div class=\"\">Unique Items</div>\n        </div>\n        <div\n            class=\"bg-white dark:bg-neutral-700 shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div items class=\"text-3xl\">{{ (stats | async)?.item_count || '0' }}</div>\n            <div class=\"\">Ordered Items</div>\n        </div>\n        <div\n            class=\"bg-white dark:bg-neutral-700 shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div total class=\"text-3xl\">\n                {{ (stats | async)?.total_cost / 100 || 0 | currency:code }}\n            </div>\n            <div class=\"\">Total</div>\n        </div>\n        <div\n            class=\"bg-white dark:bg-neutral-700 shadow rounded m-2 px-8 w-48 h-24 flex flex-col items-center justify-center\"\n        >\n            <div average class=\"text-3xl\">\n                {{ (stats | async)?.avg_cost / 100 || 0 | currency:code }}\n            </div>\n            <div class=\"\">Order Average</div>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-wrap: wrap;\n                align-items: center;\n                justify-content: center;\n                padding: 0.5rem;\n            }\n        `,\n    ],\n})\nexport class CateringReportOverallComponent {\n    public readonly stats = this._report.stats;\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(private _report: CateringReportStateService, private _org: OrganisationService) {}\n}\n","import { Component } from '@angular/core';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CateringReportStateService } from './catering-report-state.service';\n\n@Component({\n    selector: 'catering-report-orders',\n    template: `\n        <div\n            class=\"w-[64rem] max-w-[calc(100%-2rem)] rounded overflow-hidden bg-white dark:bg-neutral-700 shadow mx-auto my-2\"\n        >\n            <div\n                class=\"border-b border-gray-200 dark:border-neutral-500 flex items-center justify-between px-4\"\n            >\n                <h2 class=\"py-2 text-xl font-medium\">Orders</h2>\n                <button\n                    matRipple-icon\n                    (click)=\"download()\"\n                    matTooltip=\"Download list\"\n                >\n                    <app-icon>download</app-icon>\n                </button>\n            </div>\n            <custom-table\n                class=\"w-full h-full\"\n                [dataSource]=\"orders\"\n                [columns]=\"['deliver_at', 'item_count', 'total_cost']\"\n                [display_column]=\"['Date', 'Items', 'Total Cost']\"\n                [column_size]=\"['flex']\"\n                [template]=\"{\n                    deliver_at: date_state,\n                    total_cost: cost_state\n                }\"\n                [pagination]=\"true\"\n                empty=\"No orders for selected period\"\n            ></custom-table>\n            <ng-template #date_state let-data=\"data\">\n                {{ data | date }} at {{ data | date: 'shortTime' }}\n            </ng-template>\n            <ng-template #cost_state let-data=\"data\">\n                {{ data / 100 | currency: code }}\n            </ng-template>\n        </div>\n    `,\n    styles: [``],\n})\nexport class CateringReportOrdersComponent {\n    public readonly orders = this._report.catering_orders;\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(\n        private _report: CateringReportStateService,\n        private _org: OrganisationService\n    ) {}\n\n    public readonly download = () => this._report.downloadOrders();\n}\n","import { Component } from '@angular/core';\nimport { CateringOption } from '@placeos/catering';\nimport { OrganisationService } from '@placeos/organisation';\nimport { CateringReportStateService } from './catering-report-state.service';\n\n@Component({\n    selector: 'catering-report-items',\n    template: `\n        <div\n            class=\"w-[64rem] max-w-[calc(100%-2rem)] rounded overflow-hidden bg-white dark:bg-neutral-700 shadow mx-auto my-2\"\n        >\n            <div\n                class=\"border-b border-gray-200 dark:border-neutral-500 flex items-center justify-between px-4\"\n            >\n                <h2 class=\"py-2 text-xl font-medium\">Ordered Items</h2>\n            </div>\n            <custom-table\n                class=\"w-full h-full\"\n                [dataSource]=\"items\"\n                [columns]=\"[\n                    'name',\n                    'options',\n                    'quantity',\n                    'unit_price',\n                    'total_cost'\n                ]\"\n                [display_column]=\"[\n                    'Name',\n                    'Options',\n                    'Quantity',\n                    'Unit Price',\n                    'Total Cost'\n                ]\"\n                [column_size]=\"['flex']\"\n                [template]=\"{\n                    options: option_state,\n                    unit_price: cost_state,\n                    total_cost: cost_state\n                }\"\n                [pagination]=\"true\"\n                empty=\"No orders for selected period\"\n            ></custom-table>\n            <ng-template #option_state let-data=\"data\">\n                <span\n                    class=\"text-xs px-2 py-1 rounded bg-gray-300\"\n                    *ngIf=\"data.length\"\n                    [matTooltip]=\"options(data)\"\n                >\n                    {{ data.length }} option(s)\n                </span>\n            </ng-template>\n            <ng-template #cost_state let-data=\"data\">\n                {{ (data || 0) / 100 | currency:code }}\n            </ng-template>\n        </div>\n    `,\n    styles: [``],\n})\nexport class CateringReportItemsComponent {\n    public readonly items = this._report.catering_items;\n\n    public get code() {\n        return this._org.currency_code;\n    }\n\n    constructor(private _report: CateringReportStateService, private _org: OrganisationService) {}\n\n    public options(opts: CateringOption[]) {\n        return opts.map((_) => _.name).join('\\n');\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\n\n@Component({\n    selector: 'catering-report',\n    template: `\n        <reports-options></reports-options>\n        <div class=\"flex-1 h-1/2 w-full overflow-auto\">\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <div\n                    class=\"h-full w-full\"\n                    *ngIf=\"total_count | async; else empty_state\"\n                >\n                    <catering-report-overall></catering-report-overall>\n                    <catering-report-orders></catering-report-orders>\n                    <catering-report-items></catering-report-items>\n                </div>\n            </ng-container>\n            <ng-template #load_state>\n                <div class=\"h-full w-full flex flex-col items-center p-8\">\n                    <mat-spinner [diameter]=\"32\" class=\"mb-4\"></mat-spinner>\n                    <p simple>Loading report data...</p>\n                </div>\n            </ng-template>\n            <ng-template #empty_state>\n                <div class=\"h-full w-full flex flex-col items-center p-8\">\n                    <p simple>\n                        Select levels and time period to generate a report.\n                    </p>\n                </div>\n            </ng-template>\n        </div>\n    `,\n    styles: [``],\n})\nexport class CateringReportComponent implements OnInit {\n    public readonly total_count = this._state.stats.pipe(\n        map((i) => i.count || 0)\n    );\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: ReportsStateService) {}\n\n    public ngOnInit() {\n        this._state.setOptions({ type: 'events' });\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { searchStaff, StaffUser } from '@placeos/users';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, shareReplay } from 'rxjs/operators';\n\nconst USER_LIST = {};\n\n@Pipe({\n    name: 'user',\n})\nexport class GetUserPipe implements PipeTransform {\n    /**\n     * Get staff memeber details\n     * @param id ID, Email or Staff ID of the user\n     */\n    public transform(id: string): Observable<StaffUser> {\n        if (!id) return of(null);\n        if (!USER_LIST[id]) {\n            USER_LIST[id] = searchStaff(id).pipe(\n                map((_) => _[0] || new StaffUser({ id, name: id })),\n                catchError(_ => of(new StaffUser({ id, name: id }))),\n                shareReplay(1)\n            );\n        }\n        return USER_LIST[id];\n    }\n\n    public static addUser(user: StaffUser) {\n        USER_LIST[user.id] = of(user).pipe(shareReplay(1));\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    currentUser,\n    downloadFile,\n    jsonToCsv,\n    notifyError,\n    randomInt,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { getModule } from '@placeos/ts-client';\nimport { StaffUser } from '@placeos/users';\nimport { getUnixTime, format, startOfDay, endOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    distinctUntilChanged,\n    filter,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ReportsStateService } from '../reports-state.service';\nimport { GetUserPipe } from './get-user.pipe';\n\nexport interface ContactTracingOptions {\n    start: number | Date;\n    end: number | Date;\n    zones?: string[];\n    user?: StaffUser;\n}\n\nexport interface ContactEvent {\n    id?: string;\n    mac_address?: string;\n    date: number;\n    duration: number;\n    user_id: string;\n    user: string;\n    location_id: string;\n    location_name: string;\n    contact_id: string;\n    contact: string;\n    distance: number;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ContactTracingStateService {\n    private _loading = new BehaviorSubject<string>('');\n    private _generate = new BehaviorSubject<number>(0);\n    private _options = new BehaviorSubject<ContactTracingOptions>({\n        start: startOfDay(Date.now()),\n        end: endOfDay(Date.now()),\n    });\n\n    public readonly events = combineLatest([this._options, this._generate]).pipe(\n        distinctUntilChanged((a, b) => a[1] === b[1]),\n        filter(([_, gen]) => !!gen),\n        switchMap(([{ start, end, user }]) => {\n            if (!user) return of([]);\n            this._loading.next('Loading contact events...');\n            const mod = getModule(this.system_id, 'ContactTracing');\n            user = user || currentUser();\n            GetUserPipe.addUser(user);\n            return this.system_id && mod\n                ? mod\n                      .execute('close_contacts', [\n                          user.email,\n                          user.username,\n                          getUnixTime(start),\n                          getUnixTime(end),\n                      ])\n                      .catch((err) => {\n                          notifyError(`${err?.msg || JSON.stringify(err)}`);\n                          return [];\n                      })\n                : of([]);\n        }),\n        map((list) => {\n            const user = this._options.getValue().user || currentUser();\n            return list.map(\n                (_) =>\n                    ({\n                        mac_address: _.mac_address,\n                        date: _.contact_time * 1000,\n                        duration: Math.floor(_.duration / 60) || 0,\n                        user_id: user.id,\n                        user: user.name,\n                        contact_id: _.username,\n                        distance: 1,\n                    } as ContactEvent)\n            );\n        }),\n        catchError((err) => {\n            notifyError(`${err?.msg || JSON.stringify(err)}`);\n            return of([]);\n        }),\n        tap((_) => this._loading.next('')),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    private get system_id() {\n        return this._org.binding('contact_tracing');\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _reports: ReportsStateService\n    ) {}\n\n    public setOptions(options: Partial<ContactTracingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public generateReport() {\n        this._generate.next(Date.now());\n    }\n\n    public async downloadReport() {\n        const { start, end } = await this._reports.options\n            .pipe(take(1))\n            .toPromise();\n        const events = await this.events.pipe(take(1)).toPromise();\n        const pipe = new GetUserPipe();\n        const processed_events = await Promise.all(\n            events.map(async (_) => ({\n                'MAC Address': _.mac_address,\n                Date: format(_.date, 'dd MMM yyyy, h:mm a'),\n                'User Name': _.user,\n                'Contact Name':\n                    (await pipe.transform(_.contact_id).toPromise())?.name ||\n                    (_.contact_id !== 'null' ? _.contact_id : null) ||\n                    _.mac_address,\n                Duration: `${\n                    Math.floor(_.duration / 60)\n                        ? Math.floor(_.duration / 60) + 'h '\n                        : ''\n                }${Math.floor(_.duration % 60) + 'm'}`,\n                Distance: _.distance,\n            }))\n        );\n        downloadFile(\n            `report+contact-tracing+${format(start, 'yyyy-MM-dd')}+${format(\n                end,\n                'yyyy-MM-dd'\n            )}.csv`,\n            jsonToCsv(processed_events)\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ContactTracingStateService } from './contact-tracing-state.service';\n\n@Component({\n    selector: 'contact-tracing-options',\n    template: `\n        <div\n            class=\"flex items-center space-x-2 w-full p-2 bg-white dark:bg-neutral-700 shadow\"\n        >\n            <mat-form-field appearance=\"outline\" class=\"w-[18rem]\">\n                <mat-date-range-input [rangePicker]=\"picker\">\n                    <input\n                        matStartDate\n                        [ngModel]=\"(options | async)?.start\"\n                        (ngModelChange)=\"\n                            $event\n                                ? setOptions({ start: $event, user: null })\n                                : ''\n                        \"\n                        placeholder=\"Start date\"\n                    />\n                    <input\n                        matEndDate\n                        [ngModel]=\"(options | async)?.end\"\n                        (ngModelChange)=\"\n                            $event\n                                ? setOptions({ end: $event, user: null })\n                                : ''\n                        \"\n                        placeholder=\"End date\"\n                    />\n                </mat-date-range-input>\n                <mat-datepicker-toggle\n                    matSuffix\n                    [for]=\"picker\"\n                ></mat-datepicker-toggle>\n                <mat-date-range-picker #picker></mat-date-range-picker>\n            </mat-form-field>\n            <a-user-search-field\n                class=\"w-64 h-12 mb-2 mt-1\"\n                placeholder=\"Search for user to trace...\"\n                [ngModel]=\"(options | async)?.user\"\n                (ngModelChange)=\"setOptions({ user: $event })\"\n            ></a-user-search-field>\n            <button\n                matRipple\n                [disabled]=\"!(options | async)?.user\"\n                (click)=\"generate()\"\n            >\n                Generate Report\n            </button>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25rem;\n            }\n        `,\n    ],\n})\nexport class ContactTracingOptionsComponent {\n    public readonly options = this._state.options;\n    public readonly setOptions = (_) => this._state.setOptions(_);\n    public readonly generate = () => this._state.generateReport();\n\n    constructor(private _state: ContactTracingStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { formatDuration } from 'date-fns';\nimport { ContactTracingStateService } from './contact-tracing-state.service';\n\n@Component({\n    selector: 'app-contact-tracing-report',\n    template: `\n        <contact-tracing-options></contact-tracing-options>\n        <div class=\"flex-1 h-1/2 w-full overflow-auto\">\n            <ng-container *ngIf=\"!(loading | async); else load_state\">\n                <div\n                    class=\"w-[64rem] max-w-[calc(100%-2rem)] rounded overflow-hidden bg-white dark:bg-neutral-700 shadow mx-auto my-2\"\n                    *ngIf=\"(options | async)?.user; else empty_state\"\n                >\n                    <div\n                        class=\"border-b border-gray-200 dark:border-neutral-500 flex items-center justify-between px-4\"\n                    >\n                        <h2 class=\"py-2 text-xl font-medium\">Contact Events</h2>\n                    </div>\n                    <custom-table\n                        class=\"w-full h-full\"\n                        [dataSource]=\"tracing_events\"\n                        [columns]=\"[\n                            'date',\n                            'user_id',\n                            'contact_id',\n                            'duration'\n                        ]\"\n                        [display_column]=\"[\n                            'Time of Contact',\n                            'Person',\n                            'Close Contact',\n                            'Duration'\n                        ]\"\n                        [column_size]=\"['12r', '14r', 'flex', '10r']\"\n                        [template]=\"{\n                            options: option_state,\n                            date: date_state,\n                            distance: distance_state,\n                            user_id: user_state,\n                            contact_id: user_state,\n                            duration: duration_state\n                        }\"\n                        [pagination]=\"true\"\n                        [page_size]=\"30\"\n                        empty=\"No contact records for selected period\"\n                    ></custom-table>\n                    <ng-template #option_state let-data=\"data\">\n                        <span\n                            class=\"text-xs px-2 py-1 rounded bg-gray-300 dark:bg-neutral-600\"\n                            *ngIf=\"data.length\"\n                            [matTooltip]=\"options(data)\"\n                        >\n                            {{ data.length }} option(s)\n                        </span>\n                    </ng-template>\n                    <ng-template #user_state let-data=\"data\" let-row=\"row\">{{\n                        (data | user | async)?.name || row.mac_address\n                    }}</ng-template>\n                    <ng-template #date_state let-data=\"data\">\n                        {{ data | date: 'mediumDate' }},\n                        {{ data | date: 'shortTime' }}\n                    </ng-template>\n                    <ng-template #duration_state let-data=\"data\">\n                        {{ formatDuration(data || 0) || 'Less than a minute' }}\n                    </ng-template>\n                    <ng-template #distance_state let-data=\"data\">\n                        {{ data }}m\n                    </ng-template>\n                </div>\n            </ng-container>\n        </div>\n        <button\n            icon\n            matRipple\n            class=\"bg-white dark:bg-neutral-700 absolute bottom-2 left-2 shadow\"\n            matTooltip=\"Download Report\"\n            (click)=\"downloadReport()\"\n        >\n            <app-icon>download</app-icon>\n        </button>\n        <ng-template #load_state>\n            <div\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <map-spinner diameter=\"32\"></map-spinner>\n                <p>{{ loading | async }}</p>\n            </div>\n        </ng-template>\n        <ng-template #empty_state>\n            <div\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <p class=\"opacity-60\">Select a user from the topbar to begin</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                width: 100%;\n                height: 100%;\n                display: flex;\n                flex-direction: column;\n            }\n        `,\n    ],\n})\nexport class ContactTracingReportComponent {\n    public readonly loading = this._state.loading;\n    public readonly options = this._state.options;\n    public readonly tracing_events = this._state.events;\n    public readonly setOptions = (_) => this._state.setOptions(_);\n    public readonly downloadReport = () => this._state.downloadReport();\n\n    public readonly formatDuration = (d) =>\n        formatDuration({ hours: Math.floor(d / 60), minutes: d % 60 });\n\n    constructor(private _state: ContactTracingStateService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\nimport { ReportsComponent } from './reports.component';\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\nimport { ReportsOptionsComponent } from './reports-options.component';\nimport { ReportSpacesComponent } from './spaces/report-spaces.component';\nimport { ReportDesksComponent } from './desks/report-desks.component';\nimport { ReportDesksOverallListComponent } from './desks/report-desks-overall-list.component';\nimport { ReportDesksLevelListComponent } from './desks/report-desks-level-list.component';\nimport { ReportsMenuComponent } from './reports-menu.component';\nimport { ReportSpacesOverallComponent } from './spaces/report-spaces-overall.component';\nimport { ReportSpacesSpaceListing } from './spaces/report-spaces-space-listing.component';\nimport { ReportSpacesUserListingComponent } from './spaces/report-spaces-user-listing.component';\nimport { CateringReportComponent } from './catering/catering-report.component';\nimport { CateringReportOverallComponent } from './catering/catering-report-overall.component';\nimport { CateringReportOrdersComponent } from './catering/catering-report-orders.component';\nimport { CateringReportItemsComponent } from './catering/catering-report-items.component';\nimport { ReportDesksChartsComponent } from './desks/report-desks-charts.component';\nimport { ContactTracingReportComponent } from './contact-tracing/contact-tracing-report.component';\nimport { GetUserPipe } from './contact-tracing/get-user.pipe';\nimport { ContactTracingOptionsComponent } from './contact-tracing/contact-tracing-options.component';\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: ReportsComponent,\n        children: [\n            { path: '', component: ReportsOptionsComponent },\n            { path: 'spaces', component: ReportSpacesComponent },\n            { path: 'desks', component: ReportDesksComponent },\n            { path: 'catering', component: CateringReportComponent },\n            {\n                path: 'contact-tracing',\n                component: ContactTracingReportComponent,\n            },\n            { path: '**', redirectTo: 'desks', pathMatch: 'full' },\n        ],\n    },\n];\n\n@NgModule({\n    declarations: [\n        ReportsComponent,\n        ReportsOptionsComponent,\n\n        ReportSpacesComponent,\n        ReportSpacesOverallComponent,\n        ReportSpacesSpaceListing,\n        ReportSpacesUserListingComponent,\n\n        ReportDesksComponent,\n        ReportDesksOverallListComponent,\n        ReportDesksLevelListComponent,\n        ReportDesksChartsComponent,\n        ReportsMenuComponent,\n\n        CateringReportComponent,\n        CateringReportOverallComponent,\n        CateringReportOrdersComponent,\n        CateringReportItemsComponent,\n\n        ContactTracingReportComponent,\n        ContactTracingOptionsComponent,\n        GetUserPipe,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatPaginatorModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class ReportsModule {}\n"],"x_google_ignoreList":[5,7]}