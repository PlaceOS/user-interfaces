{"version":3,"file":"apps_concierge_src_app_staff_staff_module_ts.js","mappings":"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","names":["StaffStateService","AsyncHandler","constructor","_org","_this","super","this","_onsite","_events","_filters","BehaviorSubject","_search","_loading","_users","loading","asObservable","filters","users","filtered_users","combineLatest","pipe","map","details","filter","options","i","name","toLowerCase","includes","email","only_onsite","user_events","switchMap","_ref","_asyncToGenerator","_","next","bookings","queryBookings","period_start","getUnixTime","startOfDay","Date","now","period_end","endOfDay","type","toPromise","checkin_map","valueOf","bkn","timePeriodsIntersect","date","duration","asset_id","checked_in","_x","apply","arguments","shareReplay","loadUsers","subscribe","setFilters","getValue","setSearchString","search","startPolling","delay","interval","stopPolling","clearInterval","checkin","user","_this2","result","saveBooking","booking_start","Math","floor","booking_end","title","description","building","display_name","zones","id","booking_type","checkinBooking","checkout","_this3","event","toJSON","_this4","user_list","searchStaff","sort","a","b","localeCompare","static","__ngFactoryType__","i0","i1","core","jDH","factory","ɵfac","providedIn","level_r1","StaffTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","join","ngOnInit","initialised","first","subscription","queryParamMap","params","has","get","split","length","level","levelWithID","buildings","find","bld","parent_id","zone","lvl","push","i2","i3","VBU","selectors","features","decls","vars","consts","template","rf","ctx","$event","StaffTopbarComponent_mat_option_3_Template","tmp_2_0","StaffDetailsComponent_div_0_div_7_Template","_r1","ctx_r1","onsite","phone","StaffDetailsComponent","catch","e","notifyError","inputs","StaffDetailsComponent_div_0_Template","group_r3","_r2","$implicit","ctx_r3","scrollTo","active_group","group_r7","i_r6","user_r5","events","StaffListingComponent_ng_container_4_ng_container_1_ng_container_1_staff_details_3_Template","StaffListingComponent_ng_container_4_ng_container_1_ng_container_1_Template","StaffListingComponent_ng_container_4_ng_container_1_Template","groups","CHARS","StaffListingComponent","user_count","list","user_map","char","startsWith","timeout","onScroll","scroll_top","_el","nativeElement","scrollTop","group","el","document","querySelector","offsetTop","scrollIntoView","behavior","block","viewQuery","StaffListingComponent_div_1_Template","StaffListingComponent_ng_container_4_Template","StaffListingComponent_mat_progress_bar_6_Template","StaffListingComponent_ng_template_8_Template","empty_state_r8","StaffComponent","ngOnDestroy","attrs","_c0","StaffComponent_mat_progress_bar_4_Template","NewStaffComponent","NewStaffComponent_mat_progress_bar_6_Template","level_r3","role_r4","EmergencyContactModalComponent_main_5_ng_container_34_mat_option_1_Template","setUser","EmergencyContactModalComponent_main_5_mat_option_26_Template","EmergencyContactModalComponent_main_5_ng_container_34_Template","form","tmp_6_0","data","roles","_c1","role_form_r5","_r6","save","_r7","role_name","addRole","EmergencyContactModalComponent","_data","_dialog_ref","_changes","contact","active_building","showMetadata","contacts","FormGroup","FormControl","randomString","_tooltip","close","disableClose","take","updateMetadata","patchValue","value","new_contacts","notifySuccess","MAT_DIALOG_DATA","CustomTooltipComponent","EmergencyContactModalComponent_button_4_Template","EmergencyContactModalComponent_main_5_Template","EmergencyContactModalComponent_footer_6_Template","EmergencyContactModalComponent_ng_template_7_Template","EmergencyContactModalComponent_ng_template_9_Template","load_state_r8","role_r3","active","removeRole","updateRoles","RoleManagementModalComponent","role","r","RoleManagementModalComponent_ng_container_12_Template","RoleManagementModalComponent_ng_template_14_Template","role_r2","row_r4","_r3","row","ctx_r4","copyToClipboard","role_r6","EmergencyContactsComponent_ng_template_34_span_1_Template","data_r7","data_r8","row_r10","_r9","editContact","removeContact","EmergencyContactsComponent","_dialog","_clipboard","_change","role_filter","filtered_contacts","copy","manageRoles","open","afterClosed","openConfirmModal","content","icon","reason","EmergencyContactsComponent_mat_option_23_Template","EmergencyContactsComponent_ng_template_32_Template","EmergencyContactsComponent_ng_template_34_Template","EmergencyContactsComponent_ng_template_36_Template","EmergencyContactsComponent_ng_template_38_Template","_c6","_c2","person_template_r11","_c3","roles_template_r12","_c4","zone_template_r13","_c5","actions_template_r14","ROUTES","path","component","COMPONENTS","StaffModule","$C","G2t","CommonModule","FormsModule","UIModule","RouterModule","forChild","MapLocation","location","position","map_id","x","map_width","y","map_height","variance","last_seen","at_location","coordinates_from"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/staff/staff-state.service.ts","./apps/concierge/src/app/staff/staff-topbar.component.ts","./apps/concierge/src/app/staff/staff-details.component.ts","./apps/concierge/src/app/staff/staff-listing.component.ts","./apps/concierge/src/app/staff/staff.component.ts","./apps/concierge/src/app/staff/new-staff.component.ts","./apps/concierge/src/app/staff/emergency-contact-modal.component.ts","./apps/concierge/src/app/staff/role-management-modal.component.ts","./apps/concierge/src/app/staff/emergency-contacts.component.ts","./apps/concierge/src/app/staff/staff.module.ts","./libs/users/src/lib/location.class.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { searchStaff, StaffUser } from '@placeos/users';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport {\n    Booking,\n    checkinBooking,\n    queryBookings,\n    saveBooking,\n} from '@placeos/bookings';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { AsyncHandler, timePeriodsIntersect } from '@placeos/common';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { OrganisationService } from '@placeos/organisation';\n\nexport interface StaffFilters {\n    date?: number;\n    zones?: string[];\n    only_onsite?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StaffStateService extends AsyncHandler {\n    private _onsite: HashMap<boolean> = {};\n    private _events: HashMap<Booking> = {};\n\n    private _filters = new BehaviorSubject<StaffFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _users = new BehaviorSubject<StaffUser[]>([]);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly users = this._filters.asObservable();\n\n    public readonly filtered_users = combineLatest([\n        this._search,\n        this._users,\n        this._filters,\n    ]).pipe(\n        map((details) => {\n            const [filter, users, options] = details;\n            return users.filter(\n                (i) =>\n                    (!filter ||\n                        i.name.toLowerCase().includes(filter) ||\n                        i.email.toLowerCase().includes(filter)) &&\n                    (!options.only_onsite || this._onsite[i.email])\n            );\n        })\n    );\n\n    public readonly user_events = combineLatest([this._filters]).pipe(\n        switchMap(async (_) => {\n            this._loading.next(true);\n            const bookings = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'staff',\n            }).toPromise();\n            const checkin_map = {};\n            const now = new Date().valueOf();\n            for (const bkn of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        now,\n                        now,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                ) {\n                    checkin_map[bkn.asset_id] = bkn.checked_in;\n                    this._events[bkn.asset_id] = bkn;\n                }\n            }\n            this._onsite = checkin_map;\n            this._loading.next(false);\n            return checkin_map;\n        }),\n        shareReplay(1)\n    );\n\n    constructor(private _org: OrganisationService) {\n        super();\n        this.loadUsers();\n        this.user_events.subscribe();\n    }\n\n    public setFilters(filters: StaffFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.setFilters(this._filters.getValue());\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkin(user: StaffUser) {\n        const result = await saveBooking({\n            booking_start: Math.floor(new Date().valueOf() / 1000),\n            booking_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n            asset_id: user.email,\n            title: 'Checked-in Onsite',\n            description:\n                this._org.building.display_name || this._org.building.name,\n            zones: [this._org.building.id],\n            booking_type: 'staff',\n        } as any).toPromise();\n        await checkinBooking(result.id, true).toPromise();\n        this._events[user.email] = result;\n        this._onsite[user.email] = true;\n    }\n\n    public async checkout(user: StaffUser) {\n        const event = this._events[user.email];\n        if (event) {\n            const result = await saveBooking({\n                ...event.toJSON(),\n                booking_end: Math.floor(new Date().valueOf() / 1000),\n            } as any).toPromise();\n            await checkinBooking(result.id, false).toPromise();\n            this._events[user.email] = result;\n            this._onsite[user.email] = false;\n        }\n    }\n\n    private async loadUsers() {\n        const user_list = await searchStaff('').toPromise();\n        user_list.sort((a, b) => a.name.localeCompare(b.name));\n        this._users.next(user_list);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-slide-toggle\n                class=\"m-2\"\n                [ngModel]=\"(filters | async)?.only_onsite\"\n                (ngModelChange)=\"setFilters({ only_onsite: $event })\"\n                ><div class=\"text-xs\">Onsite Only</div></mat-slide-toggle\n            >\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class StaffTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: StaffStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { StaffUser } from '@placeos/users';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-details',\n    template: `\n        <div\n            class=\"w-full flex items-center px-4 py-2 bg-base-100 border-b border-base-200 hover:opacity-80\"\n            details\n            *ngIf=\"user\"\n        >\n            <a-user-avatar [user]=\"user\"></a-user-avatar>\n            <div class=\"flex flex-col flex-1\">\n                <div class=\"px-2\">{{ user?.name }}</div>\n                <div class=\"px-2 text-xs text-opacity-50\">\n                    {{ user?.email }}\n                </div>\n            </div>\n            <div *ngIf=\"onsite\" class=\"text-xs opacity-50 px-4\">Onsite</div>\n            <div class=\"flex items-center\">\n                <action-icon\n                    [matTooltip]=\"onsite ? 'Checkout Staff' : 'Checkin Staff'\"\n                    [loading]=\"loading\"\n                    [content]=\"onsite ? 'event_busy' : 'event_available'\"\n                    (click)=\"onsite ? checkout() : checkin()\"\n                >\n                </action-icon>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Email Staff\"\n                    [attr.disabled]=\"!user?.email\"\n                    [href]=\"'mailto:' + user?.email\"\n                >\n                    <app-icon>email</app-icon>\n                </a>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Phone Staff\"\n                    [attr.disabled]=\"!user?.phone\"\n                    [href]=\"'tel:' + user?.phone\"\n                >\n                    <app-icon>call</app-icon>\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class StaffDetailsComponent {\n    @Input() public user: StaffUser;\n    @Input() public onsite: boolean;\n\n    public loading: boolean;\n\n    public readonly checkin = async () => {\n        this.loading = true;\n        await this._state\n            .checkin(this.user)\n            .catch((e) => notifyError('Error checking in Staff member'));\n        this.loading = false;\n    };\n    public readonly checkout = async () => {\n        this.loading = true;\n        await this._state\n            .checkout(this.user)\n            .catch((e) => notifyError('Error checking out Staff member'));\n        this.loading = false;\n    };\n\n    constructor(private _state: StaffStateService) {}\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { AsyncHandler } from '@placeos/common';\nimport { map } from 'rxjs/operators';\n\nimport { StaffStateService } from './staff-state.service';\n\nconst CHARS = '#abcdefghijklmnopqrstuvwxyz'.split('');\n\n@Component({\n    selector: 'staff-listings',\n    template: `\n        <div class=\"w-full p-2 flex items-center justify-center\">\n            <div\n                letter\n                *ngFor=\"let group of groups\"\n                class=\"capitalize h-6 w-6 flex items-center justify-center text-xs cursor-pointer\"\n                [class.disabled]=\"(user_list | async)[group].length <= 0\"\n                [class.active]=\"group === active_group\"\n                (click)=\"scrollTo(group)\"\n            >\n                {{ group }}\n            </div>\n        </div>\n        <div\n            class=\"flex-1 overflow-auto w-full relative bg-base-200\"\n            style=\"height: 50%\"\n            #container\n            (scroll)=\"onScroll($event)\"\n        >\n            <ng-container *ngIf=\"user_count | async; else empty_state\">\n                <ng-container *ngFor=\"let group of groups\">\n                    <ng-container *ngIf=\"(user_list | async)[group].length\">\n                        <div\n                            group\n                            [id]=\"'letter-' + (group === '#' ? '0' : group)\"\n                            class=\"capitalize bg-base-200 border-b text-sm font-medium sticky top-0 z-10\"\n                        >\n                            {{ group }}\n                        </div>\n                        <staff-details\n                            *ngFor=\"\n                                let user of (user_list | async)[group];\n                                let i = index\n                            \"\n                            [id]=\"'letter-' + group + '-' + i\"\n                            [user]=\"user\"\n                            [onsite]=\"\n                                (events | async)\n                                    ? (events | async)[user.email]\n                                    : false\n                            \"\n                        ></staff-details>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No matching staff members</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 50%;\n            }\n\n            [letter] {\n                transition: font-size 200ms, color 200ms;\n            }\n\n            [group] {\n                border-color: #ccc;\n                padding: 0.5rem 1.65rem;\n            }\n\n            .disabled {\n                opacity: 0.2;\n                pointer-events: none;\n            }\n\n            .active {\n                font-size: 1.25rem;\n                opacity: 1;\n                color: #d81b60;\n            }\n        `,\n    ],\n})\nexport class StaffListingComponent extends AsyncHandler {\n    public active_group = '#';\n\n    public readonly groups = CHARS;\n    public readonly events = this._state.user_events;\n    public readonly loading = this._state.loading;\n\n    public readonly user_count = this._state.filtered_users.pipe(\n        map((list) => list.length)\n    );\n\n    public readonly user_list = this._state.filtered_users.pipe(\n        map((list) => {\n            const user_map = {};\n            for (const char of CHARS) {\n                user_map[char] = (list || []).filter(\n                    (user) =>\n                        user.name.toLowerCase()[0].startsWith(char) ||\n                        (char === '#' &&\n                            !CHARS.includes(user.name.toLowerCase()[0]))\n                );\n            }\n            this.timeout('scroll', () => this.onScroll({}), 30);\n            return user_map;\n        })\n    );\n\n    @ViewChild('container') private _el: ElementRef<HTMLDivElement>;\n\n    constructor(private _state: StaffStateService) {\n        super();\n    }\n\n    public onScroll(_) {\n        const scroll_top = this._el.nativeElement.scrollTop;\n        for (const group of CHARS) {\n            const el: HTMLDivElement = document.querySelector(\n                `#letter-${group === '#' ? '0' : group}`\n            );\n            if (el) {\n                if (el.offsetTop - scroll_top > 0) {\n                    break;\n                }\n                this.active_group = group;\n            }\n        }\n    }\n\n    public scrollTo(group: string) {\n        const el = document.querySelector(`#letter-${group}-0`);\n        if (el) {\n            el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            this.active_group = group;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-staff]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <staff-topbar class=\"w-full\"></staff-topbar>\n            <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--b1);\n            }\n        `,\n    ],\n})\nexport class StaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-new-staff]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <staff-topbar class=\"w-full\"></staff-topbar>\n                <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewStaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { EmergencyContact } from './emergency-contacts.component';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { notifySuccess, randomString } from '@placeos/common';\nimport { CustomTooltipComponent } from '@placeos/components';\n\n@Component({\n    selector: 'emergency-contact-modal',\n    template: `\n        <header>\n            <h2>{{ contact ? 'Edit' : 'New' }} Emergency Contact</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"p-4 w-[36rem]\" *ngIf=\"!loading; else load_state\">\n            <form [formGroup]=\"form\" class=\"space-y-4\">\n                <a-user-search-field\n                    ngModel\n                    (ngModelChange)=\"setUser($event)\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                    class=\"mb-4\"\n                ></a-user-search-field>\n                <div class=\"flex flex-col\">\n                    <label for=\"name\">Name:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"name\"\n                            placeholder=\"Full name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label for=\"email\">Email:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"email\"\n                                type=\"email\"\n                                placeholder=\"Email address\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1\">\n                        <label for=\"email\">Phone:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"phone\"\n                                type=\"tel\"\n                                placeholder=\"Emergency contact number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"name\">Level:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"zone\"\n                            placeholder=\"All Levels\"\n                        >\n                            <mat-option value=\"\">All Levels</mat-option>\n                            <mat-option\n                                *ngFor=\"let level of levels | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name || level.name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"email\">Roles:</label>\n                    <div class=\"flex items-center space-x-2\">\n                        <mat-form-field\n                            class=\"no-subscript flex-1\"\n                            appearance=\"outline\"\n                        >\n                            <mat-select\n                                multiple\n                                formControlName=\"roles\"\n                                placeholder=\"Select roles\"\n                            >\n                                <ng-container\n                                    *ngFor=\"\n                                        let role of (data | async)?.roles || []\n                                    \"\n                                >\n                                    <mat-option *ngIf=\"role\" [value]=\"role\">\n                                        {{ role }}\n                                    </mat-option>\n                                </ng-container>\n                            </mat-select>\n                        </mat-form-field>\n                        <button\n                            btn\n                            matRipple\n                            class=\"space-x-2\"\n                            customTooltip\n                            [content]=\"role_form\"\n                        >\n                            <app-icon>add</app-icon>\n                            <div class=\"pr-2\">Add New Role</div>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex justify-center items-center p-2 border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Saving contact details...</p>\n            </main>\n        </ng-template>\n        <ng-template #role_form>\n            <div class=\"bg-base-100 p-4 rounded \">\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"role_name\"\n                        placeholder=\"Role name\"\n                    />\n                </mat-form-field>\n                <button btn matRipple class=\"w-full\" (click)=\"addRole()\">\n                    Save Role\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EmergencyContactModalComponent {\n    private _changes = new BehaviorSubject(0);\n\n    public loading = false;\n    public role_name: string;\n    public readonly contact?: EmergencyContact = this._data;\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._changes,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => (details as any) || { roles: [], contacts: [] }),\n        shareReplay(1)\n    );\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || `ecntct-${randomString(8)}`),\n        name: new FormControl(this._data?.name || ''),\n        email: new FormControl(this._data?.email || ''),\n        phone: new FormControl(this._data?.phone || ''),\n        zone: new FormControl(this._data?.zone || ''),\n        roles: new FormControl(this._data?.roles || []),\n    });\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    @ViewChild(CustomTooltipComponent) private _tooltip: CustomTooltipComponent;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EmergencyContact | undefined,\n        private _dialog_ref: MatDialogRef<EmergencyContactModalComponent>,\n        private _org: OrganisationService\n    ) {}\n\n    public async addRole() {\n        if (!this.role_name) return;\n        this._tooltip.close();\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: {\n                roles: [...(data.roles || []), this.role_name].filter(\n                    (_) => !!_\n                ),\n                contacts: data.contacts,\n            },\n        }).toPromise();\n        this._changes.next(0);\n        this.form.patchValue({\n            roles: [...(this.form.value.roles || []), this.role_name],\n        });\n        this.role_name = '';\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n    }\n\n    public setUser(user: any) {\n        this.form.patchValue({\n            name: user?.name,\n            email: user?.email,\n            phone: user?.phone,\n        });\n    }\n\n    public async save() {\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        const contacts = data?.contacts || [];\n        const new_contacts = [\n            ...contacts.filter((_) => _.id !== this.contact?.id),\n            this.form.value,\n        ].sort((a, b) => a.name.localeCompare(b.name));\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: { roles: data.roles || [], contacts: new_contacts },\n        }).toPromise();\n        this._dialog_ref.disableClose = true;\n        notifySuccess('Successfully updated emergency contacts.');\n        this.loading = false;\n        this._dialog_ref.close();\n    }\n}\n","import { Component, ViewChild } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { CustomTooltipComponent } from '@placeos/components';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\n\n@Component({\n    selector: 'role-management-modal',\n    template: `\n        <header>\n            <h2>Manage Roles</h2>\n            <button btn icon matRipple mat-dialog-close>\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"overflow-y-auto min-w-[20rem] divide-y divide-base-200 max-h-[65vh]\"\n        >\n            <button\n                btn\n                matRipple\n                class=\"flex items-center justify-center space-x-2 w-[calc(100%-1rem)] m-2\"\n                customTooltip\n                (click)=\"active = ''; role_name = ''\"\n                [content]=\"role_form\"\n            >\n                <div class=\"truncate\">New Role</div>\n                <app-icon>add</app-icon>\n            </button>\n            <ng-container *ngFor=\"let role of roles | async\">\n                <div\n                    class=\"flex items-center space-x-2 hover:bg-base-200:bg-base-300 p-2\"\n                >\n                    <div class=\"flex-1 truncate\">{{ role }}</div>\n                    <button\n                        btn\n                        icon\n                        matRipple\n                        (click)=\"active = role; role_name = role\"\n                        customTooltip\n                        [content]=\"role_form\"\n                    >\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button btn icon matRipple (click)=\"removeRole(role)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </ng-container>\n        </main>\n        <ng-template #role_form>\n            <div class=\"bg-base-100 p-4 rounded \">\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"role_name\"\n                        placeholder=\"Role name\"\n                    />\n                </mat-form-field>\n                <button btn matRipple class=\"w-full\" (click)=\"updateRoles()\">\n                    Save Role\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class RoleManagementModalComponent {\n    private _changes = new BehaviorSubject(0);\n\n    public active: string;\n    public role_name: string;\n    public loading = false;\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._changes,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => {\n            const value = (details as any) || { roles: [], contacts: [] };\n            if (!value.roles) value.roles = [];\n            if (!value.contacts) value.contacts = [];\n            return value;\n        }),\n        shareReplay(1)\n    );\n    public readonly roles = this.data.pipe(map((_) => _.roles));\n\n    @ViewChild(CustomTooltipComponent) private _tooltip: CustomTooltipComponent;\n\n    public async removeRole(role: string) {\n        if (!role) return;\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: {\n                roles: [...data.roles.filter((_) => _ !== role)]\n                    .filter((_) => !!_)\n                    .sort((a, b) => a.localeCompare(b)),\n                contacts: data.contacts.map((_) => ({\n                    ..._,\n                    roles: _.roles.filter((r) => r !== role),\n                })),\n            },\n        }).toPromise();\n        this._changes.next(0);\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n    }\n\n    public async updateRoles() {\n        if (!this.role_name) return;\n        this.loading = true;\n        this._tooltip.close();\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: {\n                roles: [\n                    ...data.roles.filter((_) => _ !== this.active),\n                    this.role_name,\n                ]\n                    .filter((_) => !!_)\n                    .sort((a, b) => a.localeCompare(b)),\n                contacts: data.contacts,\n            },\n        }).toPromise();\n        this._changes.next(0);\n        this.role_name = '';\n        this.active = '';\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n    }\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog_ref: MatDialogRef<RoleManagementModalComponent>\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { EmergencyContactModalComponent } from './emergency-contact-modal.component';\nimport { notify, notifySuccess, openConfirmModal } from '@placeos/common';\nimport { RoleManagementModalComponent } from './role-management-modal.component';\nimport { Clipboard } from '@angular/cdk/clipboard';\n\nexport interface EmergencyContact {\n    id: string;\n    email: string;\n    name: string;\n    phone: string;\n    roles: string[];\n    zone: string;\n}\n\nexport interface EmergencyContactData {\n    contacts: EmergencyContact[];\n    roles: string[];\n}\n\n@Component({\n    selector: '[app-emergency-contacts]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <section topbar class=\"px-8 py-4 flex flex-col\">\n                    <div class=\"flex items-center justify-between\">\n                        <h2 class=\"text-2xl font-medium\">Emergency Contacts</h2>\n                        <div class=\"flex items-center space-x-2\">\n                            <mat-form-field\n                                class=\"no-subscript\"\n                                appearance=\"outline\"\n                            >\n                                <app-icon class=\"text-2xl\" matPrefix>\n                                    search\n                                </app-icon>\n                                <input\n                                    matInput\n                                    [(ngModel)]=\"search\"\n                                    placeholder=\"Filter contacts...\"\n                                />\n                            </mat-form-field>\n                            <button\n                                btn\n                                matRipple\n                                class=\"space-x-2\"\n                                (click)=\"editContact()\"\n                            >\n                                <app-icon class=\"text-2xl\">add</app-icon>\n                                <div class=\"pr-2\">Add Contact</div>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"flex items-center justify-between py-2 mt-2\">\n                        <mat-form-field\n                            class=\"no-subscript\"\n                            appearance=\"outline\"\n                        >\n                            <mat-select\n                                [ngModel]=\"role_filter.getValue()\"\n                                (ngModelChange)=\"role_filter.next($event)\"\n                                placeholder=\"All Roles\"\n                            >\n                                <mat-option value=\"\">All Roles</mat-option>\n                                <mat-option\n                                    *ngFor=\"let role of (roles | async) || []\"\n                                    [value]=\"role\"\n                                >\n                                    {{ role }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <div class=\"flex items-center space-x-2\">\n                            <button\n                                icon\n                                matRipple\n                                class=\"h-12 w-12 bg-secondary text-secondary-content rounded\"\n                                matTooltip=\"Manage Roles\"\n                                (click)=\"manageRoles()\"\n                            >\n                                <app-icon>list_alt</app-icon>\n                            </button>\n                        </div>\n                    </div>\n                </section>\n                <section class=\"w-full h-1/2 flex-1 overflow-auto px-8\">\n                    <simple-table\n                        class=\"min-w-[52rem] block text-sm\"\n                        [data]=\"filtered_contacts\"\n                        [filter]=\"search\"\n                        [empty_message]=\"\n                            search\n                                ? 'No matching contacts'\n                                : 'No emergency contacts for this building'\n                        \"\n                        [columns]=\"[\n                            {\n                                key: 'name',\n                                name: 'Person',\n                                content: person_template\n                            },\n                            {\n                                key: 'roles',\n                                name: 'Roles',\n                                content: roles_template,\n                                sortable: false\n                            },\n                            {\n                                key: 'zone',\n                                name: 'Zone',\n                                content: zone_template,\n                                size: '8rem',\n                                sortable: false\n                            },\n                            {\n                                key: 'actions',\n                                name: ' ',\n                                content: actions_template,\n                                size: '6rem',\n                                sortable: false\n                            }\n                        ]\"\n                        [sortable]=\"true\"\n                    ></simple-table>\n                    <div class=\"w-full h-12\"></div>\n                    <ng-template #person_template let-row=\"row\">\n                        <button\n                            class=\"px-4 py-2 text-left leading-tight\"\n                            (click)=\"copyToClipboard(row.email)\"\n                        >\n                            <div class=\"\">{{ row.name }}</div>\n                            <div class=\"text-[0.625rem] opacity-30 font-mono\">\n                                {{ row.email }}\n                            </div>\n                        </button>\n                    </ng-template>\n                    <ng-template #roles_template let-data=\"data\">\n                        <div class=\"flex flex-wrap p-2\">\n                            <span\n                                class=\"m-1 py-1 px-2 rounded-2xl text-xs font-mono bg-info text-info-content\"\n                                *ngFor=\"let role of data\"\n                            >\n                                {{ role }}\n                            </span>\n                        </div>\n                    </ng-template>\n                    <ng-template #zone_template let-data=\"data\">\n                        <div class=\"p-4\">\n                            {{ data ? (data | level)?.display_name : 'All' }}\n                        </div>\n                    </ng-template>\n                    <ng-template #actions_template let-row=\"row\">\n                        <div\n                            class=\"flex items-center justify-end w-full space-x-2 p-2\"\n                        >\n                            <button\n                                icon\n                                matRipple\n                                matTooltip=\"Edit Emergency Contact\"\n                                (click)=\"editContact(row)\"\n                            >\n                                <app-icon>edit</app-icon>\n                            </button>\n                            <button\n                                icon\n                                matRipple\n                                class=\"text-error\"\n                                (click)=\"removeContact(row)\"\n                                matTooltip=\"Remove Emergency Contact\"\n                            >\n                                <app-icon>delete</app-icon>\n                            </button>\n                        </div>\n                    </ng-template>\n                </section>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class EmergencyContactsComponent {\n    private _change = new BehaviorSubject<number>(0);\n\n    public search = '';\n    public readonly role_filter = new BehaviorSubject<string>('');\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => (details as any) || { roles: [], contacts: [] }),\n        shareReplay(1)\n    );\n    public readonly roles = this.data.pipe(map((_) => _?.roles || []));\n    public readonly contacts = this.data.pipe(map((_) => _?.contacts || []));\n    public readonly filtered_contacts = combineLatest([\n        this.contacts,\n        this.role_filter,\n    ]).pipe(\n        map(([list, role]) =>\n            list.filter((_) => !role || _.roles.includes(role))\n        )\n    );\n\n    public readonly copyToClipboard = (id: string) => {\n        const success = this._clipboard.copy(id);\n        if (success) notifySuccess(\"User's email copied to clipboard.\");\n    };\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _clipboard: Clipboard\n    ) {}\n\n    public ngOnInit() {}\n\n    public manageRoles() {\n        const ref = this._dialog.open(RoleManagementModalComponent, {});\n        ref.afterClosed().subscribe(() => this._change.next(Date.now()));\n    }\n\n    public editContact(contact?: EmergencyContact) {\n        const ref = this._dialog.open(EmergencyContactModalComponent, {\n            data: contact,\n        });\n        ref.afterClosed().subscribe(() => this._change.next(Date.now()));\n    }\n\n    public async removeContact(contact: EmergencyContact) {\n        const result = await openConfirmModal(\n            {\n                title: 'Remove Emergency Contact',\n                content: `Are you sure you want to remove ${contact.name} from the emergency contacts?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (result.reason !== 'done') return;\n        result.loading('Removing contact...');\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        const new_contacts = (data?.contacts || []).filter(\n            (_) => _.id !== contact.id\n        );\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: { roles: data.roles, contacts: new_contacts },\n        }).toPromise();\n        result.close();\n        this._change.next(Date.now());\n        notifySuccess('Successfully removed emergency contact.');\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { StaffComponent } from './staff.component';\nimport { StaffTopbarComponent } from './staff-topbar.component';\nimport { StaffListingComponent } from './staff-listing.component';\nimport { StaffDetailsComponent } from './staff-details.component';\nimport { UIModule } from '../ui/ui.module';\nimport { NewStaffComponent } from './new-staff.component';\nimport { EmergencyContactsComponent } from './emergency-contacts.component';\nimport { EmergencyContactModalComponent } from './emergency-contact-modal.component';\nimport { RoleManagementModalComponent } from './role-management-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: StaffComponent },\n    { path: 'new', component: NewStaffComponent },\n    { path: 'emergency-contacts', component: EmergencyContactsComponent },\n];\n\nexport const COMPONENTS: Type<any>[] = [\n    NewStaffComponent,\n    StaffComponent,\n    StaffTopbarComponent,\n    StaffListingComponent,\n    StaffDetailsComponent,\n    EmergencyContactsComponent,\n    EmergencyContactModalComponent,\n    RoleManagementModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class StaffModule {}\n","import { HashMap } from '@placeos/common';\nimport { getUnixTime } from 'date-fns';\n\nexport class MapLocation {\n    /** Source that the location was generated */\n    public type: 'desk' | 'wireless' | 'meeting' | 'other';\n    /** Details of the location */\n    public position: string | { x: number, y: number };\n    /** Accuracy of the location data */\n    public variance: number;\n    /** Unix epoch in seconds that the data was last updated */\n    public last_seen: number;\n    /** ID of the level associated with the location */\n    public level: string;\n    /** ID of the building associated with the location */\n    public building: string;\n    /** Whether user is currently at the location if fixed */\n    public at_location: boolean;\n    /**  */\n    public coordinates_from:\n        | 'top-left'\n        | 'top-right'\n        | 'bottom-left'\n        | 'bottom-right';\n\n    constructor(_data: HashMap = {}) {\n        this.type = _data.type || _data.location || 'other';\n        this.position = _data.position ||\n            _data.map_id || _data.asset_id || {\n                x: _data.x / _data.map_width || 0,\n                y: _data.y / _data.map_height || 0,\n            };\n        this.variance = _data.variance || 0;\n        this.last_seen = _data.last_seen || getUnixTime(new Date());\n        this.level = _data.level;\n        this.building = _data.building;\n        this.at_location = !!_data.at_location;\n        this.coordinates_from = _data.coordinates_from || 'top-left';\n    }\n}\n"],"x_google_ignoreList":[]}