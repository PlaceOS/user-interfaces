{"version":3,"file":"apps_concierge_src_app_staff_staff_module_ts.js","mappings":"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","names":["StaffStateService","AsyncHandler","constructor","_org","_this","super","this","_onsite","_events","_filters","BehaviorSubject","_search","_loading","_users","loading","asObservable","filters","users","filtered_users","combineLatest","pipe","map","details","filter","options","i","name","toLowerCase","includes","email","only_onsite","user_events","switchMap","_ref","_asyncToGenerator","_","next","bookings","queryBookings","period_start","getUnixTime","startOfDay","Date","now","period_end","endOfDay","type","toPromise","checkin_map","valueOf","bkn","timePeriodsIntersect","date","duration","asset_id","checked_in","_x","apply","arguments","shareReplay","loadUsers","subscribe","setFilters","getValue","setSearchString","search","startPolling","delay","interval","stopPolling","clearInterval","checkin","user","_this2","result","saveBooking","booking_start","Math","floor","booking_end","title","description","building","display_name","zones","id","booking_type","checkinBooking","checkout","_this3","event","toJSON","_this4","user_list","searchStaff","sort","a","b","localeCompare","static","t","i0","i1","core","Yz7","factory","ɵfac","providedIn","level_r1","StaffTopbarComponent","_state","_route","_router","levels","active_levels","setDate","setSearch","str","updateZones","navigate","relativeTo","queryParams","zone_ids","join","ngOnInit","initialised","first","subscription","queryParamMap","params","has","get","split","length","level","levelWithID","buildings","find","bld","parent_id","zone","lvl","push","i2","i3","Xpm","selectors","features","decls","vars","consts","template","rf","ctx","$event","StaffTopbarComponent_mat_option_3_Template","tmp_2_0","StaffDetailsComponent_div_0_div_7_Template","_r3","ctx_r2","onsite","ctx_r0","phone","StaffDetailsComponent","catch","e","notifyError","inputs","StaffDetailsComponent_div_0_Template","group_r6","_r8","$implicit","ctx_r7","scrollTo","active_group","group_r10","i_r14","user_r13","ctx_r12","events","StaffListingComponent_ng_container_4_ng_container_1_ng_container_1_staff_details_3_Template","ctx_r11","StaffListingComponent_ng_container_4_ng_container_1_ng_container_1_Template","ctx_r9","StaffListingComponent_ng_container_4_ng_container_1_Template","groups","CHARS","StaffListingComponent","user_count","list","user_map","char","startsWith","timeout","onScroll","scroll_top","_el","nativeElement","scrollTop","group","el","document","querySelector","offsetTop","scrollIntoView","behavior","block","viewQuery","StaffListingComponent_div_1_Template","StaffListingComponent_ng_container_4_Template","StaffListingComponent_mat_progress_bar_6_Template","StaffListingComponent_ng_template_8_Template","_r5","StaffComponent","ngOnDestroy","attrs","_c0","StaffComponent_mat_progress_bar_4_Template","NewStaffComponent","NewStaffComponent_mat_progress_bar_6_Template","role_r8","EmergencyContactModalComponent_main_5_ng_container_25_mat_option_1_Template","_r12","setUser","EmergencyContactModalComponent_main_5_ng_container_25_Template","ctx_r1","form","data","roles","_c1","_r6","_r14","ctx_r13","save","_r16","ctx_r15","role_name","ctx_r17","addRole","ctx_r5","EmergencyContactModalComponent","_data","_dialog_ref","_changes","contact","active_building","showMetadata","contacts","FormGroup","FormControl","randomString","_tooltip","close","disableClose","take","updateMetadata","patchValue","value","new_contacts","notifySuccess","MAT_DIALOG_DATA","CustomTooltipComponent","EmergencyContactModalComponent_button_4_Template","EmergencyContactModalComponent_main_5_Template","EmergencyContactModalComponent_footer_6_Template","EmergencyContactModalComponent_ng_template_7_Template","EmergencyContactModalComponent_ng_template_9_Template","_r4","role_r5","EmergencyContactsComponent_ng_template_27_span_0_Template","row_r9","_r11","row","ctx_r10","editContact","removeContact","EmergencyContactsComponent","_dialog","_change","role_filter","filtered_contacts","role","open","afterClosed","openConfirmModal","content","icon","reason","EmergencyContactsComponent_mat_option_23_Template","EmergencyContactsComponent_ng_template_27_Template","EmergencyContactsComponent_ng_template_29_Template","_c2","_c3","_c4","_c5","_r2","ROUTES","path","component","COMPONENTS","StaffModule","oAB","cJS","CommonModule","FormsModule","UIModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/staff/staff-state.service.ts","./apps/concierge/src/app/staff/staff-topbar.component.ts","./apps/concierge/src/app/staff/staff-details.component.ts","./apps/concierge/src/app/staff/staff-listing.component.ts","./apps/concierge/src/app/staff/staff.component.ts","./apps/concierge/src/app/staff/new-staff.component.ts","./apps/concierge/src/app/staff/emergency-contact-modal.component.ts","./apps/concierge/src/app/staff/emergency-contacts.component.ts","./apps/concierge/src/app/staff/staff.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { searchStaff, StaffUser } from '@placeos/users';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport {\n    Booking,\n    checkinBooking,\n    queryBookings,\n    saveBooking,\n} from '@placeos/bookings';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { AsyncHandler, timePeriodsIntersect } from '@placeos/common';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { OrganisationService } from '@placeos/organisation';\n\nexport interface StaffFilters {\n    date?: number;\n    zones?: string[];\n    only_onsite?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StaffStateService extends AsyncHandler {\n    private _onsite: HashMap<boolean> = {};\n    private _events: HashMap<Booking> = {};\n\n    private _filters = new BehaviorSubject<StaffFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _users = new BehaviorSubject<StaffUser[]>([]);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly users = this._filters.asObservable();\n\n    public readonly filtered_users = combineLatest([\n        this._search,\n        this._users,\n        this._filters,\n    ]).pipe(\n        map((details) => {\n            const [filter, users, options] = details;\n            return users.filter(\n                (i) =>\n                    (!filter ||\n                        i.name.toLowerCase().includes(filter) ||\n                        i.email.toLowerCase().includes(filter)) &&\n                    (!options.only_onsite || this._onsite[i.email])\n            );\n        })\n    );\n\n    public readonly user_events = combineLatest([this._filters]).pipe(\n        switchMap(async (_) => {\n            this._loading.next(true);\n            const bookings = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'staff',\n            }).toPromise();\n            const checkin_map = {};\n            const now = new Date().valueOf();\n            for (const bkn of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        now,\n                        now,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                ) {\n                    checkin_map[bkn.asset_id] = bkn.checked_in;\n                    this._events[bkn.asset_id] = bkn;\n                }\n            }\n            this._onsite = checkin_map;\n            this._loading.next(false);\n            return checkin_map;\n        }),\n        shareReplay()\n    );\n\n    constructor(private _org: OrganisationService) {\n        super();\n        this.loadUsers();\n        this.user_events.subscribe();\n    }\n\n    public setFilters(filters: StaffFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.setFilters(this._filters.getValue());\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkin(user: StaffUser) {\n        const result = await saveBooking({\n            booking_start: Math.floor(new Date().valueOf() / 1000),\n            booking_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n            asset_id: user.email,\n            title: 'Checked-in Onsite',\n            description:\n                this._org.building.display_name || this._org.building.name,\n            zones: [this._org.building.id],\n            booking_type: 'staff',\n        } as any).toPromise();\n        await checkinBooking(result.id, true).toPromise();\n        this._events[user.email] = result;\n        this._onsite[user.email] = true;\n    }\n\n    public async checkout(user: StaffUser) {\n        const event = this._events[user.email];\n        if (event) {\n            const result = await saveBooking({\n                ...event.toJSON(),\n                booking_end: Math.floor(new Date().valueOf() / 1000),\n            } as any).toPromise();\n            await checkinBooking(result.id, false).toPromise();\n            this._events[user.email] = result;\n            this._onsite[user.email] = false;\n        }\n    }\n\n    private async loadUsers() {\n        const user_list = await searchStaff('').toPromise();\n        user_list.sort((a, b) => a.name.localeCompare(b.name));\n        this._users.next(user_list);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-base-100 h-20 px-4 border-b border-base-200 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-slide-toggle\n                class=\"m-2\"\n                [ngModel]=\"(filters | async)?.only_onsite\"\n                (ngModelChange)=\"setFilters({ only_onsite: $event })\"\n                ><div class=\"text-xs\">Onsite Only</div></mat-slide-toggle\n            >\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class StaffTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: StaffStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { StaffUser } from '@placeos/users';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-details',\n    template: `\n        <div\n            class=\"w-full flex items-center px-4 py-2 bg-base-100 border-b border-base-200 hover:opacity-80\"\n            details\n            *ngIf=\"user\"\n        >\n            <a-user-avatar [user]=\"user\"></a-user-avatar>\n            <div class=\"flex flex-col flex-1\">\n                <div class=\"px-2\">{{ user?.name }}</div>\n                <div class=\"px-2 text-xs text-opacity-50\">\n                    {{ user?.email }}\n                </div>\n            </div>\n            <div *ngIf=\"onsite\" class=\"text-xs opacity-50 px-4\">Onsite</div>\n            <div class=\"flex items-center\">\n                <action-icon\n                    [matTooltip]=\"onsite ? 'Checkout Staff' : 'Checkin Staff'\"\n                    [loading]=\"loading\"\n                    [content]=\"onsite ? 'event_busy' : 'event_available'\"\n                    (click)=\"onsite ? checkout() : checkin()\"\n                >\n                </action-icon>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Email Staff\"\n                    [attr.disabled]=\"!user?.email\"\n                    [href]=\"'mailto:' + user?.email\"\n                >\n                    <app-icon>email</app-icon>\n                </a>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Phone Staff\"\n                    [attr.disabled]=\"!user?.phone\"\n                    [href]=\"'tel:' + user?.phone\"\n                >\n                    <app-icon>call</app-icon>\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class StaffDetailsComponent {\n    @Input() public user: StaffUser;\n    @Input() public onsite: boolean;\n\n    public loading: boolean;\n\n    public readonly checkin = async () => {\n        this.loading = true;\n        await this._state\n            .checkin(this.user)\n            .catch((e) => notifyError('Error checking in Staff member'));\n        this.loading = false;\n    };\n    public readonly checkout = async () => {\n        this.loading = true;\n        await this._state\n            .checkout(this.user)\n            .catch((e) => notifyError('Error checking out Staff member'));\n        this.loading = false;\n    };\n\n    constructor(private _state: StaffStateService) {}\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { AsyncHandler } from '@placeos/common';\nimport { map } from 'rxjs/operators';\n\nimport { StaffStateService } from './staff-state.service';\n\nconst CHARS = '#abcdefghijklmnopqrstuvwxyz'.split('');\n\n@Component({\n    selector: 'staff-listings',\n    template: `\n        <div class=\"w-full p-2 flex items-center justify-center\">\n            <div\n                letter\n                *ngFor=\"let group of groups\"\n                class=\"capitalize h-6 w-6 flex items-center justify-center text-xs cursor-pointer\"\n                [class.disabled]=\"(user_list | async)[group].length <= 0\"\n                [class.active]=\"group === active_group\"\n                (click)=\"scrollTo(group)\"\n            >\n                {{ group }}\n            </div>\n        </div>\n        <div\n            class=\"flex-1 overflow-auto w-full relative bg-base-200\"\n            style=\"height: 50%\"\n            #container\n            (scroll)=\"onScroll($event)\"\n        >\n            <ng-container *ngIf=\"user_count | async; else empty_state\">\n                <ng-container *ngFor=\"let group of groups\">\n                    <ng-container *ngIf=\"(user_list | async)[group].length\">\n                        <div\n                            group\n                            [id]=\"'letter-' + (group === '#' ? '0' : group)\"\n                            class=\"capitalize bg-base-200 border-b text-sm font-medium sticky top-0 z-10\"\n                        >\n                            {{ group }}\n                        </div>\n                        <staff-details\n                            *ngFor=\"\n                                let user of (user_list | async)[group];\n                                let i = index\n                            \"\n                            [id]=\"'letter-' + group + '-' + i\"\n                            [user]=\"user\"\n                            [onsite]=\"\n                                (events | async)\n                                    ? (events | async)[user.email]\n                                    : false\n                            \"\n                        ></staff-details>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No matching staff members</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 50%;\n            }\n\n            [letter] {\n                transition: font-size 200ms, color 200ms;\n            }\n\n            [group] {\n                border-color: #ccc;\n                padding: 0.5rem 1.65rem;\n            }\n\n            .disabled {\n                opacity: 0.2;\n                pointer-events: none;\n            }\n\n            .active {\n                font-size: 1.25rem;\n                opacity: 1;\n                color: #d81b60;\n            }\n        `,\n    ],\n})\nexport class StaffListingComponent extends AsyncHandler {\n    public active_group = '#';\n\n    public readonly groups = CHARS;\n    public readonly events = this._state.user_events;\n    public readonly loading = this._state.loading;\n\n    public readonly user_count = this._state.filtered_users.pipe(\n        map((list) => list.length)\n    );\n\n    public readonly user_list = this._state.filtered_users.pipe(\n        map((list) => {\n            const user_map = {};\n            for (const char of CHARS) {\n                user_map[char] = (list || []).filter(\n                    (user) =>\n                        user.name.toLowerCase()[0].startsWith(char) ||\n                        (char === '#' &&\n                            !CHARS.includes(user.name.toLowerCase()[0]))\n                );\n            }\n            this.timeout('scroll', () => this.onScroll({}), 30);\n            return user_map;\n        })\n    );\n\n    @ViewChild('container') private _el: ElementRef<HTMLDivElement>;\n\n    constructor(private _state: StaffStateService) {\n        super();\n    }\n\n    public onScroll(_) {\n        const scroll_top = this._el.nativeElement.scrollTop;\n        for (const group of CHARS) {\n            const el: HTMLDivElement = document.querySelector(\n                `#letter-${group === '#' ? '0' : group}`\n            );\n            if (el) {\n                if (el.offsetTop - scroll_top > 0) {\n                    break;\n                }\n                this.active_group = group;\n            }\n        }\n    }\n\n    public scrollTo(group: string) {\n        const el = document.querySelector(`#letter-${group}-0`);\n        if (el) {\n            el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            this.active_group = group;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-staff]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <staff-topbar class=\"w-full\"></staff-topbar>\n            <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--b1);\n            }\n        `,\n    ],\n})\nexport class StaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-new-staff]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <staff-topbar class=\"w-full\"></staff-topbar>\n                <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n                <mat-progress-bar\n                    class=\"w-full\"\n                    *ngIf=\"loading | async\"\n                    mode=\"indeterminate\"\n                ></mat-progress-bar>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class NewStaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { Component, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { EmergencyContact } from './emergency-contacts.component';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { notifySuccess, randomString } from '@placeos/common';\nimport { CustomTooltipComponent } from '@placeos/components';\n\n@Component({\n    selector: 'emergency-contact-modal',\n    template: `\n        <header>\n            <h2>{{ contact ? 'Edit' : 'New' }} Emergency Contact</h2>\n            <div class=\"flex-1 w-0\"></div>\n            <button icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main class=\"p-4 w-[36rem]\" *ngIf=\"!loading; else load_state\">\n            <form [formGroup]=\"form\" class=\"space-y-4\">\n                <a-user-search-field\n                    ngModel\n                    (ngModelChange)=\"setUser($event)\"\n                    [ngModelOptions]=\"{ standalone: true }\"\n                ></a-user-search-field>\n                <div class=\"flex flex-col\">\n                    <label for=\"name\">Name:</label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            formControlName=\"name\"\n                            placeholder=\"Full name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex flex-col flex-1\">\n                        <label for=\"email\">Email:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"email\"\n                                type=\"email\"\n                                placeholder=\"Email address\"\n                            />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"flex flex-col flex-1\">\n                        <label for=\"email\">Phone:</label>\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                formControlName=\"phone\"\n                                type=\"tel\"\n                                placeholder=\"Emergency contact number\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"email\">Roles:</label>\n                    <div class=\"flex items-center space-x-2\">\n                        <mat-form-field\n                            class=\"no-subscript flex-1\"\n                            appearance=\"outline\"\n                        >\n                            <mat-select\n                                multiple\n                                formControlName=\"roles\"\n                                placeholder=\"Select roles\"\n                            >\n                                <ng-container\n                                    *ngFor=\"\n                                        let role of (data | async)?.roles || []\n                                    \"\n                                >\n                                    <mat-option *ngIf=\"role\" [value]=\"role\">\n                                        {{ role }}\n                                    </mat-option>\n                                </ng-container>\n                            </mat-select>\n                        </mat-form-field>\n                        <button\n                            btn\n                            matRipple\n                            class=\"space-x-2\"\n                            customTooltip\n                            [content]=\"role_form\"\n                        >\n                            <app-icon>add</app-icon>\n                            <div class=\"pr-2\">Add New Role</div>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </main>\n        <footer\n            *ngIf=\"!loading\"\n            class=\"flex justify-center items-center p-2 border-t border-base-200\"\n        >\n            <button btn matRipple class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <main\n                loading\n                class=\"h-64 flex flex-col items-center justify-center\"\n            >\n                <mat-spinner [diameter]=\"48\" class=\"mb-4\"></mat-spinner>\n                <p>Saving contact details...</p>\n            </main>\n        </ng-template>\n        <ng-template #role_form>\n            <div class=\"bg-base-100 p-4 rounded \">\n                <mat-form-field appearance=\"outline\">\n                    <input\n                        matInput\n                        [(ngModel)]=\"role_name\"\n                        placeholder=\"Role name\"\n                    />\n                </mat-form-field>\n                <button btn matRipple class=\"w-full\" (click)=\"addRole()\">\n                    Save Role\n                </button>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class EmergencyContactModalComponent {\n    private _changes = new BehaviorSubject(0);\n\n    public loading = false;\n    public role_name: string;\n    public readonly contact?: EmergencyContact = this._data;\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._changes,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => (details as any) || { roles: [], contacts: [] }),\n        shareReplay(1)\n    );\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || `ecntct-${randomString(8)}`),\n        name: new FormControl(this._data?.name || ''),\n        email: new FormControl(this._data?.email || ''),\n        phone: new FormControl(this._data?.phone || ''),\n        roles: new FormControl(this._data?.roles || []),\n    });\n\n    @ViewChild(CustomTooltipComponent) private _tooltip: CustomTooltipComponent;\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: EmergencyContact | undefined,\n        private _dialog_ref: MatDialogRef<EmergencyContactModalComponent>,\n        private _org: OrganisationService\n    ) {}\n\n    public async addRole() {\n        if (!this.role_name) return;\n        this._tooltip.close();\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: {\n                roles: [...data.roles, this.role_name].filter((_) => !!_),\n                contacts: data.contacts,\n            },\n        }).toPromise();\n        this._changes.next(0);\n        this.form.patchValue({\n            roles: [...this.form.value.roles, this.role_name],\n        });\n        this.role_name = '';\n        this.loading = false;\n        this._dialog_ref.disableClose = false;\n    }\n\n    public setUser(user: any) {\n        this.form.patchValue({\n            name: user?.name,\n            email: user?.email,\n            phone: user?.phone,\n        });\n    }\n\n    public async save() {\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        const contacts = data?.contacts || [];\n        const new_contacts = [\n            ...contacts.filter((_) => _.id !== this.contact?.id),\n            this.form.value,\n        ].sort((a, b) => a.name.localeCompare(b.name));\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: { roles: data.roles, contacts: new_contacts },\n        }).toPromise();\n        this._dialog_ref.disableClose = true;\n        notifySuccess('Successfully updated emergency contacts.');\n        this.loading = false;\n        this._dialog_ref.close();\n    }\n}\n","import { Component } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { filter, map, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { EmergencyContactModalComponent } from './emergency-contact-modal.component';\nimport { notify, notifySuccess, openConfirmModal } from '@placeos/common';\n\nexport interface EmergencyContact {\n    id: string;\n    email: string;\n    name: string;\n    phone: string;\n    roles: string[];\n}\n\nexport interface EmergencyContactData {\n    contacts: EmergencyContact[];\n    roles: string[];\n}\n\n@Component({\n    selector: '[app-emergency-contacts]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <section topbar class=\"px-8 py-4 flex flex-col\">\n                    <div class=\"flex items-center justify-between\">\n                        <h2 class=\"text-2xl font-medium\">Emergency Contacts</h2>\n                        <div class=\"flex items-center space-x-2\">\n                            <mat-form-field\n                                class=\"no-subscript\"\n                                appearance=\"outline\"\n                            >\n                                <app-icon class=\"text-2xl\" matPrefix>\n                                    search\n                                </app-icon>\n                                <input\n                                    matInput\n                                    [(ngModel)]=\"search\"\n                                    placeholder=\"Filter contacts...\"\n                                />\n                            </mat-form-field>\n                            <button\n                                btn\n                                matRipple\n                                class=\"space-x-2\"\n                                (click)=\"editContact()\"\n                            >\n                                <app-icon class=\"text-2xl\">add</app-icon>\n                                <div class=\"pr-2\">Add Contact</div>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"flex items-center py-2 mt-2\">\n                        <mat-form-field\n                            class=\"no-subscript\"\n                            appearance=\"outline\"\n                        >\n                            <mat-select\n                                [ngModel]=\"role_filter.getValue()\"\n                                (ngModelChange)=\"role_filter.next($event)\"\n                                placeholder=\"All Roles\"\n                            >\n                                <mat-option value=\"\">All Roles</mat-option>\n                                <mat-option\n                                    *ngFor=\"let role of (roles | async) || []\"\n                                    [value]=\"role\"\n                                >\n                                    {{ role }}\n                                </mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                    </div>\n                </section>\n                <section class=\"w-full h-1/2 flex-1 overflow-auto px-8\">\n                    <custom-table\n                        class=\"min-w-[40rem] block\"\n                        [dataSource]=\"filtered_contacts\"\n                        [filter]=\"search\"\n                        [columns]=\"['email', 'name', 'roles', 'actions']\"\n                        [display_column]=\"['Email', 'Name', 'Roles', ' ']\"\n                        [column_size]=\"['flex', '12r', '16r', '7r']\"\n                        [template]=\"{\n                            roles: roles_template,\n                            actions: actions_template\n                        }\"\n                        [empty]=\"\n                            search\n                                ? 'No matching contacts'\n                                : 'No emergency contacts for this building'\n                        \"\n                    ></custom-table>\n                    <ng-template #roles_template let-data=\"data\">\n                        <span\n                            class=\"m-1 py-1 px-2 rounded-2xl text-xs font-mono bg-info text-info-content\"\n                            *ngFor=\"let role of data\"\n                        >\n                            {{ role }}\n                        </span>\n                    </ng-template>\n                    <ng-template #actions_template let-row=\"row\">\n                        <div\n                            class=\"flex items-center justify-end w-full space-x-2\"\n                        >\n                            <button icon matRipple (click)=\"editContact(row)\">\n                                <app-icon>edit</app-icon>\n                            </button>\n                            <button icon matRipple (click)=\"removeContact(row)\">\n                                <app-icon>delete</app-icon>\n                            </button>\n                        </div>\n                    </ng-template>\n                </section>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n        `,\n    ],\n})\nexport class EmergencyContactsComponent {\n    private _change = new BehaviorSubject<number>(0);\n\n    public search = '';\n    public readonly role_filter = new BehaviorSubject<string>('');\n    public readonly data = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld),\n        switchMap(([bld]) => showMetadata(bld.id, 'emergency_contacts')),\n        map(({ details }) => (details as any) || { roles: [], contacts: [] }),\n        shareReplay(1)\n    );\n    public readonly roles = this.data.pipe(map((_) => _?.roles || []));\n    public readonly contacts = this.data.pipe(map((_) => _?.contacts || []));\n    public readonly filtered_contacts = combineLatest([\n        this.contacts,\n        this.role_filter,\n    ]).pipe(\n        map(([list, role]) =>\n            list.filter((_) => !role || _.roles.includes(role))\n        )\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public ngOnInit() {}\n\n    public editContact(contact?: EmergencyContact) {\n        const ref = this._dialog.open(EmergencyContactModalComponent, {\n            data: contact,\n        });\n        ref.afterClosed().subscribe(() => this._change.next(Date.now()));\n    }\n\n    public async removeContact(contact: EmergencyContact) {\n        const result = await openConfirmModal(\n            {\n                title: 'Remove Emergency Contact',\n                content: `Are you sure you want to remove ${contact.name} from the emergency contacts?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (result.reason !== 'done') return;\n        result.loading('Removing contact...');\n        const data: any = await this.data.pipe(take(1)).toPromise();\n        const new_contacts = (data?.contacts || []).filter(\n            (_) => _.id !== contact.id\n        );\n        await updateMetadata(this._org.building.id, {\n            name: 'emergency_contacts',\n            description: 'Emergency Contacts',\n            details: { roles: data.roles, contacts: new_contacts },\n        }).toPromise();\n        result.close();\n        this._change.next(Date.now());\n        notifySuccess('Successfully removed emergency contact.');\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { StaffComponent } from './staff.component';\nimport { StaffTopbarComponent } from './staff-topbar.component';\nimport { StaffListingComponent } from './staff-listing.component';\nimport { StaffDetailsComponent } from './staff-details.component';\nimport { UIModule } from '../ui/ui.module';\nimport { NewStaffComponent } from './new-staff.component';\nimport { EmergencyContactsComponent } from './emergency-contacts.component';\nimport { EmergencyContactModalComponent } from './emergency-contact-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: StaffComponent },\n    { path: 'new', component: NewStaffComponent },\n    { path: 'emergency-contacts', component: EmergencyContactsComponent },\n];\n\nexport const COMPONENTS: Type<any>[] = [\n    NewStaffComponent,\n    StaffComponent,\n    StaffTopbarComponent,\n    StaffListingComponent,\n    StaffDetailsComponent,\n    EmergencyContactsComponent,\n    EmergencyContactModalComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class StaffModule {}\n"],"x_google_ignoreList":[]}