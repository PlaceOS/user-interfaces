{"version":3,"mappings":"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","names":["StaffStateService","BaseClass","constructor","_org","super","this","BehaviorSubject","_loading","asObservable","_filters","combineLatest","_search","_users","pipe","map","details","filter","users","options","i","name","toLowerCase","includes","email","only_onsite","_onsite","switchMap","_","__awaiter","next","bookings","queryBookings","period_start","Math","floor","startOfDay","Date","valueOf","period_end","endOfDay","type","toPromise","checkin_map","now","bkn","timePeriodsIntersect","date","duration","asset_id","checked_in","_events","shareReplay","loadUsers","setFilters","filters","Object","getValue","setSearchString","search","startPolling","delay","interval","stopPolling","clearInterval","checkin","user","result","saveBooking","booking_start","booking_end","title","description","building","display_name","zones","id","booking_type","checkinBooking","checkout","event","toJSON","user_list","searchStaff","sort","a","b","localeCompare","i0","factory","StaffTopbarComponent","_state","_route","_router","active_levels","str","navigate","relativeTo","queryParams","zone_ids","join","ngOnInit","initialised","first","subscription","queryParamMap","subscribe","params","has","get","split","length","level","levelWithID","buildings","find","bld","parent_id","levels","zone","lvl","push","updateZones","setSearch","selectors","ctx","StaffDetailsComponent","loading","catch","e","notifyError","CHARS","StaffListingComponent","user_events","filtered_users","list","user_map","char","startsWith","timeout","onScroll","scroll_top","_el","nativeElement","scrollTop","group","el","document","querySelector","offsetTop","active_group","scrollTo","scrollIntoView","behavior","block","StaffComponent","ngOnDestroy","ROUTES","path","component","COMPONENTS","StaffModule","CommonModule","FormsModule","UIModule","RouterModule"],"sources":["./apps/concierge/src/app/staff/staff-state.service.ts","./apps/concierge/src/app/staff/staff-topbar.component.ts","./apps/concierge/src/app/staff/staff-details.component.ts","./apps/concierge/src/app/staff/staff-listing.component.ts","./apps/concierge/src/app/staff/staff.component.ts","./apps/concierge/src/app/staff/staff.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { searchStaff, StaffUser } from '@placeos/users';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport { Booking, checkinBooking, queryBookings, saveBooking } from '@placeos/bookings';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { endOfDay, startOfDay } from 'date-fns';\nimport { BaseClass, timePeriodsIntersect } from '@placeos/common';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { OrganisationService } from '@placeos/organisation';\n\nexport interface StaffFilters {\n    date?: number;\n    zones?: string[];\n    only_onsite?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StaffStateService extends BaseClass {\n    private _onsite: HashMap<boolean> = {};\n    private _events: HashMap<Booking> = {};\n\n    private _filters = new BehaviorSubject<StaffFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _users = new BehaviorSubject<StaffUser[]>([]);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly users = this._filters.asObservable();\n\n    public readonly filtered_users = combineLatest([\n        this._search,\n        this._users,\n        this._filters,\n    ]).pipe(\n        map((details) => {\n            const [filter, users, options] = details;\n            return users.filter(\n                (i) =>\n                    (!filter ||\n                        i.name.toLowerCase().includes(filter) ||\n                        i.email.toLowerCase().includes(filter)) &&\n                    (!options.only_onsite || this._onsite[i.email])\n            );\n        })\n    );\n\n    public readonly user_events = combineLatest([this._filters]).pipe(\n        switchMap(async (_) => {\n            this._loading.next(true);\n            const bookings = await queryBookings({\n                period_start: Math.floor(startOfDay(new Date()).valueOf() / 1000),\n                period_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n                type: 'staff',\n            }).toPromise();\n            const checkin_map = {};\n            const now = new Date().valueOf();\n            for (const bkn of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        now,\n                        now,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                ) {\n                    checkin_map[bkn.asset_id] = bkn.checked_in;\n                    this._events[bkn.asset_id] = bkn;\n                }\n            }\n            this._onsite = checkin_map;\n            this._loading.next(false);\n            return checkin_map;\n        }),\n        shareReplay()\n    );\n\n    constructor(\n        private _org: OrganisationService\n    ) {\n        super();\n        this.loadUsers();\n    }\n\n    public setFilters(filters: StaffFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.setFilters(this._filters.getValue());\n        this.interval('poll', () => this.setFilters(this._filters.getValue()), delay);\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkin(user: StaffUser) {\n        const result = await saveBooking({\n            booking_start: Math.floor(\n                new Date().valueOf() / 1000\n            ),\n            booking_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n            asset_id: user.email,\n            title: 'Checked-in Onsite',\n            description: this._org.building.display_name || this._org.building.name,\n            zones: [this._org.building.id],\n            booking_type: 'staff',\n        } as any).toPromise();\n        await checkinBooking(result.id, true);\n        this._events[user.email] = result;\n        this._onsite[user.email] = true;\n    }\n\n    public async checkout(user: StaffUser) {\n        const event = this._events[user.email];\n        if (event) {\n            const result = await saveBooking({\n                ...event.toJSON(),\n                booking_end: Math.floor(new Date().valueOf() / 1000),\n            } as any).toPromise();\n            await checkinBooking(result.id, false).toPromise();\n            this._events[user.email] = result;\n            this._onsite[user.email] = false;\n        }\n    }\n\n    private async loadUsers() {\n        const user_list = await searchStaff('').toPromise();\n        user_list.sort((a, b) => a.name.localeCompare(b.name));\n        this._users.next(user_list);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-topbar',\n    template: `\n        <mat-form-field appearance=\"outline\">\n            <mat-select\n                multiple\n                [(ngModel)]=\"zones\"\n                (ngModelChange)=\"updateZones($event)\"\n                placeholder=\"All Levels\"\n            >\n                <mat-option\n                    *ngFor=\"let level of levels | async\"\n                    [value]=\"level.id\"\n                >\n                    {{ level.display_name || level.name }}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <mat-slide-toggle\n            class=\"m-2\"\n            [ngModel]=\"(filters | async)?.only_onsite\"\n            (ngModelChange)=\"setFilters({ only_onsite: $event })\"\n            ><div class=\"text-xs\">Onsite Only</div></mat-slide-toggle\n        >\n        <div class=\"flex-1 w-2\"></div>\n        <searchbar class=\"mr-2\" (modelChange)=\"setSearch($event)\"></searchbar>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                align-items: center;\n                background-color: #fff;\n                height: 5em;\n                padding: 0 1em;\n                border-bottom: 1px solid #ccc;\n            }\n\n            :host > * + * {\n                margin-left: 0.5rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class StaffTopbarComponent extends BaseClass implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones })\n    };\n\n    constructor(\n        private _state: StaffStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { StaffUser } from '@placeos/users';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-details',\n    template: `\n        <div\n            class=\"w-full flex items-center px-4 py-2 bg-white border-b border-gray-200\"\n            *ngIf=\"user\"\n        >\n            <a-user-avatar [user]=\"user\"></a-user-avatar>\n            <div class=\"flex flex-col flex-1\">\n                <div class=\"px-2\">{{ user?.name }}</div>\n                <div class=\"px-2 text-xs text-opacity-50\">\n                    {{ user?.email }}\n                </div>\n            </div>\n            <div *ngIf=\"onsite\" class=\"text-xs opacity-50 px-4\">Onsite</div>\n            <div class=\"flex items-center\">\n                <action-icon\n                    [matTooltip]=\"onsite ? 'Checkout Staff' : 'Checkin Staff'\"\n                    [loading]=\"loading\"\n                    [content]=\"onsite ? 'event_busy' : 'event_available'\"\n                    (click)=\"onsite ? checkout() : checkin()\"\n                >\n                </action-icon>\n                <a\n                    mat-icon-button\n                    matTooltip=\"Email Staff\"\n                    [disabled]=\"!user?.email\"\n                    [href]=\"'mailto:' + user?.email\"\n                >\n                    <app-icon>email</app-icon>\n                </a>\n                <a\n                    mat-icon-button\n                    matTooltip=\"Phone Staff\"\n                    [disabled]=\"!user?.phone\"\n                    [href]=\"'tel:' + user?.phone\"\n                >\n                    <app-icon>call</app-icon>\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n            :host > div:hover {\n                background-color: #f0f0f0 !important;\n            }\n        `,\n    ],\n})\nexport class StaffDetailsComponent {\n    @Input() public user: StaffUser;\n    @Input() public onsite: boolean;\n\n    public loading: boolean;\n\n    public readonly checkin = async () => {\n        this.loading = true;\n        await this._state\n            .checkin(this.user)\n            .catch((e) => notifyError('Error checking in Staff member'));\n        this.loading = false;\n    };\n    public readonly checkout = async () => {\n        this.loading = true;\n        await this._state\n            .checkout(this.user)\n            .catch((e) => notifyError('Error checking out Staff member'));\n        this.loading = false;\n    };\n\n    constructor(private _state: StaffStateService) {}\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { BaseClass } from '@placeos/common';\nimport { map } from 'rxjs/operators';\n\nimport { StaffStateService } from './staff-state.service';\n\nconst CHARS = '#abcdefghijklmnopqrstuvwxyz'.split('');\n\n@Component({\n    selector: 'staff-listings',\n    template: `\n        <div class=\"w-full p-2 flex items-center justify-center\">\n            <div\n                letter\n                *ngFor=\"let group of groups\"\n                class=\"capitalize h-6 w-6 flex items-center justify-center text-xs cursor-pointer\"\n                [class.disabled]=\"(user_list | async)[group].length <= 0\"\n                [class.active]=\"group === active_group\"\n                (click)=\"scrollTo(group)\"\n            >\n                {{ group }}\n            </div>\n        </div>\n        <div\n            class=\"flex-1 overflow-auto w-full relative bg-gray-100\"\n            style=\"height: 50%\"\n            #container\n            (scroll)=\"onScroll($event)\"\n        >\n            <ng-container *ngIf=\"user_count | async; else empty_state\">\n                <ng-container *ngFor=\"let group of groups\">\n                    <ng-container *ngIf=\"(user_list | async)[group].length\">\n                        <div\n                            group\n                            [id]=\"'letter-' + (group === '#' ? '0' : group)\"\n                            class=\"capitalize bg-gray-300 border-b text-sm font-medium sticky top-0 z-10\"\n                        >\n                            {{ group }}\n                        </div>\n                        <staff-details\n                            *ngFor=\"\n                                let user of (user_list | async)[group];\n                                let i = index\n                            \"\n                            [id]=\"'letter-' + group + '-' + i\"\n                            [user]=\"user\"\n                            [onsite]=\"\n                                (events | async)\n                                    ? (events | async)[user.email]\n                                    : false\n                            \"\n                        ></staff-details>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No matching staff members</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 50%;\n            }\n\n            [letter] {\n                transition: font-size 200ms, color 200ms;\n            }\n\n            [group] {\n                border-color: #ccc;\n                padding: 0.5rem 1.65rem;\n            }\n\n            .disabled {\n                opacity: 0.2;\n                pointer-events: none;\n            }\n\n            .active {\n                font-size: 1.25rem;\n                opacity: 1;\n                color: #d81b60;\n            }\n        `,\n    ],\n})\nexport class StaffListingComponent extends BaseClass {\n    public active_group = '#';\n\n    public readonly groups = CHARS;\n    public readonly events = this._state.user_events;\n    public readonly loading = this._state.loading;\n\n    public readonly user_count = this._state.filtered_users.pipe(\n        map((list) => list.length)\n    );\n\n    public readonly user_list = this._state.filtered_users.pipe(\n        map((list) => {\n            const user_map = {};\n            for (const char of CHARS) {\n                user_map[char] = (list || []).filter(\n                    (user) =>\n                        user.name.toLowerCase()[0].startsWith(char) ||\n                        (char === '#' &&\n                            !CHARS.includes(user.name.toLowerCase()[0]))\n                );\n            }\n            this.timeout('scroll', () => this.onScroll({}), 30);\n            return user_map;\n        })\n    );\n\n    @ViewChild('container') private _el: ElementRef<HTMLDivElement>;\n\n    constructor(private _state: StaffStateService) {\n        super();\n    }\n\n    public onScroll(_) {\n        const scroll_top = this._el.nativeElement.scrollTop;\n        for (const group of CHARS) {\n            const el: HTMLDivElement = document.querySelector(\n                `#letter-${group === '#' ? '0' : group}`\n            );\n            if (el) {\n                if (el.offsetTop - scroll_top > 0) {\n                    break;\n                }\n                this.active_group = group;\n            }\n        }\n    }\n\n    public scrollTo(group: string) {\n        const el = document.querySelector(`#letter-${group}-0`);\n        if (el) {\n            el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            this.active_group = group;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-staff]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col\">\n            <staff-topbar class=\"w-full\"></staff-topbar>\n            <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n                background: var(--bg);\n            }\n        `,\n    ],\n})\nexport class StaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { StaffComponent } from './staff.component';\nimport { StaffTopbarComponent } from './staff-topbar.component';\nimport { StaffListingComponent } from './staff-listing.component';\nimport { StaffDetailsComponent } from './staff-details.component';\nimport { UIModule } from '../ui/ui.module';\n\nconst ROUTES: Route[] = [{ path: '', component: StaffComponent }];\n\nexport const COMPONENTS: Type<any>[] = [\n    StaffComponent,\n    StaffTopbarComponent,\n    StaffListingComponent,\n    StaffDetailsComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class StaffModule {}\n"],"sourceRoot":"webpack:///","file":"apps_concierge_src_app_staff_staff_module_ts.js"}