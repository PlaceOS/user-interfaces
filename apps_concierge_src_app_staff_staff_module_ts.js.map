{"version":3,"file":"apps_concierge_src_app_staff_staff_module_ts.js","mappings":"iXAyBM,MAAOA,UAA0BC,KAiEnCC,YAAoBC,GAAyB,MACzCC,QAAOC,OADSC,YAhEZA,aAA4B,GAC5BA,aAA4B,GAE5BA,cAAW,IAAIC,IAA8B,IAE7CD,aAAU,IAAIC,IAAwB,IAEtCD,cAAW,IAAIC,KAAyB,GAExCD,YAAS,IAAIC,IAA6B,IAElCD,aAAUA,KAAKE,SAASC,eAExBH,aAAUA,KAAKI,SAASD,eAExBH,WAAQA,KAAKI,SAASD,eAEtBH,uBAAiBK,MAAc,CAC3CL,KAAKM,QACLN,KAAKO,OACLP,KAAKI,WACNI,QACCC,KAAKC,IACD,MAAOC,EAAQC,EAAOC,GAAWH,EACjC,OAAOE,EAAMD,OACRG,KACKH,GACEG,EAAEC,KAAKC,cAAcC,SAASN,IAC9BG,EAAEI,MAAMF,cAAcC,SAASN,OACjCE,EAAQM,aAAenB,KAAKoB,QAAQN,EAAEI,QAAO,IAK/ClB,oBAAcK,MAAc,CAACL,KAAKI,WAAWI,QACzDa,KAAS,yBAAC,UAAOC,GACbvB,EAAKG,SAASqB,MAAK,GACnB,MAAMC,QAAQ,EAASC,MAAc,CACjCC,gBAAcC,QAAYC,KAAWC,KAAKC,QAC1CC,cAAYJ,QAAYK,KAASH,KAAKC,QACtCG,KAAM,UACPC,YACGC,EAAc,GACdL,OAAUD,MAAOO,UACvB,UAAWC,KAAOb,GACd,EACIc,MACIR,EACAA,EACAO,EAAIE,KACJF,EAAIE,KAAsB,GAAfF,EAAIG,SAAgB,OAGnCL,EAAYE,EAAII,UAAYJ,EAAIK,WAChC3C,EAAK4C,QAAQN,EAAII,UAAYJ,GAGrC,SAAKjB,QAAUe,EACfpC,EAAKG,SAASqB,MAAK,GACZY,CACX,GAAC,mDAzBQ,KAyBR,EACDS,QAKA5C,KAAK6C,YACL7C,KAAK8C,YAAYC,WACrB,CAEOC,WAAWC,GACdjD,KAAKI,SAASmB,KAAK,IAAKvB,KAAKI,SAAS8C,cAAeD,GACzD,CAEOE,gBAAgBC,GACnBpD,KAAKM,QAAQiB,KAAK6B,EACtB,CAEOC,aAAaC,EAAgB,KAChCtD,KAAKgD,WAAWhD,KAAKI,SAAS8C,YAC9BlD,KAAKuD,SACD,OACA,IAAMvD,KAAKgD,WAAWhD,KAAKI,SAAS8C,YACpCI,EAER,CAEOE,cACHxD,KAAKyD,cAAc,OACvB,CAEaC,QAAQC,GAAe,qCAChC,MAAMC,QAAM,EAASC,MAAY,CAC7BC,cAAeC,KAAKC,WAAUnC,MAAOO,UAAY,KACjD6B,YAAaF,KAAKC,SAAMhC,KAAS,IAAIH,MAAQO,UAAY,KACzDK,SAAUkB,EAAKzC,MACfgD,MAAO,oBACPC,YACIC,EAAKvE,KAAKwE,SAASC,cAAgBF,EAAKvE,KAAKwE,SAAStD,KAC1DwD,MAAO,CAACH,EAAKvE,KAAKwE,SAASG,IAC3BC,aAAc,UACRvC,kBACV,EAAMwC,MAAed,EAAOY,IAAI,GAAMtC,YACtCkC,EAAKzB,QAAQgB,EAAKzC,OAAS0C,EAC3BQ,EAAKhD,QAAQuC,EAAKzC,QAAS,CAAK,EAbA,EAcpC,CAEayD,SAAShB,GAAe,qCACjC,MAAMiB,EAAQC,EAAKlC,QAAQgB,EAAKzC,OAChC,GAAI0D,EAAO,CACP,MAAMhB,QAAM,EAASC,MAAY,IAC1Be,EAAME,SACTb,YAAaF,KAAKC,WAAUnC,MAAOO,UAAY,OACzCF,kBACV,EAAMwC,MAAed,EAAOY,IAAI,GAAOtC,YACvC2C,EAAKlC,QAAQgB,EAAKzC,OAAS0C,EAC3BiB,EAAKzD,QAAQuC,EAAKzC,QAAS,EAC9B,EAVgC,EAWrC,CAEc2B,YAAS,qCACnB,MAAMkC,QAAS,EAASC,MAAY,IAAI9C,YACxC6C,EAAUE,KAAK,CAACC,EAAGC,IAAMD,EAAEnE,KAAKqE,cAAcD,EAAEpE,OAChDsE,EAAK9E,OAAOgB,KAAKwD,EAAW,EAHT,EAIvB,EA7HSrF,EAAkB,oCAAlBA,GAAiB4F,cAAjB5F,EAAkB,wBAAlBA,EAAiB6F,QAAjB7F,EAAiB,qBAFd,qHCFI8F,wBAIIA,SACJA,kCAHIA,oBAEAA,gDA0BlB,MAAOC,UAA6B9F,KAsBtCC,YACY8F,EACA7F,EACA8F,EACAC,GAER9F,QALQE,cACAA,YACAA,cACAA,eAxBLA,WAAkB,GAETA,YAASA,KAAKH,KAAKgG,cAEnB7F,aAAUA,KAAK0F,OAAOzC,QAEtBjD,aAAWuC,GAASvC,KAAK0F,OAAO1C,WAAW,CAAET,SAE7CvC,gBAAciD,GAAYjD,KAAK0F,OAAO1C,WAAWC,GAEjDjD,eAAa8F,GAAQ9F,KAAK0F,OAAOvC,gBAAgB2C,GAEjD9F,iBAAeuE,IAC3BvE,KAAK4F,QAAQG,SAAS,GAAI,CACtBC,WAAYhG,KAAK2F,OACjBM,YAAa,CAAEC,SAAU3B,EAAM4B,KAAK,QAExCnG,KAAK0F,OAAO1C,WAAW,CAAEuB,SAAO,CAUpC,CAEa6B,WAAQ,2CACXrG,EAAKF,KAAKwG,YAAY7F,QAAK8F,KAAOhF,GAAMA,IAAIY,YAClDnC,EAAKwG,aACD,cACAxG,EAAK4F,OAAOa,cAAczD,UAAW0D,IACjC,GAAIA,EAAOC,IAAI,YAAa,CACxB,MAAMnC,EAAQkC,EAAOE,IAAI,YAAYC,MAAM,KAC3C,GAAIrC,EAAMsC,OAAQ,CACd,MAAMC,EAAQ/G,EAAKF,KAAKkH,YAAYxC,GACpC,IAAKuC,EACD,OAEJ/G,EAAKF,KAAKwE,SAAWtE,EAAKF,KAAKmH,UAAUC,KACpCC,GAAQA,EAAI1C,KAAOsC,EAAMK,WAE9BpH,EAAKwE,MAAQA,OAK7BxE,EAAKwG,aACD,SACAxG,EAAKF,KAAKgG,cAAc9C,UAAWqE,IAC/BrH,EAAKwE,MAAQxE,EAAKwE,MAAM5D,OAAQ0G,GAC5BD,EAAOH,KAAMK,GAAQA,EAAI9C,KAAO6C,KAE/BtH,EAAKwE,MAAMsC,QAAUO,EAAOP,QAC7B9G,EAAKwE,MAAMgD,KAAKH,EAAO,GAAG5C,IAE9BzE,EAAKyH,YAAYzH,EAAKwE,MAAK,IAGnCxE,EAAK0H,UAAU,GAAI,EAhCF,EAiCrB,EAhEShC,EAAqB,oCAArBA,GAAoBH,+CAApBG,EAAqB,sBAArBA,EAAoBiC,ieAxCzBlC,iBAEC,qBAFDA,CAEC,kBAIWA,qDAAmB,mCACFmC,gBAAmB,GAGpCnC,+CAMJA,UAEJA,8BAGIA,yCAAiBmC,6BAAmC,oBACnDnC,iBAAqBA,uBAAWA,UAErCA,iBACAA,wBAEIA,uCAAemC,cAAiB,GACnCnC,sBAtBOA,kCAKsBA,8CAS1BA,iWCVJA,kBAAoDA,kBAAMA,iDAZ9DA,iBAKIA,2BACAA,iBAAkC,WACZA,SAAgBA,QAClCA,iBACIA,SACJA,UAEJA,uBACAA,iBAA+B,mBAKvBA,yDAASA,eAASoC,aAAaA,YAAS,GAE5CpC,QACAA,gBAMC,eACaA,kBAAKA,UAEnBA,iBAMC,eACaA,iBAAIA,aAAW,yBAhClBA,8BAEOA,8CAEdA,uDAGFA,gCAGEA,uEAA0D,oBAA1DA,CAA0D,mDAW1DA,wEADAA,gDAUAA,qEADAA,iDAUd,MAAOqC,EAqBTjI,YAAoB8F,GAAyB,WAAzB1F,cAfJA,cAAO,OAAG,YACtBD,EAAK+H,SAAU,QACT/H,EAAK2F,OACNhC,QAAQ3D,EAAK4D,MACboE,MAAOC,MAAMC,MAAY,mCAC9BlI,EAAK+H,SAAU,CACnB,GACgB9H,eAAQ,OAAG,YACvBD,EAAK+H,SAAU,QACT/H,EAAK2F,OACNf,SAAS5E,EAAK4D,MACdoE,MAAOC,MAAMC,MAAY,oCAC9BlI,EAAK+H,SAAU,CACnB,EAEgD,EArBvCD,EAAqB,oCAArBA,GAAqBvC,WAArBuC,EAAqB,sBAArBA,EAAqBH,ozBA5C1BlC,8BAGKA,gICADA,iBAMIA,qEAASA,oBAAe,oBAExBA,SACJA,8CALIA,sDAAyD,6BAIzDA,oDAmBQA,kIAKIA,8BAAkC,SAAlCA,CAAkC,wFAb1CA,SACIA,kBAKIA,SACJA,QACAA,mDAaJA,mDAlBQA,+CAGAA,0BAK1BA,+EAZcA,SACIA,iDAsBJA,6CAtBmBA,mFAFvBA,SACIA,iCAwBJA,8BAxBoCA,0DA0BxCA,sDAKIA,kBAEC,OACMA,qCAAyBA,WA1D5C,MAAM0C,EAAQ,8BAA8BtB,MAAM,IA6F5C,MAAOuB,UAA8BxI,KA6BvCC,YAAoB8F,GAChB5F,QADgBE,cA5BbA,kBAAe,IAENA,YAASkI,EACTlI,YAASA,KAAK0F,OAAO5C,YACrB9C,aAAUA,KAAK0F,OAAOoC,QAEtB9H,gBAAaA,KAAK0F,OAAO0C,eAAe5H,QACpDC,KAAK4H,GAASA,EAAKxB,SAGP7G,eAAYA,KAAK0F,OAAO0C,eAAe5H,QACnDC,KAAK4H,IACD,MAAMC,EAAW,GACjB,UAAWC,KAAQL,EACfI,EAASC,IAASF,GAAQ,IAAI1H,OACzBgD,GACGA,EAAK5C,KAAKC,cAAc,GAAGwH,WAAWD,IAC5B,MAATA,IACIL,EAAMjH,SAAS0C,EAAK5C,KAAKC,cAAc,KAGxD,YAAKyH,QAAQ,SAAU,IAAMzI,KAAK0I,SAAS,IAAK,IACzCJ,IAQf,CAEOI,SAASpH,GACZ,MAAMqH,EAAa3I,KAAK4I,IAAIC,cAAcC,UAC1C,UAAWC,KAASb,EAAO,CACvB,MAAMc,EAAqBC,SAASC,cAChC,WAAqB,MAAVH,EAAgB,IAAMA,KAErC,GAAIC,EAAI,CACJ,GAAIA,EAAGG,UAAYR,EAAa,EAC5B,MAEJ3I,KAAKoJ,aAAeL,GAGhC,CAEOM,SAASN,GACZ,MAAMC,EAAKC,SAASC,cAAc,WAAWH,OACzCC,IACAA,EAAGM,eAAe,CAAEC,SAAU,SAAUC,MAAO,WAC/CxJ,KAAKoJ,aAAeL,EAE5B,wBC9IQvD,8BDwFC2C,EAAsB,oCAAtBA,GAAqB7C,WAArB6C,EAAsB,sBAAtBA,EAAqBT,6hCAxF1BlC,iBACIA,uBAUJA,QACAA,mBAIIA,kCAAUmC,aAAgB,GAE1BnC,kDA0BJA,QACAA,sDAIAA,kEA9C0BA,mCAePA,+CAA0B,cA4BxCA,6fC7BP,MAAOiE,EAGT7J,YAAoB8F,iBAFJ1F,aAAUA,KAAK0F,OAAOoC,OAEU,CAEzC1B,WACHpG,KAAK0F,OAAOrC,cAChB,CAEOqG,cACH1J,KAAK0F,OAAOlC,aAChB,EAXSiG,EAAc,oCAAdA,GAAcnE,WAAdmE,EAAc,sBAAdA,EAAc/B,4UArBnBlC,mBACAA,kBACIA,0BAA4C,sBAE5CA,sDAKJA,eAHSA,6OCFjB,MAAMmE,GAAkB,CAAC,CAAEC,KAAM,GAAIC,UAAWJ,IAEnCK,GAA0B,CACnCL,EACAhE,EACA0C,EACAN,GAYE,MAAOkC,KAAW,oCAAXA,EAAW,EAAXA,EAAW,sBAAXA,MAAW,0BANhBC,KACAC,KACAC,KACAC,cAAsBR","names":["StaffStateService","AsyncHandler","constructor","_org","super","_this","this","BehaviorSubject","_loading","asObservable","_filters","combineLatest","_search","_users","pipe","map","details","filter","users","options","i","name","toLowerCase","includes","email","only_onsite","_onsite","switchMap","_","next","bookings","queryBookings","period_start","getUnixTime","startOfDay","Date","now","period_end","endOfDay","type","toPromise","checkin_map","valueOf","bkn","timePeriodsIntersect","date","duration","asset_id","checked_in","_events","shareReplay","loadUsers","user_events","subscribe","setFilters","filters","getValue","setSearchString","search","startPolling","delay","interval","stopPolling","clearInterval","checkin","user","result","saveBooking","booking_start","Math","floor","booking_end","title","description","_this2","building","display_name","zones","id","booking_type","checkinBooking","checkout","event","_this3","toJSON","user_list","searchStaff","sort","a","b","localeCompare","_this4","core","factory","i0","StaffTopbarComponent","_state","_route","_router","active_levels","str","navigate","relativeTo","queryParams","zone_ids","join","ngOnInit","initialised","first","subscription","queryParamMap","params","has","get","split","length","level","levelWithID","buildings","find","bld","parent_id","levels","zone","lvl","push","updateZones","setSearch","selectors","ctx","ctx_r2","StaffDetailsComponent","loading","catch","e","notifyError","CHARS","StaffListingComponent","filtered_users","list","user_map","char","startsWith","timeout","onScroll","scroll_top","_el","nativeElement","scrollTop","group","el","document","querySelector","offsetTop","active_group","scrollTo","scrollIntoView","behavior","block","StaffComponent","ngOnDestroy","ROUTES","path","component","COMPONENTS","StaffModule","CommonModule","FormsModule","UIModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/staff/staff-state.service.ts","./apps/concierge/src/app/staff/staff-topbar.component.ts","./apps/concierge/src/app/staff/staff-details.component.ts","./apps/concierge/src/app/staff/staff-listing.component.ts","./apps/concierge/src/app/staff/staff.component.ts","./apps/concierge/src/app/staff/staff.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { searchStaff, StaffUser } from '@placeos/users';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\n\nimport {\n    Booking,\n    checkinBooking,\n    queryBookings,\n    saveBooking,\n} from '@placeos/bookings';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { endOfDay, getUnixTime, startOfDay } from 'date-fns';\nimport { AsyncHandler, timePeriodsIntersect } from '@placeos/common';\nimport { HashMap } from '@placeos/ts-client/dist/esm/utilities/types';\nimport { OrganisationService } from '@placeos/organisation';\n\nexport interface StaffFilters {\n    date?: number;\n    zones?: string[];\n    only_onsite?: boolean;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class StaffStateService extends AsyncHandler {\n    private _onsite: HashMap<boolean> = {};\n    private _events: HashMap<Booking> = {};\n\n    private _filters = new BehaviorSubject<StaffFilters>({});\n\n    private _search = new BehaviorSubject<string>('');\n\n    private _loading = new BehaviorSubject<boolean>(false);\n\n    private _users = new BehaviorSubject<StaffUser[]>([]);\n\n    public readonly loading = this._loading.asObservable();\n\n    public readonly filters = this._filters.asObservable();\n\n    public readonly users = this._filters.asObservable();\n\n    public readonly filtered_users = combineLatest([\n        this._search,\n        this._users,\n        this._filters,\n    ]).pipe(\n        map((details) => {\n            const [filter, users, options] = details;\n            return users.filter(\n                (i) =>\n                    (!filter ||\n                        i.name.toLowerCase().includes(filter) ||\n                        i.email.toLowerCase().includes(filter)) &&\n                    (!options.only_onsite || this._onsite[i.email])\n            );\n        })\n    );\n\n    public readonly user_events = combineLatest([this._filters]).pipe(\n        switchMap(async (_) => {\n            this._loading.next(true);\n            const bookings = await queryBookings({\n                period_start: getUnixTime(startOfDay(Date.now())),\n                period_end: getUnixTime(endOfDay(Date.now())),\n                type: 'staff',\n            }).toPromise();\n            const checkin_map = {};\n            const now = new Date().valueOf();\n            for (const bkn of bookings) {\n                if (\n                    timePeriodsIntersect(\n                        now,\n                        now,\n                        bkn.date,\n                        bkn.date + bkn.duration * 60 * 1000\n                    )\n                ) {\n                    checkin_map[bkn.asset_id] = bkn.checked_in;\n                    this._events[bkn.asset_id] = bkn;\n                }\n            }\n            this._onsite = checkin_map;\n            this._loading.next(false);\n            return checkin_map;\n        }),\n        shareReplay()\n    );\n\n    constructor(private _org: OrganisationService) {\n        super();\n        this.loadUsers();\n        this.user_events.subscribe();\n    }\n\n    public setFilters(filters: StaffFilters) {\n        this._filters.next({ ...this._filters.getValue(), ...filters });\n    }\n\n    public setSearchString(search: string) {\n        this._search.next(search);\n    }\n\n    public startPolling(delay: number = 30 * 1000) {\n        this.setFilters(this._filters.getValue());\n        this.interval(\n            'poll',\n            () => this.setFilters(this._filters.getValue()),\n            delay\n        );\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    public async checkin(user: StaffUser) {\n        const result = await saveBooking({\n            booking_start: Math.floor(new Date().valueOf() / 1000),\n            booking_end: Math.floor(endOfDay(new Date()).valueOf() / 1000),\n            asset_id: user.email,\n            title: 'Checked-in Onsite',\n            description:\n                this._org.building.display_name || this._org.building.name,\n            zones: [this._org.building.id],\n            booking_type: 'staff',\n        } as any).toPromise();\n        await checkinBooking(result.id, true).toPromise();\n        this._events[user.email] = result;\n        this._onsite[user.email] = true;\n    }\n\n    public async checkout(user: StaffUser) {\n        const event = this._events[user.email];\n        if (event) {\n            const result = await saveBooking({\n                ...event.toJSON(),\n                booking_end: Math.floor(new Date().valueOf() / 1000),\n            } as any).toPromise();\n            await checkinBooking(result.id, false).toPromise();\n            this._events[user.email] = result;\n            this._onsite[user.email] = false;\n        }\n    }\n\n    private async loadUsers() {\n        const user_list = await searchStaff('').toPromise();\n        user_list.sort((a, b) => a.name.localeCompare(b.name));\n        this._users.next(user_list);\n    }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-topbar',\n    template: `\n        <div\n            class=\"flex items-center bg-white dark:bg-neutral-700 h-20 px-4 border-b border-gray-300 dark:border-neutral-500 space-x-2\"\n        >\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    multiple\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-slide-toggle\n                class=\"m-2\"\n                [ngModel]=\"(filters | async)?.only_onsite\"\n                (ngModelChange)=\"setFilters({ only_onsite: $event })\"\n                ><div class=\"text-xs\">Onsite Only</div></mat-slide-toggle\n            >\n            <div class=\"flex-1 w-2\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n        </div>\n    `,\n    styles: [\n        `\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class StaffTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._org.active_levels;\n\n    public readonly filters = this._state.filters;\n    /** Set filtered date */\n    public readonly setDate = (date) => this._state.setFilters({ date });\n    /** Set filtered date */\n    public readonly setFilters = (filters) => this._state.setFilters(filters);\n    /** Set filter string */\n    public readonly setSearch = (str) => this._state.setSearchString(str);\n    /** Update active zones for desks */\n    public readonly updateZones = (zones) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: zones.join(',') },\n        });\n        this._state.setFilters({ zones });\n    };\n\n    constructor(\n        private _state: StaffStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        if (!level) {\n                            return;\n                        }\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                        this.zones = zones;\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._org.active_levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.setSearch('');\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { notifyError } from '@placeos/common';\nimport { StaffUser } from '@placeos/users';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: 'staff-details',\n    template: `\n        <div\n            class=\"w-full flex items-center px-4 py-2 bg-white dark:bg-neutral-700 border-b border-gray-200 dark:border-neutral-500 hover:opacity-80\"\n            details\n            *ngIf=\"user\"\n        >\n            <a-user-avatar [user]=\"user\"></a-user-avatar>\n            <div class=\"flex flex-col flex-1\">\n                <div class=\"px-2\">{{ user?.name }}</div>\n                <div class=\"px-2 text-xs text-opacity-50\">\n                    {{ user?.email }}\n                </div>\n            </div>\n            <div *ngIf=\"onsite\" class=\"text-xs opacity-50 px-4\">Onsite</div>\n            <div class=\"flex items-center\">\n                <action-icon\n                    [matTooltip]=\"onsite ? 'Checkout Staff' : 'Checkin Staff'\"\n                    [loading]=\"loading\"\n                    [content]=\"onsite ? 'event_busy' : 'event_available'\"\n                    (click)=\"onsite ? checkout() : checkin()\"\n                >\n                </action-icon>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Email Staff\"\n                    [attr.disabled]=\"!user?.email\"\n                    [href]=\"'mailto:' + user?.email\"\n                >\n                    <app-icon>email</app-icon>\n                </a>\n                <a\n                    icon\n                    matRipple\n                    matTooltip=\"Phone Staff\"\n                    [attr.disabled]=\"!user?.phone\"\n                    [href]=\"'tel:' + user?.phone\"\n                >\n                    <app-icon>call</app-icon>\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [``],\n})\nexport class StaffDetailsComponent {\n    @Input() public user: StaffUser;\n    @Input() public onsite: boolean;\n\n    public loading: boolean;\n\n    public readonly checkin = async () => {\n        this.loading = true;\n        await this._state\n            .checkin(this.user)\n            .catch((e) => notifyError('Error checking in Staff member'));\n        this.loading = false;\n    };\n    public readonly checkout = async () => {\n        this.loading = true;\n        await this._state\n            .checkout(this.user)\n            .catch((e) => notifyError('Error checking out Staff member'));\n        this.loading = false;\n    };\n\n    constructor(private _state: StaffStateService) {}\n}\n","import { Component, ElementRef, ViewChild } from '@angular/core';\nimport { AsyncHandler } from '@placeos/common';\nimport { map } from 'rxjs/operators';\n\nimport { StaffStateService } from './staff-state.service';\n\nconst CHARS = '#abcdefghijklmnopqrstuvwxyz'.split('');\n\n@Component({\n    selector: 'staff-listings',\n    template: `\n        <div class=\"w-full p-2 flex items-center justify-center\">\n            <div\n                letter\n                *ngFor=\"let group of groups\"\n                class=\"capitalize h-6 w-6 flex items-center justify-center text-xs cursor-pointer\"\n                [class.disabled]=\"(user_list | async)[group].length <= 0\"\n                [class.active]=\"group === active_group\"\n                (click)=\"scrollTo(group)\"\n            >\n                {{ group }}\n            </div>\n        </div>\n        <div\n            class=\"flex-1 overflow-auto w-full relative bg-gray-100 dark:bg-neutral-600\"\n            style=\"height: 50%\"\n            #container\n            (scroll)=\"onScroll($event)\"\n        >\n            <ng-container *ngIf=\"user_count | async; else empty_state\">\n                <ng-container *ngFor=\"let group of groups\">\n                    <ng-container *ngIf=\"(user_list | async)[group].length\">\n                        <div\n                            group\n                            [id]=\"'letter-' + (group === '#' ? '0' : group)\"\n                            class=\"capitalize bg-gray-300 dark:bg-gray-700 border-b text-sm font-medium sticky top-0 z-10\"\n                        >\n                            {{ group }}\n                        </div>\n                        <staff-details\n                            *ngFor=\"\n                                let user of (user_list | async)[group];\n                                let i = index\n                            \"\n                            [id]=\"'letter-' + group + '-' + i\"\n                            [user]=\"user\"\n                            [onsite]=\"\n                                (events | async)\n                                    ? (events | async)[user.email]\n                                    : false\n                            \"\n                        ></staff-details>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </div>\n        <mat-progress-bar\n            *ngIf=\"loading | async\"\n            mode=\"indeterminate\"\n        ></mat-progress-bar>\n        <ng-template #empty_state>\n            <div\n                class=\"absolute inset-0 flex flex-col items-center justify-center\"\n            >\n                <p>No matching staff members</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                width: 100%;\n                height: 50%;\n            }\n\n            [letter] {\n                transition: font-size 200ms, color 200ms;\n            }\n\n            [group] {\n                border-color: #ccc;\n                padding: 0.5rem 1.65rem;\n            }\n\n            .disabled {\n                opacity: 0.2;\n                pointer-events: none;\n            }\n\n            .active {\n                font-size: 1.25rem;\n                opacity: 1;\n                color: #d81b60;\n            }\n        `,\n    ],\n})\nexport class StaffListingComponent extends AsyncHandler {\n    public active_group = '#';\n\n    public readonly groups = CHARS;\n    public readonly events = this._state.user_events;\n    public readonly loading = this._state.loading;\n\n    public readonly user_count = this._state.filtered_users.pipe(\n        map((list) => list.length)\n    );\n\n    public readonly user_list = this._state.filtered_users.pipe(\n        map((list) => {\n            const user_map = {};\n            for (const char of CHARS) {\n                user_map[char] = (list || []).filter(\n                    (user) =>\n                        user.name.toLowerCase()[0].startsWith(char) ||\n                        (char === '#' &&\n                            !CHARS.includes(user.name.toLowerCase()[0]))\n                );\n            }\n            this.timeout('scroll', () => this.onScroll({}), 30);\n            return user_map;\n        })\n    );\n\n    @ViewChild('container') private _el: ElementRef<HTMLDivElement>;\n\n    constructor(private _state: StaffStateService) {\n        super();\n    }\n\n    public onScroll(_) {\n        const scroll_top = this._el.nativeElement.scrollTop;\n        for (const group of CHARS) {\n            const el: HTMLDivElement = document.querySelector(\n                `#letter-${group === '#' ? '0' : group}`\n            );\n            if (el) {\n                if (el.offsetTop - scroll_top > 0) {\n                    break;\n                }\n                this.active_group = group;\n            }\n        }\n    }\n\n    public scrollTo(group: string) {\n        const el = document.querySelector(`#letter-${group}-0`);\n        if (el) {\n            el.scrollIntoView({ behavior: 'smooth', block: 'center' });\n            this.active_group = group;\n        }\n    }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { StaffStateService } from './staff-state.service';\n\n@Component({\n    selector: '[app-staff]',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden flex-1 flex flex-col bg-gray-200  dark:bg-neutral-600\">\n            <staff-topbar class=\"w-full\"></staff-topbar>\n            <staff-listings class=\"w-full flex-1 h-0\"></staff-listings>\n            <mat-progress-bar\n                class=\"w-full\"\n                *ngIf=\"loading | async\"\n                mode=\"indeterminate\"\n            ></mat-progress-bar>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class StaffComponent implements OnInit, OnDestroy {\n    public readonly loading = this._state.loading;\n\n    constructor(private _state: StaffStateService) {}\n\n    public ngOnInit() {\n        this._state.startPolling();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPolling();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, Type } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { StaffComponent } from './staff.component';\nimport { StaffTopbarComponent } from './staff-topbar.component';\nimport { StaffListingComponent } from './staff-listing.component';\nimport { StaffDetailsComponent } from './staff-details.component';\nimport { UIModule } from '../ui/ui.module';\n\nconst ROUTES: Route[] = [{ path: '', component: StaffComponent }];\n\nexport const COMPONENTS: Type<any>[] = [\n    StaffComponent,\n    StaffTopbarComponent,\n    StaffListingComponent,\n    StaffDetailsComponent,\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class StaffModule {}\n"],"x_google_ignoreList":[]}