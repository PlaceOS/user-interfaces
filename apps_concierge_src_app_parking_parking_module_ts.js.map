{"version":3,"file":"apps_concierge_src_app_parking_parking_module_ts.js","mappings":"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","names":["i0","ctx_r1","form","ParkingSpaceModalComponent","id","this","_data","constructor","_dialog_ref","event","EventEmitter","FormGroup","FormControl","name","Validators","map_id","assigned_user","assigned_to","assigned_name","notes","map_rotation","patchValue","postForm","valid","loading","disableClose","emit","reason","metadata","value","t","MAT_DIALOG_DATA","i1","core","Xpm","selectors","outputs","decls","vars","consts","template","rf","ctx","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","_r2","ParkingStateService","AsyncHandler","_org","_dialog","super","_poll","BehaviorSubject","_options","date","Date","now","search","zones","_loading","levels","active_levels","pipe","map","_","filter","lvl","tags","includes","spaces","combineLatest","lvls","options","switchMap","next","getValue","showMetadata","details","Array","tap","shareReplay","bookings","active_building","debounceTime","bld","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","length","join","asObservable","setOptions","startPolling","delay","interval","stopPolling","clearInterval","editSpace","space","_this","_asyncToGenerator","ref","open","data","state","Promise","race","afterClosed","toPromise","componentInstance","first","zone","new_space","randomInt","take","updateMetadata","description","close","removeSpace","_this2","openConfirmModal","title","content","icon","approveBooking","booking","catch","notifyError","notifySuccess","user_name","format","rejectBooking","i2","Yz7","factory","ɵfac","providedIn","row_r7","extension_data","plate_number","data_r8","row_r9","_r11","row","ctx_r10","reject","ctx_r12","approve","ParkingBookingsListComponent","_state","events","e","ParkingBookingsListComponent_ng_template_3_Template","ParkingBookingsListComponent_ng_template_5_Template","ParkingBookingsListComponent_ng_template_7_Template","ParkingBookingsListComponent_mat_progress_bar_9_Template","tmp_0_0","_c0","_c1","_c2","_c3","_r0","_r4","tmp_7_0","row_r3","_r5","ctx_r4","ctx_r6","ParkingSpaceListComponent","s","ParkingSpaceListComponent_ng_template_3_Template","ParkingSpaceListComponent_mat_progress_bar_5_Template","level_r1","display_name","ParkingTopbarComponent","_route","_router","setDate","d","setSearch","str","updateZones","z","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","subscription","queryParamMap","subscribe","params","has","get","split","level","levelWithID","building","buildings","find","parent_id","push","i3","features","$event","ParkingTopbarComponent_mat_option_3_Template","ROUTES","path","component","ParkingComponent","NavigationEnd","url_parts","url","parts","ParkingComponent_div_13_Template","tmp_4_0","children","redirectTo","AppParkingModule","oAB","cJS","CommonModule","UIModule","FormsModule","ReactiveFormsModule","FormFieldsModule","MatTabsModule","MatProgressBarModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-bookings-list.component.ts","./apps/concierge/src/app/parking/parking-space-list.component.ts","./apps/concierge/src/app/parking/parking-topbar.component.ts","./apps/concierge/src/app/parking/parking.component.ts","./apps/concierge/src/app/parking/parking.module.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header\n                class=\"flex items-center justify-between bg-secondary px-2 w-full\"\n            >\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <a-user-search-field\n                    name=\"user\"\n                    formControlName=\"assigned_user\"\n                ></a-user-search-field>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\">Save</button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = this._org.active_levels.pipe(\n        map((_) => _.filter((lvl) => lvl.tags.includes('parking')))\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([this.levels, this._options]).pipe(\n        filter(([lvls, options]) => !!(options.zones[0] || lvls[0]?.id)),\n        switchMap(([levels, options]) => {\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces'\n            );\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingSpace[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : bld?.id,\n            });\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 5000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space?: ParkingSpace) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._options.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: [\n                ...spaces.filter((_) => _.id !== new_space.id),\n                new_space,\n            ],\n            description: 'List of available parking spaces',\n        }).toPromise();\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`\n              );\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM Do')}.`\n              );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-bookings-list',\n    template: `\n        <custom-table\n            class=\"block min-w-[60rem]\"\n            [dataSource]=\"events\"\n            [columns]=\"[\n                'asset_name',\n                'booked_by_name',\n                'user_name',\n                'plate_number',\n                'status',\n                'actions'\n            ]\"\n            [display_column]=\"[\n                'Bay No.',\n                'Reserved By',\n                'Reserved For',\n                'Car Plate #',\n                'Status',\n                ' '\n            ]\"\n            [filter]=\"(options | async).search\"\n            [column_size]=\"['6r', 'flex', '14r', '8r', '6r', '10r']\"\n            [template]=\"{\n                plate_number: plate_template,\n                actions: action_template,\n                status: status_template\n            }\"\n            [class.opacity-50]=\"(loading | async)?.includes('bookings')\"\n        ></custom-table>\n        <ng-template #plate_template let-row=\"row\">\n            {{ row?.extension_data?.plate_number }}\n        </ng-template>\n        <ng-template #status_template let-data=\"data\">\n            <span\n                class=\"capitalize text-white px-2 py-1 rounded border border-gray-200\"\n                [class.bg-success]=\"data === 'approved'\"\n                [class.bg-pending]=\"data === 'tentative'\"\n                [class.bg-error]=\"data === 'cancelled' || data === 'declined'\"\n            >\n                {{ data }}\n            </span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex items-center justify-end\">\n                <!-- <button icon matTooltip=\"Reallocate Parking Reservation\">\n                    <app-icon>published_with_changes</app-icon>\n                </button> -->\n                <button\n                    icon\n                    matTooltip=\"Reject Parking Reservation\"\n                    (click)=\"reject(row)\"\n                >\n                    <app-icon>event_busy</app-icon>\n                </button>\n                <button\n                    icon\n                    matTooltip=\"Approve Parking Reservation\"\n                    (click)=\"approve(row)\"\n                >\n                    <app-icon>event_available</app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <mat-progress-bar\n            *ngIf=\"(loading | async)?.includes('bookings')\"\n            class=\"absolute bottom-0 inset-x-0\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class ParkingBookingsListComponent {\n    public readonly events = this._state.bookings;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly reject = (e) => this._state.rejectBooking(e);\n    public readonly approve = (e) => this._state.approveBooking(e);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-list',\n    template: `\n        <custom-table\n            class=\"block min-w-[56rem]\"\n            [dataSource]=\"spaces\"\n            [columns]=\"['name', 'map_id', 'assigned_to', 'notes', 'actions']\"\n            [display_column]=\"['Bay No.', 'Map ID', 'Assigned', 'Notes', ' ']\"\n            [column_size]=\"['8r', '10r', '14r', 'flex', '10r']\"\n            [template]=\"{ actions: action_template }\"\n            [filter]=\"(options | async).search\"\n            [class.opacity-50]=\"(loading | async)?.includes('spaces')\"\n        ></custom-table>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex items-center justify-end\">\n                <button icon (click)=\"editSpace(row)\">\n                    <app-icon>edit</app-icon>\n                </button>\n                <button icon (click)=\"removeSpace(row)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <mat-progress-bar\n            *ngIf=\"(loading | async)?.includes('spaces')\"\n            class=\"absolute bottom-0 inset-x-0\"\n        ></mat-progress-bar>\n    `,\n    styles: [],\n})\nexport class ParkingSpaceListComponent {\n    public readonly spaces = this._state.spaces;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly editSpace = (s) => this._state.editSpace(s);\n    public readonly removeSpace = (s) => this._state.removeSpace(s);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { EventsStateService } from '../day-view/events-state.service';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-topbar',\n    template: `\n        <div class=\"flex items-center bg-white dark:bg-neutral-700 px-2 h-20\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"zones[0]\"\n                    (ngModelChange)=\"updateZones([$event]); zones = [$event]\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-0\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                min-width: 0;\n                padding: 0 0.85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class ParkingTopbarComponent extends AsyncHandler implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n    /** Options set for week view */\n    public readonly options = this._state.options;\n    /** Set filtered date */\n    public readonly setDate = (d) => this._state.setOptions({ date: d });\n    /** Set filter string */\n    public readonly setSearch = (str) =>\n        this._state.setOptions({ search: str });\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._state.setOptions({ zones: z });\n    };\n\n    constructor(\n        private _state: ParkingStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._state.levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-parking',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full relative\">\n                <parking-topbar></parking-topbar>\n                <div class=\"dark\">\n                    <nav mat-tab-nav-bar>\n                        <a\n                            mat-tab-link\n                            [routerLink]=\"['/parking', 'events']\"\n                            queryParamsHandling=\"merge\"\n                            [active]=\"path === 'events'\"\n                        >\n                            Bookings\n                        </a>\n                        <a\n                            mat-tab-link\n                            [routerLink]=\"['/parking', 'spaces']\"\n                            queryParamsHandling=\"merge\"\n                            [active]=\"path === 'spaces'\"\n                        >\n                            Manage Spaces\n                        </a>\n                        <!-- <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Make Booking\n                    </a> -->\n                    </nav>\n                </div>\n                <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                    <router-outlet></router-outlet>\n                </div>\n                <div\n                    *ngIf=\"!(levels | async)?.length\"\n                    class=\"absolute inset-0 bg-white/80 dark:bg-white/20 flex flex-col items-center justify-center z-50\"\n                >\n                    <p>No parking floors for the currently selected building</p>\n                </div>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: #fff;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ParkingComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { Route, RouterModule } from '@angular/router';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { UIModule } from '../ui/ui.module';\n\nimport { ParkingBookingsListComponent } from './parking-bookings-list.component';\nimport { ParkingSpaceListComponent } from './parking-space-list.component';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingTopbarComponent } from './parking-topbar.component';\nimport { ParkingComponent } from './parking.component';\n\nconst COMPONENTS = [\n    ParkingComponent,\n    ParkingBookingsListComponent,\n    ParkingSpaceListComponent,\n    ParkingTopbarComponent,\n    ParkingSpaceModalComponent,\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: ParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'spaces', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FormFieldsModule,\n        MatTabsModule,\n        MatProgressBarModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppParkingModule {}\n"],"x_google_ignoreList":[]}