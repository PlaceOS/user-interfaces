{"version":3,"file":"apps_concierge_src_app_parking_parking_module_ts.js","mappings":"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","names":["i0","_r1","ctx_r1","form","patchValue","assigned_user","assigned_to","assigned_name","postForm","ParkingSpaceModalComponent","id","this","_data","constructor","_dialog_ref","event","EventEmitter","FormGroup","FormControl","name","Validators","required","map_id","notes","map_rotation","valid","loading","value","email","disableClose","emit","reason","metadata","static","t","MAT_DIALOG_DATA","i1","core","VBU","selectors","outputs","decls","vars","consts","template","rf","ctx","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","load_state_r3","ParkingStateService","AsyncHandler","_org","_dialog","_settings","super","_poll","BehaviorSubject","_change","_options","date","Date","now","search","zones","_loading","levels","combineLatest","active_region","active_building","pipe","map","region","bld","get","blds","buildingsForRegion","bld_ids","list","filter","lvl","includes","parent_id","tags","display_name","find","_","building","spaces","switchMap","options","next","getValue","showMetadata","of","details","Array","tap","shareReplay","users","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","length","join","asObservable","setOptions","startPolling","delay","interval","stopPolling","clearInterval","editSpace","space","_this","_asyncToGenerator","ref","open","data","state","Promise","race","afterClosed","toPromise","componentInstance","first","zone","new_space","randomInt","take","idx","findIndex","push","new_space_list","updateMetadata","description","close","removeSpace","_this2","openConfirmModal","title","content","icon","saveUsers","approveBooking","booking","catch","notifyError","notifySuccess","user_name","format","rejectBooking","i2","i3","jDH","factory","ɵfac","providedIn","row_r1","extension_data","plate_number","data_r2","row_r4","_r3","row","ctx_r4","reject","approve","ParkingBookingsListComponent","_state","events","e","ParkingBookingsListComponent_ng_template_3_Template","ParkingBookingsListComponent_ng_template_5_Template","ParkingBookingsListComponent_ng_template_7_Template","ParkingBookingsListComponent_mat_progress_bar_9_Template","tmp_3_0","_c0","_c1","_c2","_c3","plate_template_r6","action_template_r8","status_template_r7","tmp_10_0","ParkingSpaceListComponent","s","ParkingSpaceListComponent_ng_template_4_Template","ParkingSpaceListComponent_ng_template_6_Template","ParkingSpaceListComponent_mat_progress_bar_8_Template","tmp_2_0","id_template_r6","action_template_r7","tmp_9_0","level_r1","ParkingTopbarComponent_mat_option_9_div_2_Template","use_region","$event","setDate","ParkingTopbarComponent","_route","_router","manage","d","setSearch","str","updateZones","z","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","subscription","queryParamMap","subscribe","params","has","split","level","levelWithID","buildings","url","newReservation","i4","features","ParkingTopbarComponent_mat_option_9_Template","ParkingTopbarComponent_date_options_12_Template","tmp_1_0","ParkingComponent","path","NavigationEnd","url_parts","parts","ParkingComponent_div_11_Template","tmp_4_0","NewParkingComponent","NewParkingComponent_div_7_Template","tmp_0_0","ctx_r2","_r2","key","setValue","name_r6","ctx_r7","deletion","form_r7","_r9","markForDelete","isNew","_r10","clearChanges","ParkingUsersListComponent_ng_template_6_app_icon_1_Template","ParkingUsersListComponent_ng_template_6_button_2_Template","ParkingUsersListComponent_ng_template_6_button_3_Template","dirty","entries","new_items","change_count","ParkingUsersListComponent_div_11_div_1_Template","ParkingUsersListComponent_div_11_div_2_Template","ParkingUsersListComponent_div_11_div_4_Template","generateUserForm","user","transponder","designation","car_model","car_colour","phone","ParkingUsersListComponent","forms","u","user_list","a","b","f","Set","add","item","reset","newUser","saveChanges","ParkingUsersListComponent_ng_template_4_Template","ParkingUsersListComponent_ng_template_6_Template","ParkingUsersListComponent_div_11_Template","text_input_template_r11","action_template_r12","ROUTES","component","children","redirectTo","AppParkingModule","$C","G2t","CommonModule","UIModule","FormsModule","ReactiveFormsModule","FormFieldsModule","MatTabsModule","MatProgressBarModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-bookings-list.component.ts","./apps/concierge/src/app/parking/parking-space-list.component.ts","./apps/concierge/src/app/parking/parking-topbar.component.ts","./apps/concierge/src/app/parking/parking.component.ts","./apps/concierge/src/app/parking/new-parking.component.ts","./apps/concierge/src/app/parking/parking-users-list.component.ts","./apps/concierge/src/app/parking/parking.module.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                        class=\"mb-4\"\n                    ></a-user-search-field>\n                    <button\n                        btn\n                        matRipple\n                        class=\"mb-5\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null\n                            })\n                        \"\n                    >\n                        Clear\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n    SettingsService,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    email: string;\n    name: string;\n    transponder: string;\n    designation: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = combineLatest([\n        this._org.active_region,\n        this._org.active_building,\n    ]).pipe(\n        map(([region, bld]) => {\n            const levels = this._org.levels;\n            if (this._settings.get('app.use_region')) {\n                const blds = this._org.buildingsForRegion();\n                const bld_ids = blds.map((bld) => bld.id);\n                const list = levels.filter(\n                    (lvl) =>\n                        bld_ids.includes(lvl.parent_id) &&\n                        lvl.tags.includes('parking')\n                );\n                list.map((lvl) => ({\n                    ...lvl,\n                    display_name: `${\n                        blds.find((_) => _.id === lvl.parent_id)?.display_name\n                    } - ${lvl.display_name}`,\n                }));\n                return list;\n            }\n            return levels.filter(\n                (lvl) =>\n                    lvl.parent_id === this._org.building.id &&\n                    lvl.tags.includes('parking')\n            );\n        })\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        switchMap(([levels, options]) => {\n            if (!(options.zones[0] || levels[0]?.id)) {\n                return of({ details: [] });\n            }\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces'\n            );\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingSpace[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : (this._settings.get('app.use_region')\n                          ? this._org.region?.id\n                          : '') || bld?.id,\n            });\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 5000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space?: ParkingSpace) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._options.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    public async saveUsers(users: ParkingUser[]) {}\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`\n              );\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM Do')}.`\n              );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-bookings-list',\n    template: `\n        <custom-table\n            class=\"block min-w-[60rem]\"\n            [dataSource]=\"events\"\n            [columns]=\"[\n                'asset_name',\n                'booked_by_name',\n                'user_name',\n                'plate_number',\n                'status',\n                'actions'\n            ]\"\n            [display_column]=\"[\n                'Bay No.',\n                'Reserved By',\n                'Reserved For',\n                'Car Plate #',\n                'Status',\n                ' '\n            ]\"\n            [filter]=\"(options | async).search\"\n            [column_size]=\"['6r', 'flex', '14r', '8r', '6r', '6r']\"\n            [template]=\"{\n                plate_number: plate_template,\n                actions: action_template,\n                status: status_template\n            }\"\n            [class.opacity-50]=\"(loading | async)?.includes('bookings')\"\n        ></custom-table>\n        <ng-template #plate_template let-row=\"row\">\n            {{ row?.extension_data?.plate_number }}\n        </ng-template>\n        <ng-template #status_template let-data=\"data\">\n            <span\n                class=\"capitalize px-2 py-1 rounded border border-base-200\"\n                [class.bg-success]=\"data === 'approved'\"\n                [class.bg-warning]=\"data === 'tentative'\"\n                [class.bg-error]=\"data === 'cancelled' || data === 'declined'\"\n                [class.text-success-content]=\"data === 'approved'\"\n                [class.text-warning-content]=\"data === 'tentative'\"\n                [class.text-error-content]=\"\n                    data === 'cancelled' || data === 'declined'\n                \"\n            >\n                {{ data }}\n            </span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex items-center justify-end\">\n                <!-- <button icon matTooltip=\"Reallocate Parking Reservation\">\n                    <app-icon>published_with_changes</app-icon>\n                </button> -->\n                <button\n                    icon\n                    matTooltip=\"Reject Parking Reservation\"\n                    (click)=\"reject(row)\"\n                >\n                    <app-icon>event_busy</app-icon>\n                </button>\n                <button\n                    icon\n                    matTooltip=\"Approve Parking Reservation\"\n                    (click)=\"approve(row)\"\n                >\n                    <app-icon>event_available</app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <mat-progress-bar\n            *ngIf=\"(loading | async)?.includes('bookings')\"\n            class=\"absolute bottom-0 inset-x-0\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class ParkingBookingsListComponent {\n    public readonly events = this._state.bookings;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly reject = (e) => this._state.rejectBooking(e);\n    public readonly approve = (e) => this._state.approveBooking(e);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-list',\n    template: `\n        <div class=\"h-full w-full overflow-auto\">\n            <custom-table\n                class=\"block min-w-[56rem]\"\n                [dataSource]=\"spaces\"\n                [columns]=\"[\n                    'name',\n                    'map_id',\n                    'assigned_to',\n                    'notes',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Bay No.',\n                    'Map ID',\n                    'Assigned',\n                    'Notes',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '10r', '14r', 'flex', '10r']\"\n                [template]=\"{ map_id: id_template, actions: action_template }\"\n                [filter]=\"(options | async).search\"\n                [class.opacity-50]=\"(loading | async)?.includes('spaces')\"\n            ></custom-table>\n            <ng-template #id_template let-data=\"data\">\n                <span class=\"font-mono text-sm\">{{ data }}</span>\n            </ng-template>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"w-full flex items-center justify-end\">\n                    <button icon (click)=\"editSpace(row)\">\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button icon (click)=\"removeSpace(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </ng-template>\n            <mat-progress-bar\n                *ngIf=\"(loading | async)?.includes('spaces')\"\n                class=\"absolute bottom-0 inset-x-0\"\n            ></mat-progress-bar>\n        </div>\n        <button\n            btn\n            icon\n            matRipple\n            class=\"absolute bottom-2 left-2 bg-secondary text-secondary-content\"\n            (click)=\"editSpace()\"\n        >\n            <app-icon>add</app-icon>\n        </button>\n    `,\n    styles: [],\n})\nexport class ParkingSpaceListComponent {\n    public readonly spaces = this._state.spaces;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly editSpace = (s?) => this._state.editSpace(s);\n    public readonly removeSpace = (s) => this._state.removeSpace(s);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler, SettingsService } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-topbar',\n    template: `\n        <div class=\"flex items-center w-full pt-4 pb-2 px-8 space-x-2\">\n            <h2 class=\"text-2xl font-medium\">\n                {{ manage ? 'Manage Parking' : 'Parking' }}\n            </h2>\n            <div class=\"flex-1 w-px\"></div>\n            <searchbar\n                class=\"mr-2\"\n                [model]=\"(options | async)?.search\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <!-- <button\n                btn\n                matRipple\n                *ngIf=\"!manage\"\n                class=\"space-x-2\"\n                (click)=\"newReservation()\"\n            >\n                <div>New Reservation</div>\n                <app-icon>add</app-icon>\n            </button> -->\n        </div>\n        <div class=\"flex items-center bg-base-100 px-8 h-20\">\n            <mat-form-field appearance=\"outline\" class=\"w-60\">\n                <mat-select\n                    [(ngModel)]=\"zones\"\n                    (ngModelChange)=\"updateZones($event)\"\n                    placeholder=\"All Levels\"\n                    multiple\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        <div class=\"flex flex-col-reverse\">\n                            <div class=\"text-xs opacity-30\" *ngIf=\"use_region\">\n                                {{ (level.parent_id | building)?.display_name }}\n                                <span class=\"opacity-0\"> - </span>\n                            </div>\n                            <div>{{ level.display_name || level.name }}</div>\n                        </div>\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-0\"></div>\n            <date-options\n                *ngIf=\"!manage\"\n                (dateChange)=\"setDate($event)\"\n            ></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                min-width: 0;\n                padding: 0 0.85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class ParkingTopbarComponent extends AsyncHandler implements OnInit {\n    public manage = false;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n    /** Options set for week view */\n    public readonly options = this._state.options;\n    /** Set filtered date */\n    public readonly setDate = (d) => this._state.setOptions({ date: d });\n    /** Set filter string */\n    public readonly setSearch = (str) =>\n        this._state.setOptions({ search: str });\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._state.setOptions({ zones: z });\n    };\n\n    public get use_region() {\n        return !!this._settings.get('app.use_region');\n    }\n\n    constructor(\n        private _state: ParkingStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router,\n        private _settings: SettingsService\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._state.levels.subscribe((levels) => {\n                if (this.use_region) return;\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.manage = !this._router.url.includes('events');\n    }\n\n    public newReservation() {}\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-parking',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden bg-base-100\">\n            <parking-topbar></parking-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'spaces']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'spaces'\"\n                    >\n                        Manage Spaces\n                    </a>\n                    <!-- <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Make Booking\n                    </a> -->\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto px-4\">\n                <router-outlet></router-outlet>\n            </div>\n            <div\n                *ngIf=\"!(levels | async)?.length\"\n                class=\"absolute inset-0 flex flex-col items-center justify-center z-50\"\n            >\n                <div class=\"absolute inset-0 bg-base-100 opacity-50 z-0\"></div>\n                <p>No parking floors for the currently selected building</p>\n            </div>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ParkingComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-new-parking',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full relative\">\n                <parking-topbar></parking-topbar>\n                <div class=\"relative flex-1 h-1/2 w-full overflow-auto px-8\">\n                    <router-outlet></router-outlet>\n                </div>\n                <div\n                    *ngIf=\"!(levels | async)?.length\"\n                    class=\"absolute inset-0 flex flex-col items-center justify-center z-50\"\n                >\n                    <div\n                        class=\"absolute inset-0 bg-base-100 opacity-80 z-0\"\n                    ></div>\n                    <p class=\"z-10 opacity-60\">\n                        No parking floors for the currently selected building\n                    </p>\n                </div>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class NewParkingComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService, ParkingUser } from './parking-state.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { map, take } from 'rxjs/operators';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { randomInt } from '@placeos/common';\n\nconst generateUserForm = (user?: ParkingUser) =>\n    new FormGroup({\n        id: new FormControl(user.id || ''),\n        email: new FormControl(user.email || ''),\n        name: new FormControl(user.name || ''),\n        transponder: new FormControl(user.transponder || ''),\n        designation: new FormControl(user.designation || ''),\n        car_model: new FormControl(user.car_model || ''),\n        car_colour: new FormControl(user.car_colour || ''),\n        plate_number: new FormControl(user.plate_number || ''),\n        phone: new FormControl(user.phone || ''),\n        notes: new FormControl(user.notes || ''),\n    });\n\n@Component({\n    selector: 'parking-users-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-2\">\n            <custom-table\n                class=\"block min-w-[96rem]\"\n                [dataSource]=\"user_list\"\n                [columns]=\"[\n                    'email',\n                    'transponder',\n                    'designation',\n                    'car_model',\n                    'car_colour',\n                    'plate_number',\n                    'phone',\n                    'notes',\n                    'actions'\n                ]\"\n                [display_column]=\"['', '', '', '', '', '', '', '', ' ']\"\n                [column_size]=\"[\n                    '14r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    'flex'\n                ]\"\n                [template]=\"{\n                    email: text_input_template,\n                    name: text_input_template,\n                    transponder: text_input_template,\n                    designation: text_input_template,\n                    car_model: text_input_template,\n                    car_colour: text_input_template,\n                    plate_number: text_input_template,\n                    phone: text_input_template,\n                    notes: text_input_template,\n                    actions: action_template\n                }\"\n                [filter]=\"(options | async).search\"\n                [class.opacity-50]=\"(loading | async)?.includes('users')\"\n            ></custom-table>\n            <ng-template\n                #text_input_template\n                let-form=\"row\"\n                let-key=\"key\"\n                let-name=\"name\"\n            >\n                <input\n                    [ngModel]=\"form.value[key]\"\n                    (ngModelChange)=\"form.get(key).setValue($event)\"\n                    [placeholder]=\"name\"\n                    class=\"relative -top-px border-none px-2 py-4 -m-2 text-base w-full !outline-none focus:border-b border-blue-600\"\n                />\n            </ng-template>\n            <ng-template #action_template let-form=\"row\">\n                <div class=\"w-full flex items-center justify-end\">\n                    <app-icon\n                        *ngIf=\"\n                            deletion.has(form.value.id) ||\n                            form.dirty ||\n                            isNew(form.value.id)\n                        \"\n                        [class.text-red-600]=\"deletion.has(form.value.id)\"\n                        [class.text-yellow-400]=\"!deletion.has(form.value.id)\"\n                    >\n                        warning\n                    </app-icon>\n                    <button\n                        btn\n                        icon\n                        *ngIf=\"!deletion.has(form.value.id)\"\n                        (click)=\"markForDelete(form.value.id)\"\n                        [matTooltip]=\"\n                            isNew(form.value.id)\n                                ? 'Remove New User'\n                                : 'Mark for Deletion'\n                        \"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        btn\n                        icon\n                        *ngIf=\"deletion.has(form.value.id) || form.dirty\"\n                        matTooltip=\"Clear Changes\"\n                        (click)=\"clearChanges(id)\"\n                    >\n                        <app-icon>clear_all</app-icon>\n                    </button>\n                </div>\n            </ng-template>\n        </div>\n        <button\n            btn\n            icon\n            matRipple\n            class=\"absolute bottom-2 left-2 bg-primary text-white\"\n            (click)=\"newUser()\"\n        >\n            <app-icon>add</app-icon>\n        </button>\n        <div\n            class=\"absolute bottom-2 right-2 bg-base-100 border border-base-200 p-2 text-base rounded shadow space-y-2\"\n            *ngIf=\"\n                deletion.entries.length ||\n                (change_count | async) ||\n                (new_items | async).length\n            \"\n        >\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"deletion.entries.length\"\n            >\n                <app-icon class=\"text-red-600 text-2xl\">warning</app-icon>\n                <div>{{ deletion.entries.length }} users pending deletion</div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"(new_items | async).length\"\n            >\n                <app-icon class=\"text-yellow-400 text-2xl\">warning</app-icon>\n                <div>\n                    {{ (new_items | async).length }} new users pending save\n                </div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"change_count | async\"\n            >\n                <app-icon class=\"text-yellow-400 text-2xl\">warning</app-icon>\n                <div>{{ change_count | async }} users with pending changes</div>\n            </div>\n            <button btn class=\"w-full\">Save Changes</button>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ParkingUsersListComponent {\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n    public readonly forms = this._state.users.pipe(\n        map((_) => _.map((u) => generateUserForm(u)))\n    );\n    public readonly new_items = new BehaviorSubject<FormGroup[]>([]);\n    public readonly user_list = combineLatest([\n        this.forms,\n        this.new_items,\n    ]).pipe(map(([a, b]) => [...a, ...b]));\n    public readonly change_count = this.user_list.pipe(\n        map((_) => _.filter((f) => f.dirty || !this.isNew(f.value.id)).length)\n    );\n    public deletion = new Set<string>();\n\n    public isNew(id: string) {\n        return !!this.new_items.getValue().find((_) => _.value.id === id);\n    }\n\n    constructor(private _state: ParkingStateService) {}\n\n    public markForDelete(id) {\n        if (this.isNew(id)) {\n            this.new_items.next(\n                this.new_items.getValue().filter((_) => _.value.id !== id)\n            );\n        } else this.deletion.add(id);\n    }\n\n    public async clearChanges(id) {\n        if (this.isNew(id)) {\n            const new_items = this.new_items.getValue();\n            const item = new_items.find((_) => _.value.id === id);\n            if (item) {\n                item.reset({ id });\n            }\n        } else {\n            const list = await this.user_list.pipe(take(1)).toPromise();\n            const users = await this._state.users.pipe(take(1)).toPromise();\n            const item = list.find((_) => _.value.id === id);\n            const user = users.find((_) => _.id === id);\n            if (item && user) item.reset(user);\n        }\n    }\n\n    public newUser() {\n        const form = generateUserForm({\n            id: `parking-${randomInt(99999999, 10000000)}`,\n        } as any);\n        this.new_items.next([...this.new_items.getValue(), form]);\n    }\n\n    public async saveChanges() {\n        const list = await this.user_list.pipe(take(1)).toPromise();\n        const users = list\n            .map((_) => _.value)\n            .filter((_) => !this.deletion.has(_.id));\n        await this._state.saveUsers(users);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { Route, RouterModule } from '@angular/router';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { UIModule } from '../ui/ui.module';\n\nimport { ParkingBookingsListComponent } from './parking-bookings-list.component';\nimport { ParkingSpaceListComponent } from './parking-space-list.component';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingTopbarComponent } from './parking-topbar.component';\nimport { ParkingComponent } from './parking.component';\nimport { NewParkingComponent } from './new-parking.component';\nimport { ParkingUsersListComponent } from './parking-users-list.component';\n\nconst COMPONENTS = [\n    NewParkingComponent,\n    ParkingComponent,\n    ParkingBookingsListComponent,\n    ParkingSpaceListComponent,\n    ParkingUsersListComponent,\n    ParkingTopbarComponent,\n    ParkingSpaceModalComponent,\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: 'new',\n        component: NewParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'users', component: ParkingUsersListComponent },\n            { path: 'manage', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    {\n        path: '',\n        component: ParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'users', component: ParkingUsersListComponent },\n            { path: 'manage', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FormFieldsModule,\n        MatTabsModule,\n        MatProgressBarModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppParkingModule {}\n"],"x_google_ignoreList":[]}