{"version":3,"file":"apps_concierge_src_app_parking_parking_module_ts.js","mappings":"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","names":["i0","_r5","ctx_r4","postForm","ctx_r1","form","ParkingSpaceModalComponent","id","this","_data","constructor","_dialog_ref","event","EventEmitter","FormGroup","FormControl","name","Validators","map_id","assigned_user","assigned_to","assigned_name","notes","map_rotation","patchValue","valid","loading","value","email","disableClose","emit","reason","metadata","t","MAT_DIALOG_DATA","i1","core","Xpm","selectors","outputs","decls","vars","consts","template","rf","ctx","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","_r2","ParkingStateService","AsyncHandler","_org","_dialog","super","_poll","BehaviorSubject","_change","_options","date","Date","now","search","zones","_loading","levels","active_levels","pipe","map","_","filter","lvl","tags","includes","spaces","combineLatest","lvls","options","switchMap","next","getValue","showMetadata","details","Array","tap","shareReplay","users","active_building","bld","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","length","join","asObservable","setOptions","startPolling","delay","interval","stopPolling","clearInterval","editSpace","space","_this","_asyncToGenerator","ref","open","data","state","Promise","race","afterClosed","toPromise","componentInstance","first","zone","new_space","randomInt","take","updateMetadata","description","close","removeSpace","_this2","openConfirmModal","title","content","icon","saveUsers","approveBooking","booking","catch","notifyError","notifySuccess","user_name","format","rejectBooking","i2","Yz7","factory","ɵfac","providedIn","row_r7","extension_data","plate_number","data_r8","row_r9","_r11","row","ctx_r10","reject","ctx_r12","approve","ParkingBookingsListComponent","_state","events","e","ParkingBookingsListComponent_ng_template_3_Template","ParkingBookingsListComponent_ng_template_5_Template","ParkingBookingsListComponent_ng_template_7_Template","ParkingBookingsListComponent_mat_progress_bar_9_Template","tmp_0_0","_c0","_c1","_c2","_c3","_r0","_r4","tmp_7_0","row_r3","ctx_r6","ParkingSpaceListComponent","s","ParkingSpaceListComponent_ng_template_4_Template","ParkingSpaceListComponent_mat_progress_bar_6_Template","level_r2","display_name","$event","ctx_r3","setDate","ParkingTopbarComponent","_route","_router","manage","d","setSearch","str","updateZones","z","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","subscription","queryParamMap","subscribe","params","has","get","split","level","levelWithID","building","buildings","find","parent_id","push","url","i3","features","ParkingTopbarComponent_mat_option_3_Template","ParkingTopbarComponent_date_options_7_Template","ParkingComponent","path","NavigationEnd","url_parts","parts","ParkingComponent_div_11_Template","tmp_4_0","NewParkingComponent","NewParkingComponent_div_7_Template","restoredCtx","_r9","key","setValue","name_r7","ctx_r11","deletion","form_r10","_r17","ctx_r15","markForDelete","isNew","_r20","ctx_r19","clearChanges","ParkingUsersListComponent_ng_template_6_app_icon_1_Template","ParkingUsersListComponent_ng_template_6_button_2_Template","ParkingUsersListComponent_ng_template_6_button_3_Template","dirty","ctx_r21","entries","ctx_r22","new_items","ctx_r23","change_count","ParkingUsersListComponent_div_11_div_1_Template","ParkingUsersListComponent_div_11_div_2_Template","ParkingUsersListComponent_div_11_div_4_Template","generateUserForm","user","transponder","designation","car_model","car_colour","phone","ParkingUsersListComponent","forms","u","user_list","a","b","f","Set","add","item","reset","list","newUser","saveChanges","ParkingUsersListComponent_ng_template_4_Template","ParkingUsersListComponent_ng_template_6_Template","ParkingUsersListComponent_div_11_Template","ROUTES","component","children","redirectTo","AppParkingModule","oAB","cJS","CommonModule","UIModule","FormsModule","ReactiveFormsModule","FormFieldsModule","MatTabsModule","MatProgressBarModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-bookings-list.component.ts","./apps/concierge/src/app/parking/parking-space-list.component.ts","./apps/concierge/src/app/parking/parking-topbar.component.ts","./apps/concierge/src/app/parking/parking.component.ts","./apps/concierge/src/app/parking/new-parking.component.ts","./apps/concierge/src/app/parking/parking-users-list.component.ts","./apps/concierge/src/app/parking/parking.module.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <a-user-search-field\n                    name=\"user\"\n                    formControlName=\"assigned_user\"\n                ></a-user-search-field>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    email: string;\n    name: string;\n    transponder: string;\n    designation: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = this._org.active_levels.pipe(\n        map((_) => _.filter((lvl) => lvl.tags.includes('parking')))\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        filter(([lvls, options]) => !!(options.zones[0] || lvls[0]?.id)),\n        switchMap(([levels, options]) => {\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces'\n            );\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingSpace[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : bld?.id,\n            });\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 5000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space?: ParkingSpace) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._options.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: [\n                ...spaces.filter((_) => _.id !== new_space.id),\n                new_space,\n            ],\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    public async saveUsers(users: ParkingUser[]) {}\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`\n              );\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM Do')}.`\n              );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-bookings-list',\n    template: `\n        <custom-table\n            class=\"block min-w-[60rem]\"\n            [dataSource]=\"events\"\n            [columns]=\"[\n                'asset_name',\n                'booked_by_name',\n                'user_name',\n                'plate_number',\n                'status',\n                'actions'\n            ]\"\n            [display_column]=\"[\n                'Bay No.',\n                'Reserved By',\n                'Reserved For',\n                'Car Plate #',\n                'Status',\n                ' '\n            ]\"\n            [filter]=\"(options | async).search\"\n            [column_size]=\"['6r', 'flex', '14r', '8r', '6r', '10r']\"\n            [template]=\"{\n                plate_number: plate_template,\n                actions: action_template,\n                status: status_template\n            }\"\n            [class.opacity-50]=\"(loading | async)?.includes('bookings')\"\n        ></custom-table>\n        <ng-template #plate_template let-row=\"row\">\n            {{ row?.extension_data?.plate_number }}\n        </ng-template>\n        <ng-template #status_template let-data=\"data\">\n            <span\n                class=\"capitalize px-2 py-1 rounded border border-base-200\"\n                [class.bg-success]=\"data === 'approved'\"\n                [class.bg-warning]=\"data === 'tentative'\"\n                [class.bg-error]=\"data === 'cancelled' || data === 'declined'\"\n                [class.text-success-content]=\"data === 'approved'\"\n                [class.text-warning-content]=\"data === 'tentative'\"\n                [class.text-error-content]=\"\n                    data === 'cancelled' || data === 'declined'\n                \"\n            >\n                {{ data }}\n            </span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex items-center justify-end\">\n                <!-- <button icon matTooltip=\"Reallocate Parking Reservation\">\n                    <app-icon>published_with_changes</app-icon>\n                </button> -->\n                <button\n                    icon\n                    matTooltip=\"Reject Parking Reservation\"\n                    (click)=\"reject(row)\"\n                >\n                    <app-icon>event_busy</app-icon>\n                </button>\n                <button\n                    icon\n                    matTooltip=\"Approve Parking Reservation\"\n                    (click)=\"approve(row)\"\n                >\n                    <app-icon>event_available</app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <mat-progress-bar\n            *ngIf=\"(loading | async)?.includes('bookings')\"\n            class=\"absolute bottom-0 inset-x-0\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class ParkingBookingsListComponent {\n    public readonly events = this._state.bookings;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly reject = (e) => this._state.rejectBooking(e);\n    public readonly approve = (e) => this._state.approveBooking(e);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-2\">\n            <custom-table\n                class=\"block min-w-[56rem]\"\n                [dataSource]=\"spaces\"\n                [columns]=\"[\n                    'name',\n                    'map_id',\n                    'assigned_to',\n                    'notes',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Bay No.',\n                    'Map ID',\n                    'Assigned',\n                    'Notes',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '10r', '14r', 'flex', '10r']\"\n                [template]=\"{ actions: action_template }\"\n                [filter]=\"(options | async).search\"\n                [class.opacity-50]=\"(loading | async)?.includes('spaces')\"\n            ></custom-table>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"w-full flex items-center justify-end\">\n                    <button icon (click)=\"editSpace(row)\">\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button icon (click)=\"removeSpace(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </ng-template>\n            <mat-progress-bar\n                *ngIf=\"(loading | async)?.includes('spaces')\"\n                class=\"absolute bottom-0 inset-x-0\"\n            ></mat-progress-bar>\n        </div>\n        <button\n            btn\n            icon\n            matRipple\n            class=\"absolute bottom-2 left-2 bg-secondary text-secondary-content\"\n            (click)=\"editSpace()\"\n        >\n            <app-icon>add</app-icon>\n        </button>\n    `,\n    styles: [],\n})\nexport class ParkingSpaceListComponent {\n    public readonly spaces = this._state.spaces;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly editSpace = (s?) => this._state.editSpace(s);\n    public readonly removeSpace = (s) => this._state.removeSpace(s);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-topbar',\n    template: `\n        <div class=\"flex items-center bg-base-100 px-2 h-20\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"zones[0]\"\n                    (ngModelChange)=\"updateZones([$event]); zones = [$event]\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-0\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options\n                *ngIf=\"!manage\"\n                (dateChange)=\"setDate($event)\"\n            ></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                min-width: 0;\n                padding: 0 0.85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class ParkingTopbarComponent extends AsyncHandler implements OnInit {\n    public manage = false;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n    /** Options set for week view */\n    public readonly options = this._state.options;\n    /** Set filtered date */\n    public readonly setDate = (d) => this._state.setOptions({ date: d });\n    /** Set filter string */\n    public readonly setSearch = (str) =>\n        this._state.setOptions({ search: str });\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._state.setOptions({ zones: z });\n    };\n\n    constructor(\n        private _state: ParkingStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._state.levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.manage = !this._router.url.includes('events');\n    }\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-parking',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden bg-base-100\">\n            <parking-topbar></parking-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'spaces']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'spaces'\"\n                    >\n                        Manage Spaces\n                    </a>\n                    <!-- <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Make Booking\n                    </a> -->\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto px-4\">\n                <router-outlet></router-outlet>\n            </div>\n            <div\n                *ngIf=\"!(levels | async)?.length\"\n                class=\"absolute inset-0 bg-base-100/80/20 flex flex-col items-center justify-center z-50\"\n            >\n                <p>No parking floors for the currently selected building</p>\n            </div>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ParkingComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-new-parking',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full relative\">\n                <parking-topbar></parking-topbar>\n                <div class=\"flex-1 h-1/2 w-full relative overflow-auto px-2\">\n                    <router-outlet></router-outlet>\n                </div>\n                <div\n                    *ngIf=\"!(levels | async)?.length\"\n                    class=\"absolute inset-0 bg-base-100/80/20 flex flex-col items-center justify-center z-50\"\n                >\n                    <p>No parking floors for the currently selected building</p>\n                </div>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class NewParkingComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService, ParkingUser } from './parking-state.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { map, take } from 'rxjs/operators';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { randomInt } from '@placeos/common';\n\nconst generateUserForm = (user?: ParkingUser) =>\n    new FormGroup({\n        id: new FormControl(user.id || ''),\n        email: new FormControl(user.email || ''),\n        name: new FormControl(user.name || ''),\n        transponder: new FormControl(user.transponder || ''),\n        designation: new FormControl(user.designation || ''),\n        car_model: new FormControl(user.car_model || ''),\n        car_colour: new FormControl(user.car_colour || ''),\n        plate_number: new FormControl(user.plate_number || ''),\n        phone: new FormControl(user.phone || ''),\n        notes: new FormControl(user.notes || ''),\n    });\n\n@Component({\n    selector: 'parking-users-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-2\">\n            <custom-table\n                class=\"block min-w-[96rem]\"\n                [dataSource]=\"user_list\"\n                [columns]=\"[\n                    'email',\n                    'transponder',\n                    'designation',\n                    'car_model',\n                    'car_colour',\n                    'plate_number',\n                    'phone',\n                    'notes',\n                    'actions'\n                ]\"\n                [display_column]=\"['', '', '', '', '', '', '', '', ' ']\"\n                [column_size]=\"[\n                    '14r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    'flex'\n                ]\"\n                [template]=\"{\n                    email: text_input_template,\n                    name: text_input_template,\n                    transponder: text_input_template,\n                    designation: text_input_template,\n                    car_model: text_input_template,\n                    car_colour: text_input_template,\n                    plate_number: text_input_template,\n                    phone: text_input_template,\n                    notes: text_input_template,\n                    actions: action_template\n                }\"\n                [filter]=\"(options | async).search\"\n                [class.opacity-50]=\"(loading | async)?.includes('users')\"\n            ></custom-table>\n            <ng-template\n                #text_input_template\n                let-form=\"row\"\n                let-key=\"key\"\n                let-name=\"name\"\n            >\n                <input\n                    [ngModel]=\"form.value[key]\"\n                    (ngModelChange)=\"form.get(key).setValue($event)\"\n                    [placeholder]=\"name\"\n                    class=\"relative -top-px border-none px-2 py-4 -m-2 text-base w-full !outline-none focus:border-b border-blue-600\"\n                />\n            </ng-template>\n            <ng-template #action_template let-form=\"row\">\n                <div class=\"w-full flex items-center justify-end\">\n                    <app-icon\n                        *ngIf=\"\n                            deletion.has(form.value.id) ||\n                            form.dirty ||\n                            isNew(form.value.id)\n                        \"\n                        [class.text-red-600]=\"deletion.has(form.value.id)\"\n                        [class.text-yellow-400]=\"!deletion.has(form.value.id)\"\n                    >\n                        warning\n                    </app-icon>\n                    <button\n                        btn\n                        icon\n                        *ngIf=\"!deletion.has(form.value.id)\"\n                        (click)=\"markForDelete(form.value.id)\"\n                        [matTooltip]=\"\n                            isNew(form.value.id)\n                                ? 'Remove New User'\n                                : 'Mark for Deletion'\n                        \"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        btn\n                        icon\n                        *ngIf=\"deletion.has(form.value.id) || form.dirty\"\n                        matTooltip=\"Clear Changes\"\n                        (click)=\"clearChanges(id)\"\n                    >\n                        <app-icon>clear_all</app-icon>\n                    </button>\n                </div>\n            </ng-template>\n        </div>\n        <button\n            btn\n            icon\n            matRipple\n            class=\"absolute bottom-2 left-2 bg-primary text-white\"\n            (click)=\"newUser()\"\n        >\n            <app-icon>add</app-icon>\n        </button>\n        <div\n            class=\"absolute bottom-2 right-2 bg-base-100 border border-base-200 p-2 text-base rounded shadow space-y-2\"\n            *ngIf=\"\n                deletion.entries.length ||\n                (change_count | async) ||\n                (new_items | async).length\n            \"\n        >\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"deletion.entries.length\"\n            >\n                <app-icon class=\"text-red-600 text-2xl\">warning</app-icon>\n                <div>{{ deletion.entries.length }} users pending deletion</div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"(new_items | async).length\"\n            >\n                <app-icon class=\"text-yellow-400 text-2xl\">warning</app-icon>\n                <div>\n                    {{ (new_items | async).length }} new users pending save\n                </div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"change_count | async\"\n            >\n                <app-icon class=\"text-yellow-400 text-2xl\">warning</app-icon>\n                <div>{{ change_count | async }} users with pending changes</div>\n            </div>\n            <button btn class=\"w-full\">Save Changes</button>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ParkingUsersListComponent {\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n    public readonly forms = this._state.users.pipe(\n        map((_) => _.map((u) => generateUserForm(u)))\n    );\n    public readonly new_items = new BehaviorSubject<FormGroup[]>([]);\n    public readonly user_list = combineLatest([\n        this.forms,\n        this.new_items,\n    ]).pipe(map(([a, b]) => [...a, ...b]));\n    public readonly change_count = this.user_list.pipe(\n        map((_) => _.filter((f) => f.dirty || !this.isNew(f.value.id)).length)\n    );\n    public deletion = new Set<string>();\n\n    public isNew(id: string) {\n        return !!this.new_items.getValue().find((_) => _.value.id === id);\n    }\n\n    constructor(private _state: ParkingStateService) {}\n\n    public markForDelete(id) {\n        if (this.isNew(id)) {\n            this.new_items.next(\n                this.new_items.getValue().filter((_) => _.value.id !== id)\n            );\n        } else this.deletion.add(id);\n    }\n\n    public async clearChanges(id) {\n        if (this.isNew(id)) {\n            const new_items = this.new_items.getValue();\n            const item = new_items.find((_) => _.value.id === id);\n            if (item) {\n                item.reset({ id });\n            }\n        } else {\n            const list = await this.user_list.pipe(take(1)).toPromise();\n            const users = await this._state.users.pipe(take(1)).toPromise();\n            const item = list.find((_) => _.value.id === id);\n            const user = users.find((_) => _.id === id);\n            if (item && user) item.reset(user);\n        }\n    }\n\n    public newUser() {\n        const form = generateUserForm({\n            id: `parking-${randomInt(99999999, 10000000)}`,\n        } as any);\n        this.new_items.next([...this.new_items.getValue(), form]);\n    }\n\n    public async saveChanges() {\n        const list = await this.user_list.pipe(take(1)).toPromise();\n        const users = list\n            .map((_) => _.value)\n            .filter((_) => !this.deletion.has(_.id));\n        await this._state.saveUsers(users);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { Route, RouterModule } from '@angular/router';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { UIModule } from '../ui/ui.module';\n\nimport { ParkingBookingsListComponent } from './parking-bookings-list.component';\nimport { ParkingSpaceListComponent } from './parking-space-list.component';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingTopbarComponent } from './parking-topbar.component';\nimport { ParkingComponent } from './parking.component';\nimport { NewParkingComponent } from './new-parking.component';\nimport { ParkingUsersListComponent } from './parking-users-list.component';\n\nconst COMPONENTS = [\n    NewParkingComponent,\n    ParkingComponent,\n    ParkingBookingsListComponent,\n    ParkingSpaceListComponent,\n    ParkingUsersListComponent,\n    ParkingTopbarComponent,\n    ParkingSpaceModalComponent,\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: 'new',\n        component: NewParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'users', component: ParkingUsersListComponent },\n            { path: 'manage', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    {\n        path: '',\n        component: ParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'users', component: ParkingUsersListComponent },\n            { path: 'manage', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FormFieldsModule,\n        MatTabsModule,\n        MatProgressBarModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppParkingModule {}\n"],"x_google_ignoreList":[]}