{"version":3,"file":"apps_concierge_src_app_parking_parking_module_ts.js","mappings":"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","names":["i0","ParkingSpaceModalComponent","constructor","_data","_dialog_ref","this","EventEmitter","FormGroup","id","FormControl","name","Validators","map_id","assigned_user","assigned_to","assigned_name","notes","map_rotation","form","patchValue","postForm","valid","loading","disableClose","event","emit","reason","metadata","value","core","MAT_DIALOG_DATA","selectors","ParkingStateService","BaseClass","_org","_dialog","super","BehaviorSubject","date","Date","now","search","zones","active_levels","pipe","map","_","filter","lvl","tags","includes","combineLatest","levels","_options","lvls","options","switchMap","_loading","next","getValue","showMetadata","details","Array","tap","shareReplay","active_building","_poll","debounceTime","bld","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","length","join","asObservable","setOptions","startPolling","delay","interval","stopPolling","clearInterval","editSpace","space","ref","_this","open","data","state","Promise","race","afterClosed","toPromise","componentInstance","first","zone","new_space","randomInt","spaces","take","updateMetadata","description","close","removeSpace","openConfirmModal","title","content","icon","_this2","approveBooking","booking","catch","notifyError","notifySuccess","user_name","format","rejectBooking","bookings","factory","ParkingBookingsListComponent","_state","e","ParkingSpaceListComponent","s","ParkingTopbarComponent","_route","_router","d","str","z","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","subscription","queryParamMap","subscribe","params","has","get","split","level","levelWithID","building","buildings","find","parent_id","push","updateZones","ctx","ParkingComponent","events","NavigationEnd","url_parts","url","path","parts","ROUTES","component","children","redirectTo","AppParkingModule","CommonModule","UIModule","FormsModule","ReactiveFormsModule","FormFieldsModule","MatTabsModule","MatProgressBarModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-bookings-list.component.ts","./apps/concierge/src/app/parking/parking-space-list.component.ts","./apps/concierge/src/app/parking/parking-topbar.component.ts","./apps/concierge/src/app/parking/parking.component.ts","./apps/concierge/src/app/parking/parking.module.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header\n                class=\"flex items-center justify-between bg-secondary px-2 w-full\"\n            >\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <a-user-search-field\n                    name=\"user\"\n                    formControlName=\"assigned_user\"\n                ></a-user-search-field>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\">Save</button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: this.form.value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport {\n    BaseClass,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends BaseClass {\n    private _poll = new BehaviorSubject<number>(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = this._org.active_levels.pipe(\n        map((_) => _.filter((lvl) => lvl.tags.includes('parking')))\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([this.levels, this._options]).pipe(\n        filter(([lvls, options]) => !!(options.zones[0] || lvls[0]?.id)),\n        switchMap(([levels, options]) => {\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces'\n            );\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingSpace[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : bld?.id,\n            });\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 5000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space?: ParkingSpace) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event.pipe(first((_) => _.reason === 'done')),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._options.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: [\n                ...spaces.filter((_) => _.id !== new_space.id),\n                new_space,\n            ],\n            description: 'List of available parking spaces',\n        }).toPromise();\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`\n              );\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM Do')}.`\n              );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-bookings-list',\n    template: `\n        <custom-table\n            class=\"block min-w-[60rem]\"\n            [dataSource]=\"events\"\n            [columns]=\"[\n                'asset_name',\n                'booked_by_name',\n                'user_name',\n                'plate_number',\n                'status',\n                'actions'\n            ]\"\n            [display_column]=\"[\n                'Bay No.',\n                'Reserved By',\n                'Reserved For',\n                'Car Plate #',\n                'Status',\n                ' '\n            ]\"\n            [filter]=\"(options | async).search\"\n            [column_size]=\"['6r', 'flex', '14r', '8r', '6r', '10r']\"\n            [template]=\"{\n                plate_number: plate_template,\n                actions: action_template,\n                status: status_template\n            }\"\n            [class.opacity-50]=\"(loading | async)?.includes('bookings')\"\n        ></custom-table>\n        <ng-template #plate_template let-row=\"row\">\n            {{ row?.extension_data?.plate_number }}\n        </ng-template>\n        <ng-template #status_template let-data=\"data\">\n            <span\n                class=\"capitalize text-white px-2 py-1 rounded border border-gray-200\"\n                [class.bg-success]=\"data === 'approved'\"\n                [class.bg-pending]=\"data === 'tentative'\"\n                [class.bg-error]=\"data === 'cancelled' || data === 'declined'\"\n            >\n                {{ data }}\n            </span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex items-center justify-end\">\n                <!-- <button icon matTooltip=\"Reallocate Parking Reservation\">\n                    <app-icon>published_with_changes</app-icon>\n                </button> -->\n                <button\n                    icon\n                    matTooltip=\"Reject Parking Reservation\"\n                    (click)=\"reject(row)\"\n                >\n                    <app-icon>event_busy</app-icon>\n                </button>\n                <button\n                    icon\n                    matTooltip=\"Approve Parking Reservation\"\n                    (click)=\"approve(row)\"\n                >\n                    <app-icon>event_available</app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <mat-progress-bar\n            *ngIf=\"(loading | async)?.includes('bookings')\"\n            class=\"absolute bottom-0 inset-x-0\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class ParkingBookingsListComponent {\n    public readonly events = this._state.bookings;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly reject = (e) => this._state.rejectBooking(e);\n    public readonly approve = (e) => this._state.approveBooking(e);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-list',\n    template: `\n        <custom-table\n            class=\"block min-w-[56rem]\"\n            [dataSource]=\"spaces\"\n            [columns]=\"['name', 'map_id', 'assigned_to', 'notes', 'actions']\"\n            [display_column]=\"['Bay No.', 'Map ID', 'Assigned', 'Notes', ' ']\"\n            [column_size]=\"['8r', '10r', '14r', 'flex', '10r']\"\n            [template]=\"{ actions: action_template }\"\n            [filter]=\"(options | async).search\"\n            [class.opacity-50]=\"(loading | async)?.includes('spaces')\"\n        ></custom-table>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex items-center justify-end\">\n                <button icon (click)=\"editSpace(row)\">\n                    <app-icon>edit</app-icon>\n                </button>\n                <button icon (click)=\"removeSpace(row)\">\n                    <app-icon>delete</app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <mat-progress-bar\n            *ngIf=\"(loading | async)?.includes('spaces')\"\n            class=\"absolute bottom-0 inset-x-0\"\n        ></mat-progress-bar>\n    `,\n    styles: [],\n})\nexport class ParkingSpaceListComponent {\n    public readonly spaces = this._state.spaces;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly editSpace = (s) => this._state.editSpace(s);\n    public readonly removeSpace = (s) => this._state.removeSpace(s);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { BaseClass } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { EventsStateService } from '../day-view/events-state.service';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-topbar',\n    template: `\n        <div class=\"flex items-center bg-white dark:bg-neutral-700 px-2 h-20\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"zones[0]\"\n                    (ngModelChange)=\"updateZones([$event]); zones = [$event]\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-0\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options (dateChange)=\"setDate($event)\"></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                min-width: 0;\n                padding: 0 0.85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class ParkingTopbarComponent extends BaseClass implements OnInit {\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n    /** Options set for week view */\n    public readonly options = this._state.options;\n    /** Set filtered date */\n    public readonly setDate = (d) => this._state.setOptions({ date: d });\n    /** Set filter string */\n    public readonly setSearch = (str) =>\n        this._state.setOptions({ search: str });\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._state.setOptions({ zones: z });\n    };\n\n    constructor(\n        private _state: ParkingStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._state.levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { BaseClass } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-parking',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden bg-gray-100 dark:bg-neutral-600\">\n            <parking-topbar></parking-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'spaces']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'spaces'\"\n                    >\n                        Manage Spaces\n                    </a>\n                    <!-- <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Make Booking\n                    </a> -->\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto\">\n                <router-outlet></router-outlet>\n            </div>\n            <div *ngIf=\"!(levels | async)?.length\" class=\"absolute inset-0 bg-white/80 dark:bg-white/20 flex flex-col items-center justify-center z-50\">\n                <p>No parking floors for the currently selected building</p>\n            </div>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ParkingComponent extends BaseClass {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { Route, RouterModule } from '@angular/router';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { UIModule } from '../ui/ui.module';\n\nimport { ParkingBookingsListComponent } from './parking-bookings-list.component';\nimport { ParkingSpaceListComponent } from './parking-space-list.component';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingTopbarComponent } from './parking-topbar.component';\nimport { ParkingComponent } from './parking.component';\n\nconst COMPONENTS = [\n    ParkingComponent,\n    ParkingBookingsListComponent,\n    ParkingSpaceListComponent,\n    ParkingTopbarComponent,\n    ParkingSpaceModalComponent,\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: '',\n        component: ParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'spaces', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FormFieldsModule,\n        MatTabsModule,\n        MatProgressBarModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppParkingModule {}\n"],"x_google_ignoreList":[]}