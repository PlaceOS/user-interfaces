{"version":3,"file":"apps_concierge_src_app_parking_parking_module_ts.js","mappings":"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","names":["i0","_r1","ctx_r1","form","patchValue","assigned_user","assigned_to","assigned_name","postForm","ParkingSpaceModalComponent","id","this","_data","constructor","_dialog_ref","event","EventEmitter","FormGroup","FormControl","name","Validators","required","map_id","notes","map_rotation","valid","loading","value","email","disableClose","emit","reason","metadata","static","t","MAT_DIALOG_DATA","i1","core","VBU","selectors","outputs","decls","vars","consts","template","rf","ctx","ParkingSpaceModalComponent_button_4_Template","ParkingSpaceModalComponent_main_5_Template","ParkingSpaceModalComponent_ng_template_6_Template","load_state_r3","ParkingStateService","AsyncHandler","_org","_dialog","super","_poll","BehaviorSubject","_change","_options","date","Date","now","search","zones","_loading","levels","active_levels","pipe","map","_","filter","lvl","tags","includes","spaces","combineLatest","lvls","options","switchMap","next","getValue","showMetadata","details","Array","tap","shareReplay","users","active_building","bld","bookings","debounceTime","queryBookings","period_start","getUnixTime","startOfDay","period_end","endOfDay","type","length","join","asObservable","setOptions","startPolling","delay","interval","stopPolling","clearInterval","editSpace","space","_this","_asyncToGenerator","ref","open","data","state","Promise","race","afterClosed","toPromise","componentInstance","first","zone","new_space","randomInt","take","idx","findIndex","push","new_space_list","updateMetadata","description","close","removeSpace","_this2","openConfirmModal","title","content","icon","saveUsers","approveBooking","booking","catch","notifyError","notifySuccess","user_name","format","rejectBooking","i2","jDH","factory","ɵfac","providedIn","row_r1","extension_data","plate_number","data_r2","row_r4","_r3","row","ctx_r4","reject","approve","ParkingBookingsListComponent","_state","events","e","ParkingBookingsListComponent_ng_template_3_Template","ParkingBookingsListComponent_ng_template_5_Template","ParkingBookingsListComponent_ng_template_7_Template","ParkingBookingsListComponent_mat_progress_bar_9_Template","tmp_3_0","_c0","_c1","_c2","_c3","plate_template_r6","action_template_r8","status_template_r7","tmp_10_0","row_r3","_r2","ctx_r3","ParkingSpaceListComponent","s","ParkingSpaceListComponent_ng_template_4_Template","ParkingSpaceListComponent_mat_progress_bar_6_Template","tmp_1_0","action_template_r5","tmp_8_0","level_r1","display_name","$event","ctx_r2","setDate","ParkingTopbarComponent","_route","_router","manage","d","setSearch","str","updateZones","z","navigate","relativeTo","queryParams","zone_ids","ngOnInit","initialised","subscription","queryParamMap","subscribe","params","has","get","split","level","levelWithID","building","buildings","find","parent_id","url","i3","features","ParkingTopbarComponent_mat_option_3_Template","ParkingTopbarComponent_date_options_7_Template","ParkingComponent","path","NavigationEnd","url_parts","parts","ParkingComponent_div_11_Template","tmp_4_0","NewParkingComponent","NewParkingComponent_div_7_Template","tmp_0_0","key","setValue","name_r6","ctx_r7","deletion","form_r7","_r9","markForDelete","isNew","_r10","clearChanges","ParkingUsersListComponent_ng_template_6_app_icon_1_Template","ParkingUsersListComponent_ng_template_6_button_2_Template","ParkingUsersListComponent_ng_template_6_button_3_Template","dirty","entries","new_items","change_count","ParkingUsersListComponent_div_11_div_1_Template","ParkingUsersListComponent_div_11_div_2_Template","ParkingUsersListComponent_div_11_div_4_Template","generateUserForm","user","transponder","designation","car_model","car_colour","phone","ParkingUsersListComponent","forms","u","user_list","a","b","f","Set","add","item","reset","list","newUser","saveChanges","ParkingUsersListComponent_ng_template_4_Template","ParkingUsersListComponent_ng_template_6_Template","ParkingUsersListComponent_div_11_Template","tmp_2_0","text_input_template_r11","action_template_r12","ROUTES","component","children","redirectTo","AppParkingModule","$C","G2t","CommonModule","UIModule","FormsModule","ReactiveFormsModule","FormFieldsModule","MatTabsModule","MatProgressBarModule","RouterModule","forChild"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/parking/parking-space-modal.component.ts","./apps/concierge/src/app/parking/parking-state.service.ts","./apps/concierge/src/app/parking/parking-bookings-list.component.ts","./apps/concierge/src/app/parking/parking-space-list.component.ts","./apps/concierge/src/app/parking/parking-topbar.component.ts","./apps/concierge/src/app/parking/parking.component.ts","./apps/concierge/src/app/parking/new-parking.component.ts","./apps/concierge/src/app/parking/parking-users-list.component.ts","./apps/concierge/src/app/parking/parking.module.ts"],"sourcesContent":["import { Component, EventEmitter, Inject, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogEvent } from '@placeos/common';\nimport { User } from '@placeos/users';\nimport { ParkingSpace } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-modal',\n    template: `\n        <div class=\"w-[28rem]\">\n            <header class=\"flex items-center justify-between px-2 w-full\">\n                <h2 class=\"px-2\">{{ id ? 'Edit' : 'New' }} Parking Space</h2>\n                <button *ngIf=\"!loading\" icon matRipple mat-dialog-close>\n                    <app-icon>close</app-icon>\n                </button>\n            </header>\n            <main\n                *ngIf=\"!loading; else load_state\"\n                class=\"p-4 flex flex-col\"\n                [formGroup]=\"form\"\n            >\n                <label for=\"name\">Parking Space Name/Bay Number</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"name\" formControlName=\"name\" />\n                    <mat-error>A name is required for parking spaces</mat-error>\n                </mat-form-field>\n                <label for=\"map-id\">Map ID</label>\n                <mat-form-field appearance=\"outline\">\n                    <input matInput name=\"map-id\" formControlName=\"map_id\" />\n                    <mat-error>\n                        A map ID is required for parking spaces\n                    </mat-error>\n                </mat-form-field>\n                <label for=\"user\">Assigned User</label>\n                <div class=\"flex items-center space-x-2\">\n                    <a-user-search-field\n                        name=\"user\"\n                        formControlName=\"assigned_user\"\n                    ></a-user-search-field>\n                    <button\n                        btn\n                        matRipple\n                        class=\"mb-5\"\n                        (click)=\"\n                            form.patchValue({\n                                assigned_user: null,\n                                assigned_to: null,\n                                assigned_name: null\n                            })\n                        \"\n                    >\n                        Clear\n                    </button>\n                </div>\n                <label for=\"notes\">Notes</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"notes\"\n                        formControlName=\"notes\"\n                    ></textarea>\n                </mat-form-field>\n                <label for=\"map-rotation\">Map Rotation</label>\n                <mat-form-field appearance=\"outline\">\n                    <textarea\n                        matInput\n                        name=\"map-rotation\"\n                        formControlName=\"map_rotation\"\n                    ></textarea>\n                </mat-form-field>\n                <div class=\"flex items-center justify-center space-x-2\">\n                    <button btn matRipple class=\"w-32 inverse\" mat-dialog-close>\n                        Cancel\n                    </button>\n                    <button btn matRipple class=\"w-32\" (click)=\"postForm()\">\n                        Save\n                    </button>\n                </div>\n            </main>\n        </div>\n        <ng-template #load_state>\n            <main\n                class=\"p-8 flex flex-col items-center justify-center space-y-2\"\n            >\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p>Saving parking space details...</p>\n            </main>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class ParkingSpaceModalComponent {\n    @Output() public readonly event = new EventEmitter<DialogEvent>();\n    public loading: boolean;\n\n    public get id() {\n        return this._data?.id || '';\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(''),\n        name: new FormControl('', [Validators.required]),\n        map_id: new FormControl('', [Validators.required]),\n        assigned_user: new FormControl<User>(null),\n        assigned_to: new FormControl(''),\n        assigned_name: new FormControl(''),\n        notes: new FormControl(''),\n        map_rotation: new FormControl(0),\n    });\n\n    constructor(\n        @Inject(MAT_DIALOG_DATA) private _data: ParkingSpace,\n        private _dialog_ref: MatDialogRef<ParkingSpaceModalComponent>\n    ) {\n        if (_data) this.form.patchValue(_data);\n    }\n\n    public postForm() {\n        if (!this.form.valid) return;\n        this.loading = true;\n        const value = this.form.value;\n        if (value.assigned_user) {\n            value.assigned_to = value.assigned_user.email;\n            value.assigned_name = value.assigned_user.name;\n        }\n        this._dialog_ref.disableClose = true;\n        this.event.emit({ reason: 'done', metadata: value });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport {\n    approveBooking,\n    Booking,\n    queryBookings,\n    rejectBooking,\n} from '@placeos/bookings';\nimport {\n    AsyncHandler,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { randomInt } from '@placeos/common';\nimport { endOfDay, format, getUnixTime, startOfDay } from 'date-fns';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport {\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n    take,\n    tap,\n} from 'rxjs/operators';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\n\nexport interface ParkingOptions {\n    date: number;\n    search: string;\n    zones: string[];\n}\n\nexport interface ParkingSpace {\n    id: string;\n    map_id: string;\n    name: string;\n    notes: string;\n    assigned_to: string;\n}\n\nexport interface ParkingUser {\n    id: string;\n    email: string;\n    name: string;\n    transponder: string;\n    designation: string;\n    car_model: string;\n    car_colour: string;\n    plate_number: string;\n    phone: string;\n    notes: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ParkingStateService extends AsyncHandler {\n    private _poll = new BehaviorSubject<number>(0);\n    private _change = new BehaviorSubject(0);\n    private _options = new BehaviorSubject<ParkingOptions>({\n        date: Date.now(),\n        search: '',\n        zones: [],\n    });\n    private _loading = new BehaviorSubject<string[]>([]);\n    /** List of available parking levels for the current building */\n    public levels = this._org.active_levels.pipe(\n        map((_) => _.filter((lvl) => lvl.tags.includes('parking')))\n    );\n    /** List of parking spaces for the current building/level */\n    public spaces = combineLatest([\n        this.levels,\n        this._options,\n        this._change,\n    ]).pipe(\n        filter(([lvls, options]) => !!(options.zones[0] || lvls[0]?.id)),\n        switchMap(([levels, options]) => {\n            this._loading.next([...this._loading.getValue(), 'spaces']);\n            return showMetadata(\n                options.zones[0] || levels[0]?.id,\n                'parking-spaces'\n            );\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingSpace[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'spaces')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking spaces for the current building/level */\n    public users = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        filter(([bld]) => !!bld?.id),\n        switchMap(([bld]) => {\n            this._loading.next([...this._loading.getValue(), 'users']);\n            return showMetadata(bld.id, 'parking-users');\n        }),\n        map(\n            (metadata) =>\n                (metadata.details instanceof Array\n                    ? metadata.details\n                    : []) as ParkingUser[]\n        ),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'users')\n            )\n        ),\n        shareReplay(1)\n    );\n    /** List of parking bookings for the current building/level */\n    public bookings = combineLatest([\n        this._org.active_building,\n        this._options,\n        this._poll,\n    ]).pipe(\n        debounceTime(500),\n        switchMap(([bld, options]) => {\n            this._loading.next([...this._loading.getValue(), 'bookings']);\n            return queryBookings({\n                period_start: getUnixTime(startOfDay(options.date)),\n                period_end: getUnixTime(endOfDay(options.date)),\n                type: 'parking',\n                zones: options.zones?.length\n                    ? options.zones.join(',')\n                    : bld?.id,\n            });\n        }),\n        tap(() =>\n            this._loading.next(\n                this._loading.getValue().filter((_) => _ !== 'bookings')\n            )\n        ),\n        shareReplay(1)\n    );\n\n    public readonly options = this._options.asObservable();\n    public readonly loading = this._loading.asObservable();\n\n    constructor(private _org: OrganisationService, private _dialog: MatDialog) {\n        super();\n    }\n\n    public setOptions(options: Partial<ParkingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public startPolling(delay = 5000) {\n        this._poll.next(Date.now());\n        this.interval('poll', () => this._poll.next(Date.now()), delay);\n        return () => this.stopPolling();\n    }\n\n    public stopPolling() {\n        this.clearInterval('poll');\n    }\n\n    /** Add or update a space in the available list */\n    public async editSpace(space?: ParkingSpace) {\n        const ref = this._dialog.open(ParkingSpaceModalComponent, {\n            data: space,\n        });\n        const state = await Promise.race([\n            ref.afterClosed().toPromise(),\n            ref.componentInstance.event\n                .pipe(first((_) => _.reason === 'done'))\n                .toPromise(),\n        ]);\n        if (state?.reason !== 'done') return;\n        const zone = this._options.getValue().zones[0];\n        const new_space = {\n            ...state.metadata,\n            id: state.metadata.id || `parking-${zone}.${randomInt(999_999)}`,\n        };\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        const idx = spaces.findIndex((_) => _.id === new_space.id);\n        if (idx >= 0) spaces[idx] = new_space;\n        else spaces.push(new_space);\n        const new_space_list = spaces;\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: new_space_list,\n            description: 'List of available parking spaces',\n        }).toPromise();\n        this._change.next(Date.now());\n        ref.close();\n    }\n\n    /** Remove the given space from the available list */\n    public async removeSpace(space: ParkingSpace) {\n        const state = await openConfirmModal(\n            {\n                title: 'Remove Parking Space',\n                content: `Are you sure you wish to remove the parking space \"${space.name}\"?`,\n                icon: { content: 'delete' },\n            },\n            this._dialog\n        );\n        if (state?.reason !== 'done') return;\n        state.loading('Removing parking space...');\n        const zone = this._options.getValue().zones[0];\n        const spaces = await this.spaces.pipe(take(1)).toPromise();\n        await updateMetadata(zone, {\n            name: 'parking-spaces',\n            details: spaces.filter((_) => _.id !== space.id),\n            description: 'List of available parking spaces',\n        }).toPromise();\n        state.close();\n    }\n\n    public async saveUsers(users: ParkingUser[]) {}\n\n    public async approveBooking(booking: Booking) {\n        const success = await approveBooking(booking.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error approving in desk booking')\n            : notifySuccess(\n                  `Approved parking reservation for ${\n                      booking.user_name\n                  } on ${format(booking.date, 'MMM Do')}.`\n              );\n    }\n\n    public async rejectBooking(bookings: Booking) {\n        const success = await rejectBooking(bookings.id)\n            .toPromise()\n            .catch((_) => 'failed');\n        success === 'failed'\n            ? notifyError('Error rejecting in desk booking')\n            : notifySuccess(\n                  `Rejected parking reservation for ${\n                      bookings.user_name\n                  } on ${format(bookings.date, 'MMM Do')}.`\n              );\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-bookings-list',\n    template: `\n        <custom-table\n            class=\"block min-w-[60rem]\"\n            [dataSource]=\"events\"\n            [columns]=\"[\n                'asset_name',\n                'booked_by_name',\n                'user_name',\n                'plate_number',\n                'status',\n                'actions'\n            ]\"\n            [display_column]=\"[\n                'Bay No.',\n                'Reserved By',\n                'Reserved For',\n                'Car Plate #',\n                'Status',\n                ' '\n            ]\"\n            [filter]=\"(options | async).search\"\n            [column_size]=\"['6r', 'flex', '14r', '8r', '6r', '6r']\"\n            [template]=\"{\n                plate_number: plate_template,\n                actions: action_template,\n                status: status_template\n            }\"\n            [class.opacity-50]=\"(loading | async)?.includes('bookings')\"\n        ></custom-table>\n        <ng-template #plate_template let-row=\"row\">\n            {{ row?.extension_data?.plate_number }}\n        </ng-template>\n        <ng-template #status_template let-data=\"data\">\n            <span\n                class=\"capitalize px-2 py-1 rounded border border-base-200\"\n                [class.bg-success]=\"data === 'approved'\"\n                [class.bg-warning]=\"data === 'tentative'\"\n                [class.bg-error]=\"data === 'cancelled' || data === 'declined'\"\n                [class.text-success-content]=\"data === 'approved'\"\n                [class.text-warning-content]=\"data === 'tentative'\"\n                [class.text-error-content]=\"\n                    data === 'cancelled' || data === 'declined'\n                \"\n            >\n                {{ data }}\n            </span>\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex items-center justify-end\">\n                <!-- <button icon matTooltip=\"Reallocate Parking Reservation\">\n                    <app-icon>published_with_changes</app-icon>\n                </button> -->\n                <button\n                    icon\n                    matTooltip=\"Reject Parking Reservation\"\n                    (click)=\"reject(row)\"\n                >\n                    <app-icon>event_busy</app-icon>\n                </button>\n                <button\n                    icon\n                    matTooltip=\"Approve Parking Reservation\"\n                    (click)=\"approve(row)\"\n                >\n                    <app-icon>event_available</app-icon>\n                </button>\n            </div>\n        </ng-template>\n        <mat-progress-bar\n            *ngIf=\"(loading | async)?.includes('bookings')\"\n            class=\"absolute bottom-0 inset-x-0\"\n        ></mat-progress-bar>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n                height: 100%;\n                overflow: auto;\n            }\n        `,\n    ],\n})\nexport class ParkingBookingsListComponent {\n    public readonly events = this._state.bookings;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly reject = (e) => this._state.rejectBooking(e);\n    public readonly approve = (e) => this._state.approveBooking(e);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-space-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-2\">\n            <custom-table\n                class=\"block min-w-[56rem]\"\n                [dataSource]=\"spaces\"\n                [columns]=\"[\n                    'name',\n                    'map_id',\n                    'assigned_to',\n                    'notes',\n                    'actions'\n                ]\"\n                [display_column]=\"[\n                    'Bay No.',\n                    'Map ID',\n                    'Assigned',\n                    'Notes',\n                    ' '\n                ]\"\n                [column_size]=\"['8r', '10r', '14r', 'flex', '10r']\"\n                [template]=\"{ actions: action_template }\"\n                [filter]=\"(options | async).search\"\n                [class.opacity-50]=\"(loading | async)?.includes('spaces')\"\n            ></custom-table>\n            <ng-template #action_template let-row=\"row\">\n                <div class=\"w-full flex items-center justify-end\">\n                    <button icon (click)=\"editSpace(row)\">\n                        <app-icon>edit</app-icon>\n                    </button>\n                    <button icon (click)=\"removeSpace(row)\">\n                        <app-icon>delete</app-icon>\n                    </button>\n                </div>\n            </ng-template>\n            <mat-progress-bar\n                *ngIf=\"(loading | async)?.includes('spaces')\"\n                class=\"absolute bottom-0 inset-x-0\"\n            ></mat-progress-bar>\n        </div>\n        <button\n            btn\n            icon\n            matRipple\n            class=\"absolute bottom-2 left-2 bg-secondary text-secondary-content\"\n            (click)=\"editSpace()\"\n        >\n            <app-icon>add</app-icon>\n        </button>\n    `,\n    styles: [],\n})\nexport class ParkingSpaceListComponent {\n    public readonly spaces = this._state.spaces;\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n\n    public readonly editSpace = (s?) => this._state.editSpace(s);\n    public readonly removeSpace = (s) => this._state.removeSpace(s);\n\n    constructor(private _state: ParkingStateService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { AsyncHandler } from '@placeos/common';\nimport { OrganisationService } from '@placeos/organisation';\n\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'parking-topbar',\n    template: `\n        <div class=\"flex items-center bg-base-100 px-2 h-20\">\n            <mat-form-field appearance=\"outline\">\n                <mat-select\n                    [ngModel]=\"zones[0]\"\n                    (ngModelChange)=\"updateZones([$event]); zones = [$event]\"\n                    placeholder=\"All Levels\"\n                >\n                    <mat-option\n                        *ngFor=\"let level of levels | async\"\n                        [value]=\"level.id\"\n                    >\n                        {{ level.display_name || level.name }}\n                    </mat-option>\n                </mat-select>\n            </mat-form-field>\n            <div class=\"flex-1 w-0\"></div>\n            <searchbar\n                class=\"mr-2\"\n                (modelChange)=\"setSearch($event)\"\n            ></searchbar>\n            <date-options\n                *ngIf=\"!manage\"\n                (dateChange)=\"setDate($event)\"\n            ></date-options>\n        </div>\n    `,\n    styles: [\n        `\n            button {\n                min-width: 0;\n                padding: 0 0.85rem;\n            }\n\n            mat-form-field {\n                height: 3.25em;\n                width: 8em;\n            }\n        `,\n    ],\n})\nexport class ParkingTopbarComponent extends AsyncHandler implements OnInit {\n    public manage = false;\n    /** List of selected levels */\n    public zones: string[] = [];\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n    /** Options set for week view */\n    public readonly options = this._state.options;\n    /** Set filtered date */\n    public readonly setDate = (d) => this._state.setOptions({ date: d });\n    /** Set filter string */\n    public readonly setSearch = (str) =>\n        this._state.setOptions({ search: str });\n    /** List of levels for the active building */\n    public readonly updateZones = (z) => {\n        this._router.navigate([], {\n            relativeTo: this._route,\n            queryParams: { zone_ids: z.join(',') },\n        });\n        this._state.setOptions({ zones: z });\n    };\n\n    constructor(\n        private _state: ParkingStateService,\n        private _org: OrganisationService,\n        private _route: ActivatedRoute,\n        private _router: Router\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'route.query',\n            this._route.queryParamMap.subscribe((params) => {\n                if (params.has('zone_ids')) {\n                    const zones = params.get('zone_ids').split(',');\n                    if (zones.length) {\n                        const level = this._org.levelWithID(zones);\n                        this.zones = zones;\n                        if (!level) return;\n                        this._org.building = this._org.buildings.find(\n                            (bld) => bld.id === level.parent_id\n                        );\n                    }\n                }\n            })\n        );\n        this.subscription(\n            'levels',\n            this._state.levels.subscribe((levels) => {\n                this.zones = this.zones.filter((zone) =>\n                    levels.find((lvl) => lvl.id === zone)\n                );\n                if (!this.zones.length && levels.length) {\n                    this.zones.push(levels[0].id);\n                }\n                this.updateZones(this.zones);\n            })\n        );\n        this.manage = !this._router.url.includes('events');\n    }\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-parking',\n    template: `\n        <sidebar></sidebar>\n        <main class=\"relative overflow-hidden bg-base-100\">\n            <parking-topbar></parking-topbar>\n            <div class=\"dark\">\n                <nav mat-tab-nav-bar>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'events']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'events'\"\n                    >\n                        Bookings\n                    </a>\n                    <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'spaces']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'spaces'\"\n                    >\n                        Manage Spaces\n                    </a>\n                    <!-- <a\n                        mat-tab-link\n                        [routerLink]=\"['/parking', 'map']\"\n                        queryParamsHandling=\"merge\"\n                        [active]=\"path === 'map'\"\n                    >\n                        Make Booking\n                    </a> -->\n                </nav>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full relative overflow-auto px-4\">\n                <router-outlet></router-outlet>\n            </div>\n            <div\n                *ngIf=\"!(levels | async)?.length\"\n                class=\"absolute inset-0 flex flex-col items-center justify-center z-50\"\n            >\n                <div class=\"absolute inset-0 bg-base-100 opacity-50 z-0\"></div>\n                <p>No parking floors for the currently selected building</p>\n            </div>\n        </main>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                height: 100%;\n                width: 100%;\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class ParkingComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { Component } from '@angular/core';\nimport { NavigationEnd, Router } from '@angular/router';\nimport { AsyncHandler } from '@placeos/common';\nimport { ParkingStateService } from './parking-state.service';\n\n@Component({\n    selector: 'app-new-parking',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full relative\">\n                <parking-topbar></parking-topbar>\n                <div class=\"flex-1 h-1/2 w-full relative overflow-auto px-2\">\n                    <router-outlet></router-outlet>\n                </div>\n                <div\n                    *ngIf=\"!(levels | async)?.length\"\n                    class=\"absolute inset-0 bg-base-100/80/20 flex flex-col items-center justify-center z-50\"\n                >\n                    <p>No parking floors for the currently selected building</p>\n                </div>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class NewParkingComponent extends AsyncHandler {\n    /** List of levels for the active building */\n    public readonly levels = this._state.levels;\n\n    public path = '';\n\n    constructor(private _state: ParkingStateService, private _router: Router) {\n        super();\n    }\n\n    public ngOnInit() {\n        this._state.startPolling();\n        this.subscription(\n            'router.events',\n            this._router.events.subscribe((e) => {\n                if (e instanceof NavigationEnd) {\n                    const url_parts = this._router.url?.split('/') || [''];\n                    this.path = url_parts[parts.length - 1].split('?')[0];\n                }\n            })\n        );\n        const parts = this._router.url?.split('/') || [''];\n        this.path = parts[parts.length - 1].split('?')[0];\n    }\n}\n","import { Component } from '@angular/core';\nimport { ParkingStateService, ParkingUser } from './parking-state.service';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { map, take } from 'rxjs/operators';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { randomInt } from '@placeos/common';\n\nconst generateUserForm = (user?: ParkingUser) =>\n    new FormGroup({\n        id: new FormControl(user.id || ''),\n        email: new FormControl(user.email || ''),\n        name: new FormControl(user.name || ''),\n        transponder: new FormControl(user.transponder || ''),\n        designation: new FormControl(user.designation || ''),\n        car_model: new FormControl(user.car_model || ''),\n        car_colour: new FormControl(user.car_colour || ''),\n        plate_number: new FormControl(user.plate_number || ''),\n        phone: new FormControl(user.phone || ''),\n        notes: new FormControl(user.notes || ''),\n    });\n\n@Component({\n    selector: 'parking-users-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-2\">\n            <custom-table\n                class=\"block min-w-[96rem]\"\n                [dataSource]=\"user_list\"\n                [columns]=\"[\n                    'email',\n                    'transponder',\n                    'designation',\n                    'car_model',\n                    'car_colour',\n                    'plate_number',\n                    'phone',\n                    'notes',\n                    'actions'\n                ]\"\n                [display_column]=\"['', '', '', '', '', '', '', '', ' ']\"\n                [column_size]=\"[\n                    '14r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    '10r',\n                    'flex'\n                ]\"\n                [template]=\"{\n                    email: text_input_template,\n                    name: text_input_template,\n                    transponder: text_input_template,\n                    designation: text_input_template,\n                    car_model: text_input_template,\n                    car_colour: text_input_template,\n                    plate_number: text_input_template,\n                    phone: text_input_template,\n                    notes: text_input_template,\n                    actions: action_template\n                }\"\n                [filter]=\"(options | async).search\"\n                [class.opacity-50]=\"(loading | async)?.includes('users')\"\n            ></custom-table>\n            <ng-template\n                #text_input_template\n                let-form=\"row\"\n                let-key=\"key\"\n                let-name=\"name\"\n            >\n                <input\n                    [ngModel]=\"form.value[key]\"\n                    (ngModelChange)=\"form.get(key).setValue($event)\"\n                    [placeholder]=\"name\"\n                    class=\"relative -top-px border-none px-2 py-4 -m-2 text-base w-full !outline-none focus:border-b border-blue-600\"\n                />\n            </ng-template>\n            <ng-template #action_template let-form=\"row\">\n                <div class=\"w-full flex items-center justify-end\">\n                    <app-icon\n                        *ngIf=\"\n                            deletion.has(form.value.id) ||\n                            form.dirty ||\n                            isNew(form.value.id)\n                        \"\n                        [class.text-red-600]=\"deletion.has(form.value.id)\"\n                        [class.text-yellow-400]=\"!deletion.has(form.value.id)\"\n                    >\n                        warning\n                    </app-icon>\n                    <button\n                        btn\n                        icon\n                        *ngIf=\"!deletion.has(form.value.id)\"\n                        (click)=\"markForDelete(form.value.id)\"\n                        [matTooltip]=\"\n                            isNew(form.value.id)\n                                ? 'Remove New User'\n                                : 'Mark for Deletion'\n                        \"\n                    >\n                        <app-icon>delete</app-icon>\n                    </button>\n                    <button\n                        btn\n                        icon\n                        *ngIf=\"deletion.has(form.value.id) || form.dirty\"\n                        matTooltip=\"Clear Changes\"\n                        (click)=\"clearChanges(id)\"\n                    >\n                        <app-icon>clear_all</app-icon>\n                    </button>\n                </div>\n            </ng-template>\n        </div>\n        <button\n            btn\n            icon\n            matRipple\n            class=\"absolute bottom-2 left-2 bg-primary text-white\"\n            (click)=\"newUser()\"\n        >\n            <app-icon>add</app-icon>\n        </button>\n        <div\n            class=\"absolute bottom-2 right-2 bg-base-100 border border-base-200 p-2 text-base rounded shadow space-y-2\"\n            *ngIf=\"\n                deletion.entries.length ||\n                (change_count | async) ||\n                (new_items | async).length\n            \"\n        >\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"deletion.entries.length\"\n            >\n                <app-icon class=\"text-red-600 text-2xl\">warning</app-icon>\n                <div>{{ deletion.entries.length }} users pending deletion</div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"(new_items | async).length\"\n            >\n                <app-icon class=\"text-yellow-400 text-2xl\">warning</app-icon>\n                <div>\n                    {{ (new_items | async).length }} new users pending save\n                </div>\n            </div>\n            <div\n                class=\"flex items-center space-x-2 p-2\"\n                *ngIf=\"change_count | async\"\n            >\n                <app-icon class=\"text-yellow-400 text-2xl\">warning</app-icon>\n                <div>{{ change_count | async }} users with pending changes</div>\n            </div>\n            <button btn class=\"w-full\">Save Changes</button>\n        </div>\n    `,\n    styles: [``],\n})\nexport class ParkingUsersListComponent {\n    public readonly options = this._state.options;\n    public readonly loading = this._state.loading;\n    public readonly forms = this._state.users.pipe(\n        map((_) => _.map((u) => generateUserForm(u)))\n    );\n    public readonly new_items = new BehaviorSubject<FormGroup[]>([]);\n    public readonly user_list = combineLatest([\n        this.forms,\n        this.new_items,\n    ]).pipe(map(([a, b]) => [...a, ...b]));\n    public readonly change_count = this.user_list.pipe(\n        map((_) => _.filter((f) => f.dirty || !this.isNew(f.value.id)).length)\n    );\n    public deletion = new Set<string>();\n\n    public isNew(id: string) {\n        return !!this.new_items.getValue().find((_) => _.value.id === id);\n    }\n\n    constructor(private _state: ParkingStateService) {}\n\n    public markForDelete(id) {\n        if (this.isNew(id)) {\n            this.new_items.next(\n                this.new_items.getValue().filter((_) => _.value.id !== id)\n            );\n        } else this.deletion.add(id);\n    }\n\n    public async clearChanges(id) {\n        if (this.isNew(id)) {\n            const new_items = this.new_items.getValue();\n            const item = new_items.find((_) => _.value.id === id);\n            if (item) {\n                item.reset({ id });\n            }\n        } else {\n            const list = await this.user_list.pipe(take(1)).toPromise();\n            const users = await this._state.users.pipe(take(1)).toPromise();\n            const item = list.find((_) => _.value.id === id);\n            const user = users.find((_) => _.id === id);\n            if (item && user) item.reset(user);\n        }\n    }\n\n    public newUser() {\n        const form = generateUserForm({\n            id: `parking-${randomInt(99999999, 10000000)}`,\n        } as any);\n        this.new_items.next([...this.new_items.getValue(), form]);\n    }\n\n    public async saveChanges() {\n        const list = await this.user_list.pipe(take(1)).toPromise();\n        const users = list\n            .map((_) => _.value)\n            .filter((_) => !this.deletion.has(_.id));\n        await this._state.saveUsers(users);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { Route, RouterModule } from '@angular/router';\nimport { FormFieldsModule } from '@placeos/form-fields';\nimport { UIModule } from '../ui/ui.module';\n\nimport { ParkingBookingsListComponent } from './parking-bookings-list.component';\nimport { ParkingSpaceListComponent } from './parking-space-list.component';\nimport { ParkingSpaceModalComponent } from './parking-space-modal.component';\nimport { ParkingTopbarComponent } from './parking-topbar.component';\nimport { ParkingComponent } from './parking.component';\nimport { NewParkingComponent } from './new-parking.component';\nimport { ParkingUsersListComponent } from './parking-users-list.component';\n\nconst COMPONENTS = [\n    NewParkingComponent,\n    ParkingComponent,\n    ParkingBookingsListComponent,\n    ParkingSpaceListComponent,\n    ParkingUsersListComponent,\n    ParkingTopbarComponent,\n    ParkingSpaceModalComponent,\n];\n\nconst ROUTES: Route[] = [\n    {\n        path: 'new',\n        component: NewParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'users', component: ParkingUsersListComponent },\n            { path: 'manage', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    {\n        path: '',\n        component: ParkingComponent,\n        children: [\n            { path: 'events', component: ParkingBookingsListComponent },\n            { path: 'users', component: ParkingUsersListComponent },\n            { path: 'manage', component: ParkingSpaceListComponent },\n            { path: '**', redirectTo: 'events' },\n        ],\n    },\n    { path: '**', redirectTo: '' },\n];\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        UIModule,\n        FormsModule,\n        ReactiveFormsModule,\n        FormFieldsModule,\n        MatTabsModule,\n        MatProgressBarModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class AppParkingModule {}\n"],"x_google_ignoreList":[]}