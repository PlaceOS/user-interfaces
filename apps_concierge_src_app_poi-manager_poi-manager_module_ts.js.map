{"version":3,"file":"apps_concierge_src_app_poi-manager_poi-manager_module_ts.js","mappings":"seAmBYA,MAAA,aAAAA,CAAmD,cACrCA,MAAA,WAAKA,iCAafA,MAAA,UAAAA,CAAsD,cAClDA,MAAA,MACQA,MAAA,UACRA,gBACAA,MAAA,uBACIA,MAAA,cAOJA,oCAeQA,MAAA,mBAIIA,MAAA,GACJA,kCAHIA,MAAA,QAAAC,GAEAD,cAAA,IAAAC,EAAAC,aAAA,4EAjBhBF,MAAA,UAAAA,CAGC,cACGA,MAAA,MACYA,MAAA,UACZA,gBACAA,MAAA,sBAAAA,CAAqC,mBAE7BA,MAAA,yBAAAG,GAAAH,MAAAI,GAAA,MAAAC,EAAAL,MAAA,UAAAA,MAAAK,EAAAC,SAAAH,EAAA,GAIAH,MAAA,EAAAO,EAAA,sCAMJP,qCAVIA,MAAA,GAAAA,MAAA,UAAAQ,EAAAF,SAAAN,CAAsB,iBAAAA,MAAA,EAAAS,IAKFT,cAAA,UAAAA,MAAA,IAAAQ,EAAAE,0CAiBpBV,MAAA,mBAIIA,MAAA,GACJA,kCAHIA,MAAA,QAAAW,EAAAC,IAEAZ,cAAA,IAAAW,EAAAT,aAAA,+BAbhBF,MAAA,UAAAA,CAA0D,cACtDA,MAAA,MACSA,MAAA,UACTA,gBACAA,MAAA,sBAAAA,CAAqC,mBAK7BA,MAAA,EAAAa,EAAA,sCAMJb,mCAL0BA,MAAA,GAAAA,MAAA,UAAAA,MAAA,IAAAc,EAAAC,oCAwB9Bf,MAAA,GACIA,MAAA,uBACIA,MAAA,cAOJA,QACJA,iDACAA,MAAA,WAAAA,CAGC,sBAHDA,CAGC,cAMWA,MAAA,yBAAAG,GAAAH,MAAAgB,GAAA,MAAAC,EAAAjB,MAAA,UAEbA,MAAAiB,EAAAC,KAAAC,WAAA,CAAAC,SAAA,CAAAjB,EAAAc,EAAAC,KAAAG,MAAAD,SAGe,MAGhC,GAZ0BpB,UAeJA,MAAA,sBAAAA,CAAoD,cAK5CA,MAAA,yBAAAG,GAAAH,MAAAgB,GAAA,MAAAM,EAAAtB,MAAA,UAEbA,MAAAsB,EAAAJ,KAAAC,WAAA,CAAAC,SAAA,CAAAE,EAAAJ,KAAAG,MAAAD,SAEc,GAACjB,KAIhC,GAZ0BH,qCAbIA,MAAA,GAAAA,MAAA,UAAAuB,EAAAL,KAAAG,MAAAD,SAAA,GAAApB,CAAkC,iBAAAA,MAAA,EAAAS,IAgBlCT,MAAA,GAAAA,MAAA,UAAAuB,EAAAL,KAAAG,MAAAD,SAAA,GAAApB,CAAkC,iBAAAA,MAAA,EAAAS,6CA/GtDT,MAAA,YAMIA,MAAA,EAAAwB,EAAA,YAAAxB,CAaM,EAAAyB,EAAA,8BAuBNzB,MAAA,EAAA0B,EAAA,aAkBA1B,MAAA,UAAAA,CAA2B,cACvBA,MAAA,MACYA,MAAA,UACZA,gBACAA,MAAA,sBAAAA,CAAqC,oBAE7BA,MAAA,yBAAAG,GAAAH,MAAA2B,GAAA,MAAAC,EAAA5B,MAAA,UAAAA,MAAA4B,EAAAC,cAAA1B,EAAA,GAIAH,MAAA,oBAA2BA,MAAA,aAAMA,QACjCA,MAAA,oBACKA,MAAA,kBAAWA,YAIxBA,MAAA,GAAA8B,EAAA,sBAAA9B,CAUe,GAAA+B,EAAA,cAsCnB/B,yCAxHAA,MAAA,YAAAgC,EAAAd,MAE4BlB,cAAA,OAAAgC,EAAAd,KAAAe,SAAAC,MAgBvBlC,cAAA,eAAAmC,EAAAnC,MAAA,IAAAgC,EAAAtB,gBAAA,KAAAyB,EAAAC,QAAA,GAoBuBpC,MAAA,GAAAA,MAAA,OAAAgC,EAAAd,KAAAe,SAAAI,UAwBhBrC,MAAA,GAAAA,MAAA,UAAAgC,EAAAH,cAAA7B,CAA2B,iBAAAA,MAAA,GAAAS,IAUpBT,MAAA,GAAAA,MAAA,kBAAAgC,EAAAH,eAaV7B,cAAA,uBAAAgC,EAAAH,yCA7FjB7B,MAAA,YAIIA,MAAA,EAAAsC,EAAA,gBA8HJtC,8BA3HSA,cAAA,OAAAuC,EAAArB,+CA4HTlB,MAAA,cAAAA,CAGC,eAC4BA,MAAA,mBAAAA,MAAAwC,GAAA,MAAAC,EAAAzC,QAAA,OAASA,MAAAyC,EAAAC,OAAM,GAAE1C,MAAA,UAAIA,iCAG9CA,MAAA,YACIA,MAAA,oBACAA,MAAA,UAAgBA,MAAA,iCAA2BA,WAMpD,IAAM2C,EAAkB,MAAzB,MAAOA,UAA0BC,KAOnC,YAAWtC,GACP,OAAOuC,KAAKC,KAAKxC,QACrB,CAEA,YAAWA,CAASe,GAChBwB,KAAKC,KAAKxC,SAAWe,CACzB,CAaA0B,YACYD,EACyBE,EACzBC,GAERC,QAJQL,KAAAC,OACyBD,KAAAG,QACzBH,KAAAI,cA5BLJ,KAAAM,SAAU,EACVN,KAAAhB,cACHgB,KAAKG,OAAO5B,oBAAoBgC,MAAQ,cAAgB,SAC5CP,KAAAnC,cAAgBmC,KAAKC,KAAKpC,cAC1BmC,KAAA9B,WAAa8B,KAAKC,KAAKO,cAUvBR,KAAA3B,KAAO,IAAIoC,KAAU,CACjC1C,GAAI,IAAI2C,KAAYV,KAAKG,OAAOpC,IAAM,IACtCsB,KAAM,IAAIqB,KAAYV,KAAKG,OAAOd,MAAQ,GAAI,CAACsB,KAAWC,WAC1DpB,SAAU,IAAIkB,KAAYV,KAAKG,OAAOX,UAAY,GAAI,CAClDmB,KAAWC,WAEfrC,SAAU,IAAImC,KAAYV,KAAKG,OAAO5B,UAAY,GAAI,CAClDoC,KAAWC,YAUnB,CAEaC,WAAQ,IAAAC,EAAAd,KAAA,SAAAe,KAAA,YACjB,IAAKD,EAAKzC,KAAKG,MAAMgB,SAAU,CAC3B,MAAMwB,QAAeF,EAAK5C,WAAW+C,QAAKC,KAAK,IAAIC,YAC/CH,EAAOzB,QAAQuB,EAAKzC,KAAKC,WAAW,CAAEkB,SAAUwB,EAAO,GAAGjD,IAClE,CAAC,EAJgB,EAKrB,CAEa8B,OAAI,IAAAuB,EAAApB,KAAA,SAAAe,KAAA,YACb,IAAKK,EAAK/C,KAAKgD,MACX,SAAOC,MACH,qCAAkCC,MAC9BH,EAAK/C,MACPmD,KAAK,UAGf,MAAMC,EAAYL,EAAK/C,KAAKqD,cACvBD,EAAK1D,KAAI0D,EAAK1D,GAAK,UAAO4D,MAAa,MAC5CP,EAAKd,SAAU,EAMf,MAAMsB,SALY,EAASC,OACvBT,EAAKnB,KAAKxC,SAASM,GACnB,eACA,IACFoD,aAC4BW,SAAW,GACpCF,EAASH,EAAKjC,YAAWoC,EAASH,EAAKjC,UAAY,IACxDoC,EAASH,EAAKjC,UAAY,IACnBoC,EAASH,EAAKjC,UAAUuC,OAAQC,GAAMA,EAAEjE,KAAO0D,EAAK1D,IACvD0D,GACFQ,KAAK,CAACC,EAAGC,IAAMD,EAAE7C,KAAK+C,cAAcD,EAAE9C,OACxC,MAAMgD,QAAI,EAASC,OAAelB,EAAKnB,KAAKxC,SAASM,GAAI,CACrDsB,KAAM,eACNyC,QAASF,EACTW,YAAa,KAEZpB,YACAqB,MAAOC,MAAMnB,MAAYmB,IACzBJ,EAAatE,IAAIqD,EAAKhB,YAAYsC,MAAML,GAC7CjB,EAAKd,SAAU,CAAM,EA9BR,EA+BjB,CAACqC,SAAA3C,KAAA,mBAAA4C,iBAxEQ9C,GAAiB3C,MAAA0F,MAAA1F,MA4Bd2F,MAAe3F,MAAA4F,MAAA,EAAAJ,SAAA3C,KAAA,UAAAgD,EAAAC,IAAA,MA5BlBnD,EAAiBoD,UAAA,gBAAAC,SAAA,CAAAhG,OAAAiG,MAAA,EAAAC,KAAA,EAAAC,YAAA,IAAAC,qBAjF2BC,+FACzB,oCAAO,wCAvDkBA,2FAC7B,oCAAO,wCAMMA,kGAUgBA,8FACzB,oCAAO,wCAkBkBA,4FAC5B,oCAAO,wCAqCSA,qpDA3FrCrG,MAAA,WAAAA,CAAQ,QACAA,MAAA,GAAsDA,QAC1DA,MAAA,EAAAsG,EAAA,gBAGJtG,QACAA,MAAA,EAAAuG,EAAA,aAAAvG,CAkIO,EAAAwG,EAAA,eAlIPxG,CAkIO,EAAAyG,EAAA,yBAAAzG,8BAvICA,MAAA,GAAAA,MAAA,GAAA0G,EAAAxF,KAAAG,MAAAT,GAAA,mCAC+BZ,cAAA,QAAA0G,EAAAvD,SAMlCnD,cAAA,QAAA0G,EAAAvD,QAAAnD,CAAgB,WAAA2G,GAmIhB3G,cAAA,QAAA0G,EAAAvD,sHAaAR,CAAkB,KC1IlBiE,EAAoB,MAA3B,MAAOA,EAiCT7D,YACYD,EACA+D,GADAhE,KAAAC,OACAD,KAAAgE,UAlCJhE,KAAAiE,SAAW,IAAIC,IAAgC,IAC/ClE,KAAAmE,QAAU,IAAID,IAAgB,GAE/BlE,KAAAoE,QAAUpE,KAAKiE,SAASI,eAEvBrE,KAAAsE,aAAYC,MAAc,CAC9BvE,KAAKC,KAAKuE,gBACVxE,KAAKmE,UACNlD,QACCwD,KAAU,EAAEC,MAAG,EAAM7C,OAAa6C,EAAI3G,GAAI,eAAgB,MAAG,EAC7D4G,KAAK3C,GAAMA,EAAEF,SAAW,KAAE,EAC1B8C,KAAY,IAGA5E,KAAA6E,qBAAoBN,MAAc,CAC9CvE,KAAKsE,UACLtE,KAAKiE,WACNhD,QACC0D,KAAI,EAAExB,EAAUiB,MACZ,IAAIU,EAAOC,OAAOC,OAAO7B,GAAU8B,OAC/B,CAACC,EAAKlD,IAAM,IAAIkD,KAAQlD,GACxB,IAEJ,OAAIoC,EAAQe,SACRL,EAAOA,EAAK/C,OAAQC,GAChBA,EAAE3C,KAAK+F,cAAcC,SAASjB,EAAQe,OAAOC,iBAG9CN,IAOZ,CAEIQ,WAAWlB,GACdpE,KAAKiE,SAASsB,KAAK,IAAKvF,KAAKiE,SAASuB,cAAepB,GACzD,CAEOqB,gBAAgBN,GACnBnF,KAAKiE,SAASsB,KAAK,IAAKvF,KAAKiE,SAASuB,WAAYL,UACtD,CAEOO,oBAAoBC,GACX3F,KAAKgE,QAAQ4B,KAAK9F,EAAmB,CAC7C2B,KAAMkE,IAENE,cAAcC,UAAU,IAAM9F,KAAKmE,QAAQoB,KAAKQ,KAAKC,OAC7D,CAEaC,sBAAsBN,GAAoB,IAAA7E,EAAAd,KAAA,SAAAe,KAAA,YACnD,MAAMmF,QAAG,EAASC,MACd,CACIC,MAAO,2BACPC,QAAS,0DAA0DV,EAAItG,SACvEiH,KAAM,CAAED,QAAS,kBACjBE,aAAc,UAElBzF,EAAKkD,SAET,GAAmB,SAAfkC,EAAIM,OAAmB,OAAON,EAAIxD,QACtCwD,EAAI5F,QAAQ,iCAMZ,MAAMsB,SALY,EAASC,OACvBf,EAAKb,KAAKxC,SAASM,GACnB,eACA,IACFoD,aAC4BW,SAAW,GACrCF,EAAS+D,EAAInG,YACboC,EAAS+D,EAAInG,UAAYoC,EAAS+D,EAAInG,UAAUuC,OAC3CC,GAAMA,EAAEjE,KAAO4H,EAAI5H,WAG5B,EAAMuE,OAAexB,EAAKb,KAAKxC,SAASM,GAAI,CACxCsB,KAAM,eACNyC,QAASF,EACTW,YAAa,KAEZpB,YACAqB,MAAOC,IACJnB,cAAYmB,GACZyD,EAAIxD,QACED,KACT,EACLgE,MAAc,2CACdP,EAAIxD,QACJ5B,EAAKqD,QAAQoB,KAAKQ,KAAKC,MAAO,EApCqB,EAqCvD,CAACrD,SAAA3C,KAAA,mBAAA4C,iBA1FQmB,GAAoB5G,MAAA0F,MAAA1F,MAAA4F,MAAA,EAAAJ,SAAA3C,KAAA,WAAAgD,EAAA0D,IAAA,OAApB3C,EAAoB4C,QAApB5C,EAAoB6C,UAAAC,WAFjB,gBAEH9C,CAAoB,2ICLrB5G,MAAA,gCAAAA,MAAA,YAAA2J,EAAA3J,MAAA,UAAAqC,WAAA,KAAAsH,EAAAzJ,eAAA,yDAcQF,MAAA,WAAAA,CAA6C,WAA7CA,CAA6C,0BAQjCA,MAAA,YACJA,QACAA,MAAA,YAGIA,MAAA,GACJA,UAEJA,MAAA,eAIIA,MAAA,mBAAAA,MAAA4J,GAAA,MAAAC,EAAA7J,MAAA,UAASA,MAAA6J,EAAAC,QAAO,GAEhB9J,MAAA,qBACJA,sCApBQA,MAAA,GAAAA,MAAA,OAAAA,MAAA,IAAA+J,EAAAC,QAAA,OAAAhK,OAKkBA,MAAA,GAAAA,MAAA,MAAA+J,EAAAE,QAAAjK,OAKlBA,MAAA,GAAAA,MAAA,IAAA+J,EAAA7H,MAAA6H,EAAAnJ,GAAA,+CAxBpBZ,MAAA,UAAAA,CAA+C,cAMvCA,MAAA,yBAAA+J,EAAA/J,MAAAkK,GAAAC,IAAAC,EAAApK,QAAA,OAASA,MAAAoK,EAAAC,WAAAN,GAAe,GAExB/J,MAAA,cAAUA,MAAA,aAAOA,UAErBA,MAAA,EAAAsK,GAAA,yBAAAtK,OA2BAA,MAAA,aAAAA,CAAsD,cACxCA,MAAA,eAASA,UAEvBA,MAAA,oBAAAA,CAA0B,eACAA,MAAA,yBAAA+J,EAAA/J,MAAAkK,GAAAC,IAAAI,EAAAvK,QAAA,OAASA,MAAAuK,EAAAC,KAAAT,GAAS,GACpC/J,MAAA,YAAAA,CAAyC,eAC3BA,MAAA,WAAIA,QACdA,MAAA,WAAMA,MAAA,6BAAsBA,YAGpCA,MAAA,eAAsBA,MAAA,yBAAA+J,EAAA/J,MAAAkK,GAAAC,IAAAM,EAAAzK,QAAA,OAASA,MAAAyK,EAAAC,OAAAX,GAAW,GACtC/J,MAAA,YAAAA,CAAsD,kBACrBA,MAAA,aAAMA,QACnCA,MAAA,WAAMA,MAAA,+BAAwBA,qDA7CtCA,cAAA,UAAA2K,GAgCuB3K,MAAA,GAAAA,MAAA,oBAAA4K,iKAsBpC,IAAMC,GAAgB,MAAvB,MAAOA,EAQT,aAAWC,GACP,MAAMC,EAAOlI,KAAKmI,UAAUC,IAAI,uBAAyB,aACzD,MAAO,GAAGC,OAAO9J,SAAS+J,SAASJ,GACvC,CAEOV,WAAWe,GACd,MAAMC,EAAO,GAAGxI,KAAKiI,6BAA6BQ,mBAC9CF,EAAK/I,oBACGiJ,mBAAmBF,EAAKxK,MACpCwK,EAAKpB,QAAUqB,EACfD,EAAKnB,WAAUsB,MAAeF,EAClC,CAEAtI,YACYyI,EACAR,GADAnI,KAAA2I,WACA3I,KAAAmI,YAtBInI,KAAAmD,SAAWnD,KAAK2I,SAAS9D,kBAEzB7E,KAAA2H,KAAQiB,GACpB5I,KAAK2I,SAASjD,oBAAoBkD,GACtB5I,KAAA6H,OAAUe,GACtB5I,KAAK2I,SAAS1C,sBAAsB2C,EAkBrC,CAACjG,SAAA3C,KAAA,mBAAA4C,iBAxBKoF,GAAgB7K,MAAA0F,GAAA1F,MAAA4F,MAAA,EAAAJ,SAAA3C,KAAA,UAAAgD,EAAAC,IAAA,MAAhB+E,EAAgB9E,UAAA,eAAAE,MAAA,EAAAC,KAAA,GAAAC,OAAA,o+BAAAuF,SAAA,SAAAC,EAAAjF,MAAA,EAAAiF,IA7ErB3L,MAAA,WACIA,MAAA,oBAYJA,QACAA,MAAA,EAAA4L,GAAA,yBAAA5L,OAEc,EAAA6L,GAAA,0BAAA7L,yCAbNA,cAAA,aAAA0G,EAAAV,SAAAhG,CAAuB,UAAAA,MAAA,EAAAS,IAAvBT,CAAuB,iBAAAA,MAAA,EAAA8L,IAAvB9L,CAAuB,cAAAA,MAAA,EAAA+L,IAAvB/L,CAAuB,WAAAA,MAAA,EAAAgM,GAAAC,EAAAC,+EA0E1BrB,CAAgB,qCCxCtB,IAAMsB,EAAmB,MAA1B,MAAOA,EAGTpJ,YAA6BqJ,GAAAvJ,KAAAuJ,SAFbvJ,KAAAwJ,IAAM,IAAMxJ,KAAKuJ,OAAO7D,qBAEoB,CAAC/C,SAAA3C,KAAA,mBAAA4C,iBAHpD0G,GAAmBnM,MAAA0F,GAAA,EAAAF,SAAA3C,KAAA,UAAAgD,EAAAC,IAAA,MAAnBqG,EAAmBpG,UAAA,4BAAAuG,MAAA7L,GAAAwF,MAAA,GAAAC,KAAA,EAAAC,OAAA,gQAAAuF,SAAA,SAAAC,EAAAjF,GAAA,EAAAiF,IA1CxB3L,MAAA,gBACAA,MAAA,WACIA,MAAA,iBACAA,MAAA,WAAAA,CAAgD,aAAhDA,CAAgD,UAKpCA,MAAA,oCACJA,QACAA,MAAA,cAAsBA,MAAA,0BAAS0G,EAAA2F,KAAK,GAChCrM,MAAA,6BACJA,UAEJA,MAAA,gBACJA,wXA2BCmM,CAAmB,qBCjChC,MAAMI,GAAkB,CACpB,CAAExB,KAAM,GAAIyB,UAAWL,GACvB,CAAEpB,KAAM,MAAOyB,UAAWL,IAevB,IAAMM,GAAgB,MAAvB,MAAOA,EAAgBjH,SAAA3C,KAAA,mBAAA4C,iBAAhBgH,EAAgB,EAAAjH,SAAA3C,KAAA,UAAAgD,EAAA6G,IAAA,MAAhBD,IAAgBjH,SAAA3C,KAAA,UAAAgD,EAAA8G,IAAA,UATrBC,KACAC,KACAC,IACAC,KACAC,KACAC,MACAC,KAAaC,SAASZ,cAGjBE,CAAgB","names":["i0","bld_r12","display_name","$event","_r14","ctx_r13","building","POIModalComponent_main_4_form_1_div_2_mat_option_6_Template","ctx_r7","_c0","building_list","level_r16","id","POIModalComponent_main_4_form_1_div_4_mat_option_6_Template","ctx_r8","level_list","_r18","ctx_r17","form","patchValue","location","value","ctx_r19","ctx_r10","POIModalComponent_main_4_form_1_div_1_Template","POIModalComponent_main_4_form_1_div_2_Template","POIModalComponent_main_4_form_1_div_4_Template","_r21","ctx_r20","location_type","POIModalComponent_main_4_form_1_ng_container_15_Template","POIModalComponent_main_4_form_1_div_16_Template","ctx_r5","controls","name","tmp_2_0","length","level_id","POIModalComponent_main_4_form_1_Template","ctx_r1","_r23","ctx_r22","save","POIModalComponent","AsyncHandler","this","_org","constructor","_data","_dialog_ref","super","loading","Array","active_levels","FormGroup","FormControl","Validators","required","ngOnInit","_this","_asyncToGenerator","levels","pipe","take","toPromise","_this2","valid","notifyError","getInvalidFields","join","data","getRawValue","randomString","metadata","showMetadata","details","filter","_","sort","a","b","localeCompare","resp","updateMetadata","description","catch","e","close","static","t","i1","MAT_DIALOG_DATA","i2","core","Xpm","selectors","features","decls","vars","consts","i18n_0","$localize","POIModalComponent_button_3_Template","POIModalComponent_main_4_Template","POIModalComponent_footer_5_Template","POIModalComponent_ng_template_6_Template","ctx","_r4","POIManagementService","_dialog","_options","BehaviorSubject","_change","options","asObservable","_features","combineLatest","active_building","switchMap","bld","map","shareReplay","filtered_features","list","Object","values","reduce","acc","search","toLowerCase","includes","setFilters","next","getValue","setSearchString","editPointOfInterest","poi","open","afterClosed","subscribe","Date","now","removePointOfInterest","ref","openConfirmModal","title","content","icon","confirm_text","reason","notifySuccess","Yz7","factory","ɵfac","providedIn","tmp_0_0","_r10","ctx_r9","print","row_r5","qr_link","qr_code","_r13","row","ctx_r12","loadQrCode","POIListComponent_ng_template_4_ng_template_4_Template","ctx_r14","edit","ctx_r15","remove","_r7","_r8","POIListComponent","kiosk_url","path","_settings","get","window","origin","item","link","encodeURIComponent","generateQRCode","_manager","region","template","rf","POIListComponent_ng_template_2_Template","POIListComponent_ng_template_4_Template","_c1","_c2","_c3","_r1","_r3","POIManagerComponent","_state","new","attrs","ROUTES","component","POIManagerModule","oAB","cJS","CommonModule","FormsModule","UIModule","SharedSpacesModule","SharedUsersModule","MatChipsModule","RouterModule","forChild"],"sourceRoot":"webpack:///","sources":["./apps/concierge/src/app/poi-manager/poi-modal.component.ts","./apps/concierge/src/app/poi-manager/poi-management.service.ts","./apps/concierge/src/app/poi-manager/poi-list.component.ts","./apps/concierge/src/app/poi-manager/poi-manager.component.ts","./apps/concierge/src/app/poi-manager/poi-manager.module.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {\n    AsyncHandler,\n    getInvalidFields,\n    notifyError,\n    randomString,\n} from '@placeos/common';\nimport { OrganisationService, Building } from '@placeos/organisation';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { PointOfInterest } from './poi-management.service';\nimport { take } from 'rxjs/operators';\n\n@Component({\n    selector: 'poi-modal',\n    template: `\n        <header>\n            <h2>{{ form.value.id ? 'Edit' : 'Add' }} Point Of Interest</h2>\n            <button btn icon mat-dialog-close *ngIf=\"!loading\">\n                <app-icon>close</app-icon>\n            </button>\n        </header>\n        <main\n            class=\"max-h-[65vh] overflow-y-auto overflow-x-hidden p-4\"\n            *ngIf=\"!loading; else load_state\"\n        >\n            <form\n                system\n                class=\"flex flex-col w-[28rem] max-w-[calc(100vw-4rem)]\"\n                *ngIf=\"form\"\n                [formGroup]=\"form\"\n            >\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.name\">\n                    <label for=\"name\" i18n=\"@@nameLabel\">\n                        Name<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <input\n                            matInput\n                            name=\"name\"\n                            placeholder=\"Name\"\n                            i18n-placeholder=\"@@namePlaceholder\"\n                            formControlName=\"name\"\n                        />\n                    </mat-form-field>\n                </div>\n                <div\n                    class=\"flex flex-col\"\n                    *ngIf=\"(building_list | async)?.length > 1\"\n                >\n                    <label for=\"name\" i18n=\"@@nameLabel\">\n                        Building<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [(ngModel)]=\"building\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Select Building\"\n                        >\n                            <mat-option\n                                *ngFor=\"let bld of building_list | async\"\n                                [value]=\"bld\"\n                            >\n                                {{ bld.display_name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\" *ngIf=\"form.controls.level_id\">\n                    <label for=\"name\" i18n=\"@@nameLabel\">\n                        Level<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            formControlName=\"level_id\"\n                            placeholder=\"Select Level\"\n                        >\n                            <mat-option\n                                *ngFor=\"let level of level_list | async\"\n                                [value]=\"level.id\"\n                            >\n                                {{ level.display_name }}\n                            </mat-option>\n                        </mat-select>\n                    </mat-form-field>\n                </div>\n                <div class=\"flex flex-col\">\n                    <label for=\"name\" i18n=\"@@nameLabel\">\n                        Location<span>*</span>:\n                    </label>\n                    <mat-form-field appearance=\"outline\">\n                        <mat-select\n                            [(ngModel)]=\"location_type\"\n                            [ngModelOptions]=\"{ standalone: true }\"\n                            placeholder=\"Location Type\"\n                        >\n                            <mat-option value=\"map_id\">Map ID</mat-option>\n                            <mat-option value=\"coordinates\"\n                                >Coordinates</mat-option\n                            >\n                        </mat-select>\n                    </mat-form-field>\n                    <ng-container *ngIf=\"location_type === 'map_id'\">\n                        <mat-form-field appearance=\"outline\">\n                            <input\n                                matInput\n                                name=\"location\"\n                                placeholder=\"Location\"\n                                i18n-placeholder=\"@@locationPlaceholder\"\n                                formControlName=\"location\"\n                            />\n                        </mat-form-field>\n                    </ng-container>\n                    <div\n                        class=\"flex items-center space-x-2\"\n                        *ngIf=\"location_type === 'coordinates'\"\n                    >\n                        <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                            <input\n                                matInput\n                                name=\"latitude\"\n                                [ngModel]=\"form.value.location[0]\"\n                                (ngModelChange)=\"\n                                    form.patchValue({\n                                        location: [\n                                            $event,\n                                            form.value.location[1]\n                                        ]\n                                    })\n                                \"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                            />\n                        </mat-form-field>\n                        <mat-form-field appearance=\"outline\" class=\"flex-1\">\n                            <input\n                                matInput\n                                name=\"longitude\"\n                                [ngModel]=\"form.value.location[1]\"\n                                (ngModelChange)=\"\n                                    form.patchValue({\n                                        location: [\n                                            form.value.location[0],\n                                            $event\n                                        ]\n                                    })\n                                \"\n                                [ngModelOptions]=\"{ standalone: true }\"\n                            />\n                        </mat-form-field>\n                    </div>\n                </div>\n            </form>\n        </main>\n        <footer\n            class=\"p-2 flex justify-end border-t border-base-200\"\n            *ngIf=\"!loading\"\n        >\n            <button btn class=\"w-32\" (click)=\"save()\">Save</button>\n        </footer>\n        <ng-template #load_state>\n            <div class=\"flex flex-col items-center justify-center w-64 h-64\">\n                <mat-spinner diameter=\"32\"></mat-spinner>\n                <p class=\"mt-4\">Saving Point Of Interest...</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class POIModalComponent extends AsyncHandler {\n    public loading = false;\n    public location_type =\n        this._data?.location instanceof Array ? 'coordinates' : 'map_id';\n    public readonly building_list = this._org.building_list;\n    public readonly level_list = this._org.active_levels;\n\n    public get building() {\n        return this._org.building;\n    }\n\n    public set building(value: Building) {\n        this._org.building = value;\n    }\n\n    public readonly form = new FormGroup({\n        id: new FormControl(this._data?.id || ''),\n        name: new FormControl(this._data?.name || '', [Validators.required]),\n        level_id: new FormControl(this._data?.level_id || '', [\n            Validators.required,\n        ]),\n        location: new FormControl(this._data?.location || '', [\n            Validators.required,\n        ]),\n    });\n\n    constructor(\n        private _org: OrganisationService,\n        @Inject(MAT_DIALOG_DATA) private _data: PointOfInterest | undefined,\n        private _dialog_ref: MatDialogRef<POIModalComponent>\n    ) {\n        super();\n    }\n\n    public async ngOnInit() {\n        if (!this.form.value.level_id) {\n            const levels = await this.level_list.pipe(take(1)).toPromise();\n            if (levels.length) this.form.patchValue({ level_id: levels[0].id });\n        }\n    }\n\n    public async save() {\n        if (!this.form.valid) {\n            return notifyError(\n                `Some form fields are invalid. [${getInvalidFields(\n                    this.form\n                ).join(', ')}]`\n            );\n        }\n        const data: any = this.form.getRawValue();\n        if (!data.id) data.id = `POI-${randomString(8)}`;\n        this.loading = true;\n        const old_metadata = await showMetadata(\n            this._org.building.id,\n            'map_features',\n            {}\n        ).toPromise();\n        const metadata = old_metadata.details || {};\n        if (!metadata[data.level_id]) metadata[data.level_id] = [];\n        metadata[data.level_id] = [\n            ...metadata[data.level_id].filter((_) => _.id !== data.id),\n            data,\n        ].sort((a, b) => a.name.localeCompare(b.name));\n        const resp = await updateMetadata(this._org.building.id, {\n            name: 'map_features',\n            details: metadata,\n            description: '',\n        })\n            .toPromise()\n            .catch((e) => notifyError(e));\n        if ((resp as any).id) this._dialog_ref.close(resp);\n        this.loading = false;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { OrganisationService } from '@placeos/organisation';\nimport { BehaviorSubject, combineLatest } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { POIModalComponent } from './poi-modal.component';\nimport {\n    SettingsService,\n    notifyError,\n    notifySuccess,\n    openConfirmModal,\n} from '@placeos/common';\nimport { showMetadata, updateMetadata } from '@placeos/ts-client';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\n\nexport interface POIListOptions {\n    search?: string;\n}\n\nexport interface PointOfInterest {\n    id: string;\n    name: string;\n    level_id: string;\n    location: string | [number, number];\n    qr_code?: string;\n    qr_link?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class POIManagementService {\n    private _options = new BehaviorSubject<POIListOptions>({});\n    private _change = new BehaviorSubject(0);\n\n    public options = this._options.asObservable();\n\n    private _features = combineLatest([\n        this._org.active_building,\n        this._change,\n    ]).pipe(\n        switchMap(([bld]) => showMetadata(bld.id, 'map_features', {})),\n        map((_) => _.details || {}),\n        shareReplay(1)\n    );\n\n    public readonly filtered_features = combineLatest([\n        this._features,\n        this._options,\n    ]).pipe(\n        map(([features, options]) => {\n            let list = Object.values(features).reduce(\n                (acc, _) => [...acc, ..._],\n                []\n            );\n            if (options.search) {\n                list = list.filter((_) =>\n                    _.name.toLowerCase().includes(options.search.toLowerCase())\n                );\n            }\n            return list;\n        })\n    );\n\n    constructor(\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {}\n\n    public setFilters(options: Partial<POIListOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public setSearchString(search: string) {\n        this._options.next({ ...this._options.getValue(), search });\n    }\n\n    public editPointOfInterest(poi?: PointOfInterest) {\n        const ref = this._dialog.open(POIModalComponent, {\n            data: poi,\n        });\n        ref.afterClosed().subscribe(() => this._change.next(Date.now()));\n    }\n\n    public async removePointOfInterest(poi: PointOfInterest) {\n        const ref = await openConfirmModal(\n            {\n                title: 'Remove Point of Interest',\n                content: `Are you sure you want to remove the point of interest \"${poi.name}\"?`,\n                icon: { content: 'delete_forever' },\n                confirm_text: 'Remove',\n            },\n            this._dialog\n        );\n        if (ref.reason !== 'done') return ref.close();\n        ref.loading('Removing point of interest...');\n        const old_metadata = await showMetadata(\n            this._org.building.id,\n            'map_features',\n            {}\n        ).toPromise();\n        const metadata = old_metadata.details || {};\n        if (metadata[poi.level_id]) {\n            metadata[poi.level_id] = metadata[poi.level_id].filter(\n                (_) => _.id !== poi.id\n            );\n        }\n        await updateMetadata(this._org.building.id, {\n            name: 'map_features',\n            details: metadata,\n            description: '',\n        })\n            .toPromise()\n            .catch((e) => {\n                notifyError(e);\n                ref.close();\n                throw e;\n            });\n        notifySuccess('Successfully removed point of interest.');\n        ref.close();\n        this._change.next(Date.now());\n    }\n}\n","import { Component } from '@angular/core';\nimport {\n    POIManagementService,\n    PointOfInterest,\n} from './poi-management.service';\nimport { SettingsService } from '@placeos/common';\nimport { generateQRCode } from 'libs/common/src/lib/qr-code';\n\n@Component({\n    selector: 'poi-list',\n    template: `\n        <div class=\"absolute inset-0 overflow-auto px-4\">\n            <custom-table\n                class=\"block min-w-[32rem] w-full h-full\"\n                [dataSource]=\"features\"\n                [columns]=\"['name', 'level', 'location', 'actions']\"\n                [display_column]=\"['Name', 'Level', 'Location', ' ']\"\n                [column_size]=\"['flex', '10r', '10r', '6.5r']\"\n                [template]=\"{\n                    level: level_template,\n                    actions: action_template\n                }\"\n                empty=\"No Points of Interest found.\"\n            ></custom-table>\n        </div>\n        <ng-template #level_template let-row=\"row\">\n            {{ (row.level_id | level)?.display_name || 'Unknown' }}\n        </ng-template>\n        <ng-template #action_template let-row=\"row\">\n            <div class=\"w-full flex justify-end space-x-2\">\n                <button\n                    icon\n                    matRipple\n                    customTooltip\n                    [content]=\"qr_menu\"\n                    (click)=\"loadQrCode(row)\"\n                >\n                    <app-icon>qr_code</app-icon>\n                </button>\n                <ng-template #qr_menu>\n                    <div class=\"bg-base-100 py-2 shadow rounded\">\n                        <div class=\"\" printable>\n                            <a\n                                [href]=\"row.qr_link | safe: 'url'\"\n                                target=\"_blank\"\n                                ref=\"noopener noreferrer\"\n                                class=\"block p-2 mx-4 my-2 rounded-lg border border-base-200 bg-base-100\"\n                            >\n                                <img class=\"w-48\" [src]=\"row.qr_code\" />\n                            </a>\n                            <div\n                                class=\"w-[calc(100%-2rem)] text-center mt-2 font-mono text-sm bg-base-200 rounded p-2 mx-4\"\n                            >\n                                {{ row.name || row.id }}\n                            </div>\n                        </div>\n                        <button\n                            btn\n                            matRipple\n                            class=\"w-[calc(100%-2rem)] mx-4 my-2\"\n                            (click)=\"print()\"\n                        >\n                            Print QR Code\n                        </button>\n                    </div>\n                </ng-template>\n                <button btn icon matRipple [matMenuTriggerFor]=\"menu\">\n                    <app-icon>more_vert</app-icon>\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item (click)=\"edit(row)\">\n                        <div class=\"flex items-center space-x-2\">\n                            <app-icon>edit</app-icon>\n                            <span>Edit Point of Interest</span>\n                        </div>\n                    </button>\n                    <button mat-menu-item (click)=\"remove(row)\">\n                        <div class=\"flex items-center space-x-2 text-red-500\">\n                            <app-icon class=\"text-error\">delete</app-icon>\n                            <span>Delete Point of Interest</span>\n                        </div>\n                    </button>\n                </mat-menu>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class POIListComponent {\n    public readonly features = this._manager.filtered_features;\n\n    public readonly edit = (region) =>\n        this._manager.editPointOfInterest(region);\n    public readonly remove = (region) =>\n        this._manager.removePointOfInterest(region);\n\n    public get kiosk_url() {\n        const path = this._settings.get('app.kiosk_url_path') || '/map-kiosk';\n        return `${window.location.origin}${path}`;\n    }\n\n    public loadQrCode(item: PointOfInterest) {\n        const link = `${this.kiosk_url}/#/explore?level=${encodeURIComponent(\n            item.level_id\n        )}&locate=${encodeURIComponent(item.id)}`;\n        item.qr_link = link;\n        item.qr_code = generateQRCode(link);\n    }\n\n    constructor(\n        private _manager: POIManagementService,\n        private _settings: SettingsService\n    ) {}\n}\n","import { Component } from '@angular/core';\nimport { POIManagementService } from './poi-management.service';\n\n@Component({\n    selector: '[app-poi-manager]',\n    template: `\n        <app-topbar></app-topbar>\n        <div class=\"flex flex-1 h-px\">\n            <app-sidebar></app-sidebar>\n            <main class=\"flex flex-col flex-1 w-1/2 h-full\">\n                <header\n                    class=\"flex items-center justify-between mb-2 px-4 py-8\"\n                >\n                    <h2 class=\"text-2xl font-medium\">\n                        Point of Interest Management\n                    </h2>\n                    <button btn matRipple (click)=\"new()\">\n                        Add Point of Interest\n                    </button>\n                </header>\n                <poi-list class=\"block w-full relative flex-1 h-1/2\"></poi-list>\n            </main>\n        </div>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background-color: var(--b1);\n            }\n\n            sidebar {\n                height: 100%;\n            }\n\n            main {\n                display: flex;\n                flex-direction: column;\n                flex: 1;\n                min-width: 50%;\n                height: 100%;\n            }\n        `,\n    ],\n})\nexport class POIManagerComponent {\n    public readonly new = () => this._state.editPointOfInterest();\n\n    constructor(private readonly _state: POIManagementService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { UIModule } from '../ui/ui.module';\n\nimport { SharedSpacesModule } from '@placeos/spaces';\nimport { SharedUsersModule } from '@placeos/users';\n\nimport { POIManagerComponent } from './poi-manager.component';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { POIListComponent } from './poi-list.component';\nimport { POIModalComponent } from './poi-modal.component';\n\nconst ROUTES: Route[] = [\n    { path: '', component: POIManagerComponent },\n    { path: 'new', component: POIManagerComponent },\n];\n\n@NgModule({\n    declarations: [POIManagerComponent, POIListComponent, POIModalComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        UIModule,\n        SharedSpacesModule,\n        SharedUsersModule,\n        MatChipsModule,\n        RouterModule.forChild(ROUTES),\n    ],\n})\nexport class POIManagerModule {}\n"],"x_google_ignoreList":[]}