{"version":3,"file":"apps_workplace_src_app_landing_landing_module_ts.js","mappings":"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","names":["LandingStateService","BaseClass","constructor","_calendar","_org","super","this","BehaviorSubject","_free_spaces","asObservable","_upcoming_events","_contacts","_options","pipe","debounceTime","switchMap","search","searchStaff","of","catchError","_","shareReplay","_level_occupancy","init","n","initialised","first","toPromise","subscription","active_building","filter","bld","subscribe","updateBuildingMetadata","sys_id","binding","getModule","listen","d","updateOccupancy","bind","setOptions","options","next","getValue","pollFreeSpaces","delay","updateFreeSpaces","interval","stopPollingFreeSpaces","clearInterval","pollUpcomingEvents","updateUpcomingEvents","stopPollingUpcomingEvents","updateContacts","metadata","showMetadata","currentUser","id","details","Array","map","i","User","addContact","user","users","push","unique","updateMetadata","name","description","removeContact","u","email","levels","sort","a","b","recommendation","building","period_start","Math","floor","Date","valueOf","period_end","endOfDay","list","freeBusy","zone_ids","space","availability","length","find","status","capacity","events","queryEvents","calendars","occupancy","module","sys","index","_occupancy_binding","unbind","value","Object","keys","key","recommendation_factor","levelWithID","i0","factory","LandingAvailabilityComponent","_state","free_spaces","level_occupancy","ngOnInit","ngOnDestroy","selectors","LandingColleaguesComponent","contacts","search_results","s","LandingUpcomingComponent","upcoming_events","type","event","Booking","trackByFn","item","ROUTES","path","component","LandingComponent","date","startOfMinute","time","now","AppLandingModule","CommonModule","SharedComponentModule","RouterModule"],"sourceRoot":"webpack:///","sources":["./apps/workplace/src/app/landing/landing-state.service.ts","./apps/workplace/src/app/landing/landing-availability.component.ts","./apps/workplace/src/app/landing/landing-colleagues.component.ts","./apps/workplace/src/app/landing/landing-upcoming.component.ts","./apps/workplace/src/app/landing/landing.module.ts","./apps/workplace/src/app/landing/landing.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n    getModule,\n    PlaceMetadata,\n    PlaceVariableBinding,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay } from 'date-fns';\n\nimport { BaseClass, currentUser, HashMap, unique } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { searchStaff, User } from '@placeos/users';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { CalendarService } from '@placeos/calendar';\n\nexport interface LandingOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LandingStateService extends BaseClass {\n    private _options = new BehaviorSubject<LandingOptions>({});\n    /**  */\n    private _free_spaces = new BehaviorSubject<Space[]>([]);\n    /**  */\n    private _upcoming_events = new BehaviorSubject<CalendarEvent[]>([]);\n    /**  */\n    private _contacts = new BehaviorSubject<User[]>([]);\n    /**  */\n    private _level_occupancy = new BehaviorSubject<BuildingLevel[]>([]);\n    /**  */\n    private _occupancy_binding: PlaceVariableBinding;\n    /**  */\n    public free_spaces = this._free_spaces.asObservable();\n    /**  */\n    public upcoming_events = this._upcoming_events.asObservable();\n    /**  */\n    public contacts = this._contacts.asObservable();\n    /**  */\n    public options = this._options.asObservable();\n\n    public readonly search_results = this._options.pipe(\n        debounceTime(500),\n        switchMap(({ search }) => (search ? searchStaff(search) : of([]))),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n    /**  */\n    public level_occupancy = this._level_occupancy.asObservable();\n\n    constructor(\n        private _calendar: CalendarService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'building',\n            this._org.active_building\n                .pipe(filter((bld) => !!bld))\n                .subscribe(() => this.updateBuildingMetadata())\n        );\n        let sys_id = this._org.binding('area_management');\n        if (!sys_id) return;\n        const binding = getModule(sys_id, 'AreaManagement').binding('overview');\n        binding.listen().subscribe((d) => this.updateOccupancy(d || {}));\n        binding.bind();\n    }\n\n    public setOptions(options: Partial<LandingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public pollFreeSpaces(delay: number = 10 * 1000) {\n        this.updateFreeSpaces();\n        this.interval('free_spaces', () => this.updateFreeSpaces(), delay);\n    }\n\n    public stopPollingFreeSpaces() {\n        this.clearInterval('free_spaces');\n    }\n\n    public pollUpcomingEvents(delay: number = 10 * 1000) {\n        this.updateUpcomingEvents();\n        this.interval(\n            'upcoming_events',\n            () => this.updateUpcomingEvents(),\n            delay\n        );\n    }\n\n    public stopPollingUpcomingEvents() {\n        this.clearInterval('upcoming_events');\n    }\n\n    public async updateContacts() {\n        const metadata: PlaceMetadata = (await showMetadata(\n            currentUser().id,\n            'contacts'\n        ).toPromise()) as any;\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async addContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users.push(user);\n        users = unique(users, 'email');\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async removeContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users = users.filter((u) => u.email !== user.email);\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    private async updateOccupancy(map: HashMap<{ recommendation: number }>) {\n        const levels = [...this._org.levels];\n        levels.sort(\n            (a, b) => map[a.id]?.recommendation - map[b.id]?.recommendation\n        );\n        this._level_occupancy.next(levels);\n    }\n\n    private async updateFreeSpaces() {\n        if (!this._org.building) return;\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const list = await this._calendar\n            .freeBusy({\n                period_start,\n                period_end,\n                zone_ids: this._org.building.id,\n            })\n            .pipe(\n                map((_) =>\n                    _.filter(\n                        (space) =>\n                            !space.availability.length ||\n                            space.availability.find((_) => _.status !== 'busy')\n                    )\n                )\n            )\n            .toPromise();\n        list.sort((a, b) => a.capacity - b.capacity);\n        this._free_spaces.next(list);\n    }\n\n    private async updateUpcomingEvents() {\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const events = await queryEvents({\n            period_start,\n            period_end,\n            calendars: currentUser().email,\n        }).toPromise();\n        this._upcoming_events.next(events);\n    }\n\n    private async updateBuildingMetadata() {\n        const building = this._org.building;\n        const metadata = await showMetadata(\n            building.id,\n            'bindings'\n        ).toPromise();\n        if (!(metadata.details as HashMap).occupancy) return;\n        const details = (metadata.details as HashMap).occupancy;\n        const module = getModule(details.sys, details.module, details.index);\n        if (!module) return;\n        if (this._occupancy_binding) {\n            this._occupancy_binding.unbind();\n        }\n        this._occupancy_binding = module.binding('occupancy');\n        this._occupancy_binding.bind();\n        this.subscription(\n            'occupancy_binding',\n            this._occupancy_binding.listen().subscribe((value) => {\n                const levels = Object.keys(value).map((key) => ({\n                    id: key,\n                    ...value[key],\n                }));\n                levels.sort(\n                    (a, b) => a.recommendation_factor - b.recommendation_factor\n                );\n                this._level_occupancy.next(\n                    levels.map((i) => this._org.levelWithID([i.id]))\n                );\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { LandingStateService } from './landing-state.service';\n\n@Component({\n    selector: 'landing-availability',\n    template: `\n        <div class=\"py-2\">\n            <div class=\"sm:text-lg font-medium mb-2 sm:mb-4 px-4\">Available Now</div>\n            <div class=\"text-sm sm:text-base px-4\">Spaces</div>\n            <div class=\"w-full overflow-auto flex items-center space-x-4 px-4 py-2\">\n                <button\n                    matRipple\n                    *ngFor=\"let lvl of levels_free | async\"\n                    class=\"flex items-center h-24 min-w-[12.5rem] rounded-lg bg-white dark:bg-neutral-800 shadow p-4 space-x-2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ level: lvl.id }\"\n                >\n                    <div\n                        class=\"min-w-[4.5rem] h-[4.5rem] rounded bg-gray-200 dark:bg-neutral-700\"\n                    ></div>\n                    <div class=\"text-left\">\n                        <div class=\"max-w-full truncate px-1.5\">\n                        {{ lvl.display_name || lvl.name }}\n                        </div>\n                        <div class=\"max-w-full truncate text-sm opacity-60 flex items-center\">\n                            <app-icon class=\"text-blue-500 text-lg\">place</app-icon>\n                            <span>Unknown Building</span>\n                        </div>\n                    </div>\n                </button>\n                <span\n                    *ngIf=\"!(levels_free | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                >\n                    No free spaces\n                </span>\n            </div>\n            <div class=\"text-sm sm:text-base my-2 px-4\">Rooms</div>\n            <div class=\"w-full overflow-auto flex items-center space-x-4 px-4 py-2\">\n                <button\n                    matRipple\n                    *ngFor=\"let space of space_list | async\"\n                    class=\"flex items-center h-24 min-w-[12.5rem] rounded-lg bg-white dark:bg-neutral-800 shadow p-4 space-x-2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ space: space.email }\"\n                >\n                    <div\n                        class=\"min-w-[4.5rem] h-[4.5rem] rounded bg-gray-200 dark:bg-neutral-700\"\n                    ></div>\n                    <div class=\"text-left\">\n                        <div class=\"max-w-full truncate px-1.5\">\n                            {{ space.display_name || space.name }}\n                        </div>\n                        <div class=\"max-w-full truncate text-sm opacity-60 flex items-center\">\n                            <app-icon class=\"text-blue-500 text-lg\">place</app-icon>\n                            <span>{{ space.level.display_name || space.level.name }}</span>\n                        </div>\n                    </div>\n                </button>\n                <span\n                    *ngIf=\"!(space_list | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                >\n                    No free rooms\n                </span>\n            </div>\n        </div>\n    `,\n    styles: [`\n        * {\n            flex-shrink: 0;\n        }\n    `],\n})\nexport class LandingAvailabilityComponent {\n    public readonly space_list = this._state.free_spaces;\n    public readonly levels_free = this._state.level_occupancy;\n\n    constructor(private _state: LandingStateService) {}\n\n    public async ngOnInit() {\n        this._state.pollFreeSpaces();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingFreeSpaces();\n    }\n}\n","import { Component } from '@angular/core';\nimport { LandingStateService } from './landing-state.service';\n\n@Component({\n    selector: 'landing-colleagues',\n    template: `\n        <div\n            class=\"flex flex-col w-[18rem] h-full overflow-hidden bg-white dark:bg-neutral-700 border-r border-gray-200 dark:border-neutral-500\"\n        >\n            <div class=\"flex items-center justify-between px-4 py-2\">\n                <h2 class=\"font-medium\">Colleagues</h2>\n                <button mat-button class=\"inverse\">Add</button>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full space-y-4 overflow-auto pt-4\">\n                <ng-container *ngIf=\"(contacts | async)?.length; else empty_state\">\n                <div\n                    class=\"flex items-center px-4 space-x-4\"\n                    *ngFor=\"let user of contacts | async\"\n                >\n                    <div class=\"text-xl relative\">\n                        <a-user-avatar [user]=\"user\"></a-user-avatar>\n                        <div\n                            class=\"rounded-full h-3 w-3 border border-white dark:border-neutral-400 absolute bottom-1 right-1\"\n                            [class.bg-error]=\"!user.location\"\n                            [class.bg-success]=\"user.location\"\n                        ></div>\n                    </div>\n                    <div class=\"leading-tight\">\n                        <div class=\"truncate\">{{ user.name }}</div>\n                        <div class=\"text-sm truncate\">\n                            {{ user.organisation }}\n                        </div>\n                        <div class=\"text-xs opacity-60 truncate\">\n                            {{ user.location }}\n                        </div>\n                    </div>\n                </div>\n</ng-container>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div class=\"w-full h-full flex flex-col items-center justify-center space-y-2 p-8\">\n                <img src=\"assets/icons/no-contacts.svg\" />\n                <p class=\"opacity-60 text-sm text-center\">You have no colleagues added. Please select the \"Add\" button to get started.</p>\n            </div>\n        </ng-template>\n    `,\n})\nexport class LandingColleaguesComponent {\n    public readonly contacts = this._state.contacts;\n\n    public readonly search_results = this._state.search_results;\n\n    public readonly addUser = (u) => this._state.addContact(u);\n\n    public readonly removeUser = (u) => this._state.removeContact(u);\n\n    public readonly updateSearch = (s) => this._state.setOptions({ search: s });\n\n    constructor(private _state: LandingStateService) {}\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Booking } from '@placeos/bookings';\nimport { CalendarEvent } from '@placeos/events';\nimport { LandingStateService } from './landing-state.service';\n\n@Component({\n    selector: 'landing-upcoming',\n    template: `\n        <div class=\"py-2\">\n            <div class=\"flex items-center justify-between mb-2 sm:mb-4 px-4\">\n                <div class=\"sm:text-lg font-medium\">Your Bookings</div>\n                <a\n                    button\n                    mat-button\n                    class=\"inverse hidden sm:block\"\n                    [routerLink]=\"['/your-bookings']\"\n                >\n                    View All\n                </a>\n                <a\n                    class=\"inverse block sm:hidden text-blue-500 underline relative top-8\"\n                    [routerLink]=\"['/your-bookings']\"\n                >\n                    View All\n                </a>\n            </div>\n            <div class=\"space-y-4 px-4\">\n                <ng-container\n                    *ngIf=\"(upcoming_events | async)?.length; else empty_state\"\n                >\n                    <ng-container\n                        *ngFor=\"\n                            let event of upcoming_events | async | slice: 0:3; trackBy: trackByFn\n                        \"\n                    >\n                        <ng-container [ngSwitch]=\"type(event)\">\n                            <event-card\n                                *ngSwitchCase=\"'event'\"\n                                [event]=\"event\"\n                                [show_day]=\"true\"\n                            ></event-card>\n                            <booking-card\n                                *ngSwitchCase=\"'booking'\"\n                                [booking]=\"booking\"\n                                [show_day]=\"true\"\n                            ></booking-card>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div\n                class=\"w-full p-8 flex flex-col items-center justify-center space-y-4\"\n            >\n                <img src=\"assets/img/no-events.svg\" class=\"mr-4\" />\n                <p class=\"opacity-30\">You have no upcoming bookings</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LandingUpcomingComponent implements OnInit, OnDestroy {\n    public readonly upcoming_events = this._state.upcoming_events;\n\n    public type(event: CalendarEvent | Booking) {\n        return event instanceof Booking ? 'booking' : 'event';\n    }\n\n    constructor(private _state: LandingStateService) {}\n\n    public ngOnInit() {\n        this._state.pollUpcomingEvents();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingUpcomingEvents();\n    }\n\n    public trackByFn(index: number, item: any) {\n        return item?.id;\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { SharedComponentModule } from \"../components/shared.module\";\nimport { LandingAvailabilityComponent } from \"./landing-availability.component\";\nimport { LandingColleaguesComponent } from \"./landing-colleagues.component\";\nimport { LandingUpcomingComponent } from \"./landing-upcoming.component\";\nimport { LandingComponent } from \"./landing.component\";\n\nconst COMPONENTS = [\n    LandingComponent,\n    LandingColleaguesComponent,\n    LandingAvailabilityComponent,\n    LandingUpcomingComponent\n]\n\nconst ROUTES = [\n    { path: '', component: LandingComponent }\n]\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        SharedComponentModule,\n        RouterModule.forChild(ROUTES)\n    ]\n})\nexport class AppLandingModule {}\n","import { Component } from '@angular/core';\nimport { currentUser } from '@placeos/common';\nimport { startOfMinute } from 'date-fns';\n\n@Component({\n    selector: 'app-dashboard',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex flex-1 h-1/2 bg-[#E5E5E5] dark:bg-zinc-700\">\n            <landing-colleagues\n                class=\"h-full hidden sm:block\"\n            ></landing-colleagues>\n            <div class=\"flex-1 h-full w-1/2 sm:px-4 overflow-auto\">\n                <header class=\"sticky top-0 z-50 bg-[#ECF0F3] dark:bg-neutral-800 px-4 rounded-b flex items-center justify-between overflow-hidden\">\n                    <div class=\"\">\n                        <div class=\"sm:text-xl font-medium\">Hello {{ user?.name }},</div>\n                        <div date class=\"text-sm sm:text-base\">{{ date | date:'fullDate' }}</div>\n                        <div class=\"text-sm sm:text-base\">Sydney Australia</div>\n                    </div>\n                    <div class=\"h-32 pt-4\">\n                        <img src=\"assets/img/landing.svg\" />\n                    </div>\n                </header>\n                <landing-availability></landing-availability>\n                <div class=\"mx-4 w-[calc(100%-2rem)] h-px bg-gray-300 mb-2\" ></div>\n                <landing-upcoming></landing-upcoming>\n            </div>\n        </div>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n        `,\n    ],\n})\nexport class LandingComponent {\n    public time: number;\n\n    public get date() {\n        return startOfMinute(this.time || Date.now());\n    }\n\n    public get user() {\n        return currentUser();\n    }\n}\n"]}