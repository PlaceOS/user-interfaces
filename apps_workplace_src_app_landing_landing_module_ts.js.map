{"version":3,"sources":["./apps/workplace/src/app/landing/booking-card.component.ts","./apps/workplace/src/app/landing/event-card.component.ts","./apps/workplace/src/app/landing/landing-state.service.ts","./apps/workplace/src/app/landing/landing-availability.component.ts","./apps/workplace/src/app/landing/landing-colleagues.component.ts","./apps/workplace/src/app/landing/landing-upcoming.component.ts","./apps/workplace/src/app/landing/landing.module.ts","./apps/workplace/src/app/landing/landing.component.ts"],"names":["BookingCardComponent","EventCardComponent","date","this","event","Date","now","isSameDay","format","start","duration","end","addMinutes","dur","formatDuration","hours","Math","floor","minutes","replace","LandingStateService","_calendar","_org","super","_options","BehaviorSubject","_free_spaces","_upcoming_events","_contacts","_level_occupancy","free_spaces","asObservable","upcoming_events","contacts","options","search_results","pipe","debounceTime","switchMap","search","of","catchError","_","shareReplay","level_occupancy","init","initialised","first","toPromise","subscription","active_building","filter","bld","subscribe","updateBuildingMetadata","organisation","bindings","area_management","binding","listen","d","updateOccupancy","bind","next","getValue","delay","updateFreeSpaces","interval","clearInterval","updateUpcomingEvents","metadata","id","details","Array","map","i","user","users","push","name","description","u","email","levels","sort","a","b","recommendation","building","period_start","valueOf","period_end","endOfDay","list","freeBusy","zone_ids","space","availability","length","find","status","capacity","events","calendars","occupancy","module","sys","index","_occupancy_binding","unbind","value","Object","keys","key","recommendation_factor","levelWithID","LandingAvailabilityComponent","_state","space_list","levels_free","pollFreeSpaces","stopPollingFreeSpaces","LandingColleaguesComponent","addUser","addContact","removeUser","removeContact","updateSearch","s","setOptions","LandingUpcomingComponent","pollUpcomingEvents","stopPollingUpcomingEvents","ROUTES","path","component","LandingComponent","startOfMinute","AppLandingModule"],"mappings":"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","file":"apps_workplace_src_app_landing_landing_module_ts.js","sourcesContent":["import { Component, Input } from \"@angular/core\";\nimport { Booking } from \"@placeos/bookings\";\n\n@Component({\n    selector: 'booking-card',\n    template: `\n        <div class=\"w-full bg-white rounded-lg shadow p-4\">\n\n        </div>\n    `,\n    styles: [`\n        :host {\n            display: block;\n            width: 100%;\n        }\n    `]\n})\nexport class BookingCardComponent {\n    @Input() public booking: Booking;\n}\n","import { Component, Input } from '@angular/core';\nimport { CalendarEvent } from '@placeos/events';\nimport { addMinutes, format, formatDuration, isSameDay } from 'date-fns';\n\n@Component({\n    selector: 'event-card',\n    template: `\n        <h4 class=\"mb-2\">{{ day }}, {{ event?.date | date: 'h:mm a (z)' }}</h4>\n        <a\n            matRippleColor\n            class=\"w-full\"\n            [routerLink]=\"['/schedule', 'view', event?.id, 'event']\"\n        >\n            <div class=\"w-full bg-white rounded shadow py-2 relative\">\n                <h4 class=\"px-2\">{{ event?.title }}</h4>\n                <div class=\"flex m-2\">\n                    <div\n                        class=\"flex items-center bg-gray-200 rounded-2xl px-2 py-1 text-sm space-x-2 pr-2 font-medium\"\n                    >\n                        <div\n                            class=\"rounded-full h-4 w-4 bg-black/20 flex items-center justify-center text-white\"\n                        >\n                            <app-icon>done</app-icon>\n                        </div>\n                        <div class=\"pr-2\">{{ period }}</div>\n                    </div>\n                </div>\n                <div\n                    class=\"flex flex-wrap flex-col sm:flex-row sm:divide-x divide-gray-200 py-2 space-y-2 sm:space-y-0\"\n                >\n                    <div class=\"flex items-center px-2\">\n                        <app-icon>meeting_room</app-icon>\n                        <div class=\"mx-2 truncate\">\n                            {{\n                                event?.space?.level?.display_name ||\n                                    event?.space?.level?.name\n                            }},\n                            {{\n                                event?.space?.display_name || event?.space?.name\n                            }}\n                        </div>\n                    </div>\n                    <div class=\"flex items-center px-2\" *ngIf=\"location\">\n                        <app-icon>place</app-icon>\n                        <div class=\"mx-2 truncate\">{{ location }}</div>\n                    </div>\n                    <div class=\"flex items-center px-2\">\n                        <app-icon>person_outline</app-icon>\n                        <div class=\"mx-2\">\n                            {{\n                                event?.organiser?.name ||\n                                    event?.organiser?.email\n                            }}\n                        </div>\n                    </div>\n                    <div\n                        class=\"flex items-center px-2\"\n                        *ngIf=\"event?.ext('catering')?.length\"\n                    >\n                        <app-icon>restaurant</app-icon>\n                        <div class=\"mx-2\">Catered</div>\n                    </div>\n                    <div class=\"flex items-center px-2\">\n                        <app-icon>people</app-icon>\n                        <div class=\"mx-2\">\n                            {{ event?.attendees?.length }}\n                            {{\n                                event?.attendees?.length === 1\n                                    ? 'Person'\n                                    : 'People'\n                            }}\n                        </div>\n                    </div>\n                </div>\n                <app-icon\n                    class=\"absolute top-1/2 right-1 text-4xl -translate-y-1/2\"\n                >\n                    chevron_right\n                </app-icon>\n                <div\n                    class=\"absolute bottom-2 right-2 sm:bottom-auto sm:top-2 flex items-center pr-4\"\n                    *ngIf=\"event?.attendees?.length\"\n                >\n                    <div class=\"h-10 w-6\"\n                        *ngFor=\"\n                            let user of event?.attendees\n                                | slice\n                                    : 0\n                                    : (event?.attendees?.length === 6 ? 6 : 5)\n                        \"\n                    >\n                        <a-user-avatar [user]=\"user\"></a-user-avatar>\n                    </div>\n                    <div class=\"h-10 w-6\" *ngIf=\"event?.attendees?.length > 6\">\n                        <div class=\"bg-secondary rounded-full h-10 w-10 border-2 border-white flex items-center justify-center text-white\">\n                            +{{ event?.attendees?.length - 5 }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </a>\n    `,\n    styles: [\n        `\n            :host {\n                display: block;\n                width: 100%;\n            }\n        `,\n    ],\n})\nexport class EventCardComponent {\n    @Input() public event: CalendarEvent;\n\n    public get day() {\n        const date = this.event?.date || Date.now();\n        const is_today = isSameDay(Date.now(), date);\n        return `${is_today ? 'Today' : format(date, 'EEEE')}`;\n    }\n\n    public get location() {\n        return '';\n    }\n\n    public get period() {\n        const start = this.event?.date || Date.now();\n        const duration = this.event?.duration || 60;\n        const end = addMinutes(start, duration);\n        const dur = formatDuration({\n            hours: Math.floor(duration / 60),\n            minutes: duration % 60,\n        })\n            .replace(' hour', 'hr')\n            .replace(' minute', 'min');\n        return `${format(start, 'h:mm a')} - ${format(end, 'h:mm a')} (${dur})`;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    getModule,\n    PlaceMetadata,\n    PlaceVariableBinding,\n    showMetadata,\n    updateMetadata,\n} from '@placeos/ts-client';\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    filter,\n    first,\n    map,\n    shareReplay,\n    switchMap,\n} from 'rxjs/operators';\nimport { endOfDay } from 'date-fns';\n\nimport { BaseClass, currentUser, HashMap, unique } from '@placeos/common';\nimport { Space } from '@placeos/spaces';\nimport { CalendarEvent, queryEvents } from '@placeos/events';\nimport { searchStaff, User } from '@placeos/users';\nimport { BuildingLevel, OrganisationService } from '@placeos/organisation';\nimport { CalendarService } from '@placeos/calendar';\n\nexport interface LandingOptions {\n    search?: string;\n}\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class LandingStateService extends BaseClass {\n    private _options = new BehaviorSubject<LandingOptions>({});\n    /**  */\n    private _free_spaces = new BehaviorSubject<Space[]>([]);\n    /**  */\n    private _upcoming_events = new BehaviorSubject<CalendarEvent[]>([]);\n    /**  */\n    private _contacts = new BehaviorSubject<User[]>([]);\n    /**  */\n    private _level_occupancy = new BehaviorSubject<BuildingLevel[]>([]);\n    /**  */\n    private _occupancy_binding: PlaceVariableBinding;\n    /**  */\n    public free_spaces = this._free_spaces.asObservable();\n    /**  */\n    public upcoming_events = this._upcoming_events.asObservable();\n    /**  */\n    public contacts = this._contacts.asObservable();\n    /**  */\n    public options = this._options.asObservable();\n\n    public readonly search_results = this._options.pipe(\n        debounceTime(500),\n        switchMap(({ search }) => (search ? searchStaff(search) : of([]))),\n        catchError((_) => []),\n        shareReplay(1)\n    );\n    /**  */\n    public level_occupancy = this._level_occupancy.asObservable();\n\n    constructor(\n        private _calendar: CalendarService,\n        private _org: OrganisationService\n    ) {\n        super();\n        this.init();\n    }\n\n    public async init() {\n        await this._org.initialised.pipe(first((_) => _)).toPromise();\n        this.subscription(\n            'building',\n            this._org.active_building\n                .pipe(filter((bld) => !!bld))\n                .subscribe(() => this.updateBuildingMetadata())\n        );\n        if (!this._org.organisation.bindings.area_management) return;\n        const binding = getModule(\n            this._org.organisation.bindings.area_management,\n            'AreaManagement'\n        ).binding('overview');\n        binding.listen().subscribe((d) => this.updateOccupancy(d || {}));\n        binding.bind();\n    }\n\n    public setOptions(options: Partial<LandingOptions>) {\n        this._options.next({ ...this._options.getValue(), ...options });\n    }\n\n    public pollFreeSpaces(delay: number = 10 * 1000) {\n        this.updateFreeSpaces();\n        this.interval('free_spaces', () => this.updateFreeSpaces(), delay);\n    }\n\n    public stopPollingFreeSpaces() {\n        this.clearInterval('free_spaces');\n    }\n\n    public pollUpcomingEvents(delay: number = 10 * 1000) {\n        this.updateUpcomingEvents();\n        this.interval(\n            'upcoming_events',\n            () => this.updateUpcomingEvents(),\n            delay\n        );\n    }\n\n    public stopPollingUpcomingEvents() {\n        this.clearInterval('upcoming_events');\n    }\n\n    public async updateContacts() {\n        const metadata: PlaceMetadata = (await showMetadata(\n            currentUser().id,\n            'contacts'\n        ).toPromise()) as any;\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async addContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users.push(user);\n        users = unique(users, 'email');\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    public async removeContact(user: User) {\n        let users = [...this._contacts.getValue()];\n        users = users.filter((u) => u.email !== user.email);\n        const metadata = await updateMetadata(currentUser().id, {\n            name: 'contacts',\n            description: 'Contacts for the User',\n            details: users,\n        }).toPromise();\n        const list = metadata.details instanceof Array ? metadata.details : [];\n        this._contacts.next(list.map((i) => new User(i)));\n    }\n\n    private async updateOccupancy(map: HashMap<{ recommendation: number }>) {\n        const levels = [...this._org.levels];\n        levels.sort(\n            (a, b) => map[a.id]?.recommendation - map[b.id]?.recommendation\n        );\n        this._level_occupancy.next(levels);\n    }\n\n    private async updateFreeSpaces() {\n        if (!this._org.building) return;\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const list = await this._calendar\n            .freeBusy({\n                period_start,\n                period_end,\n                zone_ids: this._org.building.id,\n            })\n            .pipe(\n                map((_) =>\n                    _.filter(\n                        (space) =>\n                            !space.availability.length ||\n                            space.availability.find((_) => _.status !== 'busy')\n                    )\n                )\n            )\n            .toPromise();\n        list.sort((a, b) => a.capacity - b.capacity);\n        this._free_spaces.next(list);\n    }\n\n    private async updateUpcomingEvents() {\n        const period_start = Math.floor(new Date().valueOf() / 1000);\n        const period_end = Math.floor(endOfDay(new Date()).valueOf() / 1000);\n        const events = await queryEvents({\n            period_start,\n            period_end,\n            calendars: currentUser().email,\n        }).toPromise();\n        this._upcoming_events.next(events);\n    }\n\n    private async updateBuildingMetadata() {\n        const building = this._org.building;\n        const metadata = await showMetadata(building.id, 'bindings').toPromise();\n        if (!(metadata.details as HashMap).occupancy) return;\n        const details = (metadata.details as HashMap).occupancy;\n        const module = getModule(details.sys, details.module, details.index);\n        if (!module) return;\n        if (this._occupancy_binding) {\n            this._occupancy_binding.unbind();\n        }\n        this._occupancy_binding = module.binding('occupancy');\n        this._occupancy_binding.bind();\n        this.subscription(\n            'occupancy_binding',\n            this._occupancy_binding.listen().subscribe((value) => {\n                const levels = Object.keys(value).map((key) => ({\n                    id: key,\n                    ...value[key],\n                }));\n                levels.sort(\n                    (a, b) => a.recommendation_factor - b.recommendation_factor\n                );\n                this._level_occupancy.next(\n                    levels.map((i) => this._org.levelWithID([i.id]))\n                );\n            })\n        );\n    }\n}\n","import { Component } from '@angular/core';\nimport { LandingStateService } from './landing-state.service';\n\n@Component({\n    selector: 'landing-availability',\n    template: `\n        <div class=\"py-2\">\n            <div class=\"sm:text-lg font-medium mb-2 sm:mb-4 px-4\">Available Now</div>\n            <div class=\"text-sm sm:text-base px-4\">Spaces</div>\n            <div class=\"w-full overflow-auto flex items-center space-x-4 px-4 py-2\">\n                <button\n                    matRipple\n                    *ngFor=\"let lvl of levels_free | async\"\n                    class=\"flex items-center h-24 min-w-[12.5rem] rounded-lg bg-white shadow p-4 space-x-2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ level: lvl.id }\"\n                >\n                    <div\n                        class=\"min-w-[4.5rem] h-[4.5rem] rounded bg-gray-200\"\n                    ></div>\n                    <div class=\"text-left\">\n                        <div class=\"max-w-full truncate px-1.5\">\n                        {{ lvl.display_name || lvl.name }}\n                        </div>\n                        <div class=\"max-w-full truncate text-sm opacity-60 flex items-center\">\n                            <app-icon class=\"text-blue-500 text-lg\">place</app-icon>\n                            <span>Unknown Building</span>\n                        </div>\n                    </div>\n                </button>\n                <span\n                    *ngIf=\"!(levels_free | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                >\n                    No free spaces\n                </span>\n            </div>\n            <div class=\"text-sm sm:text-base my-2 px-4\">Rooms</div>\n            <div class=\"w-full overflow-auto flex items-center space-x-4 px-4 py-2\">\n                <button\n                    matRipple\n                    *ngFor=\"let space of space_list | async\"\n                    class=\"flex items-center h-24 min-w-[12.5rem] rounded-lg bg-white shadow p-4 space-x-2\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ space: space.email }\"\n                >\n                    <div\n                        class=\"min-w-[4.5rem] h-[4.5rem] rounded bg-gray-200\"\n                    ></div>\n                    <div class=\"text-left\">\n                        <div class=\"max-w-full truncate px-1.5\">\n                            {{ space.display_name || space.name }}\n                        </div>\n                        <div class=\"max-w-full truncate text-sm opacity-60 flex items-center\">\n                            <app-icon class=\"text-blue-500 text-lg\">place</app-icon>\n                            <span>{{ space.level.display_name || space.level.name }}</span>\n                        </div>\n                    </div>\n                </button>\n                <span\n                    *ngIf=\"!(space_list | async).length\"\n                    class=\"text-dark-fade text-sm mb-2\"\n                >\n                    No free rooms\n                </span>\n            </div>\n        </div>\n    `,\n    styles: [`\n        * {\n            flex-shrink: 0;\n        }\n    `],\n})\nexport class LandingAvailabilityComponent {\n    public readonly space_list = this._state.free_spaces;\n    public readonly levels_free = this._state.level_occupancy;\n\n    constructor(private _state: LandingStateService) {}\n\n    public async ngOnInit() {\n        this._state.pollFreeSpaces();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingFreeSpaces();\n    }\n}\n","import { Component } from '@angular/core';\nimport { LandingStateService } from './landing-state.service';\n\n@Component({\n    selector: 'dashboard-colleagues',\n    template: `\n        <div\n            class=\"flex flex-col w-[18rem] h-full overflow-hidden bg-white border-r border-gray-200\"\n        >\n            <div class=\"flex items-center justify-between px-4 py-2\">\n                <h2 class=\"font-medium\">Colleagues</h2>\n                <button mat-button class=\"inverse\">Add</button>\n            </div>\n            <div class=\"flex-1 h-1/2 w-full space-y-4 overflow-auto pt-4\">\n                <div\n                    class=\"flex items-center px-4 space-x-4\"\n                    *ngFor=\"let user of contacts | async\"\n                >\n                    <div class=\"text-xl relative\">\n                        <a-user-avatar [user]=\"user\"></a-user-avatar>\n                        <div\n                            class=\"rounded-full h-3 w-3 border border-white absolute bottom-1 right-1\"\n                            [class.bg-error]=\"!user.location\"\n                            [class.bg-success]=\"user.location\"\n                        ></div>\n                    </div>\n                    <div class=\"leading-tight\">\n                        <div class=\"truncate\">{{ user.name }}</div>\n                        <div class=\"text-sm truncate\">\n                            {{ user.organisation }}\n                        </div>\n                        <div class=\"text-xs opacity-60 truncate\">\n                            {{ user.location }}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `,\n})\nexport class LandingColleaguesComponent {\n    public readonly contacts = this._state.contacts;\n\n    public readonly search_results = this._state.search_results;\n\n    public readonly addUser = (u) => this._state.addContact(u);\n\n    public readonly removeUser = (u) => this._state.removeContact(u);\n\n    public readonly updateSearch = (s) => this._state.setOptions({ search: s });\n\n    constructor(private _state: LandingStateService) {}\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Booking } from '@placeos/bookings';\nimport { CalendarEvent } from '@placeos/events';\nimport { LandingStateService } from './landing-state.service';\n\n@Component({\n    selector: 'landing-upcoming',\n    template: `\n        <div class=\"py-2\">\n            <div class=\"flex items-center justify-between mb-2 sm:mb-4 px-4\">\n                <div class=\"sm:text-lg font-medium\">Your Bookings</div>\n                <a\n                    button\n                    mat-button\n                    class=\"inverse hidden sm:block\"\n                    [routerLink]=\"['/schedule']\"\n                >\n                    View All\n                </a>\n                <a\n                    class=\"inverse block sm:hidden text-blue-500 underline relative top-8\"\n                    [routerLink]=\"['/schedule']\"\n                >\n                    View All\n                </a>\n            </div>\n            <div class=\"space-y-4 px-4\">\n                <ng-container\n                    *ngIf=\"(upcoming_events | async)?.length; else empty_state\"\n                >\n                    <ng-container\n                        *ngFor=\"\n                            let event of upcoming_events | async | slice: 0:3\n                        \"\n                    >\n                        <ng-container [ngSwitch]=\"type(event)\">\n                            <event-card\n                                *ngSwitchCase=\"'event'\"\n                                [event]=\"event\"\n                            ></event-card>\n                            <booking-card\n                                *ngSwitchCase=\"'booking'\"\n                                [booking]=\"booking\"\n                            ></booking-card>\n                        </ng-container>\n                    </ng-container>\n                </ng-container>\n            </div>\n        </div>\n        <ng-template #empty_state>\n            <div\n                class=\"w-full p-8 flex flex-col items-center justify-center space-y-4\"\n            >\n                <img src=\"assets/img/no-events.svg\" class=\"mr-4\" />\n                <p class=\"opacity-30\">You have no upcoming bookings</p>\n            </div>\n        </ng-template>\n    `,\n    styles: [``],\n})\nexport class LandingUpcomingComponent implements OnInit, OnDestroy {\n    public readonly upcoming_events = this._state.upcoming_events;\n\n    public type(event: CalendarEvent | Booking) {\n        return event instanceof Booking ? 'booking' : 'event';\n    }\n\n    constructor(private _state: LandingStateService) {}\n\n    public ngOnInit() {\n        this._state.pollUpcomingEvents();\n    }\n\n    public ngOnDestroy() {\n        this._state.stopPollingUpcomingEvents();\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { SharedComponentModule } from \"../components/shared.module\";\nimport { BookingCardComponent } from \"./booking-card.component\";\nimport { EventCardComponent } from \"./event-card.component\";\nimport { LandingAvailabilityComponent } from \"./landing-availability.component\";\nimport { LandingColleaguesComponent } from \"./landing-colleagues.component\";\nimport { LandingUpcomingComponent } from \"./landing-upcoming.component\";\nimport { LandingComponent } from \"./landing.component\";\n\nconst COMPONENTS = [\n    LandingComponent,\n    LandingColleaguesComponent,\n    LandingAvailabilityComponent,\n    LandingUpcomingComponent,\n    EventCardComponent,\n    BookingCardComponent\n]\n\nconst ROUTES = [\n    { path: '', component: LandingComponent }\n]\n\n@NgModule({\n    declarations: [...COMPONENTS],\n    imports: [\n        CommonModule,\n        SharedComponentModule,\n        RouterModule.forChild(ROUTES)\n    ]\n})\nexport class AppLandingModule {}\n","import { Component } from '@angular/core';\nimport { currentUser } from '@placeos/common';\nimport { startOfMinute } from 'date-fns';\n\n@Component({\n    selector: 'app-dashboard',\n    template: `\n        <topbar></topbar>\n        <div class=\"flex flex-1 h-1/2 bg-[#E5E5E5]\">\n            <dashboard-colleagues\n                class=\"h-full hidden sm:block\"\n            ></dashboard-colleagues>\n            <div class=\"flex-1 h-full w-1/2 sm:px-4 overflow-auto\">\n                <header class=\"sticky top-0 z-50 bg-[#ECF0F3] px-4 rounded-b flex items-center justify-between overflow-hidden\">\n                    <div class=\"\">\n                        <div class=\"sm:text-xl font-medium\">Hello {{ user?.name }},</div>\n                        <div class=\"text-sm sm:text-base\">{{ date | date:'fullDate' }}</div>\n                        <div class=\"text-sm sm:text-base\">Sydney Australia</div>\n                    </div>\n                    <div class=\"h-32 pt-4\">\n                        <img src=\"assets/img/landing.svg\" />\n                    </div>\n                </header>\n                <landing-availability></landing-availability>\n                <div class=\"mx-4 w-[calc(100%-2rem)] h-px bg-gray-300 mb-2\" ></div>\n                <landing-upcoming></landing-upcoming>\n            </div>\n        </div>\n        <footer-menu></footer-menu>\n    `,\n    styles: [\n        `\n            :host {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                overflow: hidden;\n                display: flex;\n                flex-direction: column;\n            }\n\n            main {\n                min-height: 50%;\n            }\n        `,\n    ],\n})\nexport class LandingComponent {\n\n    public get date() {\n        return startOfMinute(Date.now());\n    }\n\n    public get user() {\n        return currentUser();\n    }\n}\n"],"sourceRoot":"webpack:///"}