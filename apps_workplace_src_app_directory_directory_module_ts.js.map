{"version":3,"sources":["./apps/workplace/src/app/bookings/space-flow/space-flow.service.ts","./apps/workplace/src/app/directory/user-details.component.ts","./apps/workplace/src/app/directory/user-list.component.ts","./apps/workplace/src/app/directory/directory.module.ts"],"names":["clearEventFormState","sessionStorage","removeItem","localStorage","SpaceFlowService","_calendar","_org","_dialog","super","_event","_form","_filters","_loading_spaces","_loading_event","event","this","asObservable","form","filters","loading_spaces","loading_event","spaces","pipe","next","getValue","value","date","Date","valueOf","period_start","Math","floor","period_end","duration","zones","length","building","id","freeBusy","zone_ids","join","toPromise","then","list","filter","space","capacity","clearState","setEvent","nearestTo","controls","subscription","storeState","name","setValue","ref","open","width","height","data","componentInstance","_","reason","subscribe","attendees","push","metadata","close","setItem","JSON","stringify","toJSON","event_data","getItem","parse","form_data","patchValue","filter_data","markAllAsTouched","organiser","host","email","title","valid","key","invalid","Promise","reject","values","DirectoryUserListItemComponent","_settings","get","LETTERS","split","ROUTES","path","component","DirectoryUserListComponent","user_list","search$","Subject","groupedUsers","search_results$","debounceTime","distinctUntilChanged","switchMap","query","loading","min_search_length","catch","resolve","map","buildGroups","users","sorted","sort","a","b","localeCompare","letter","letters","f","startsWith","DirectoryModule"],"mappings":"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","file":"apps_workplace_src_app_directory_directory_module_ts.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { first, shareReplay, switchMap } from 'rxjs/operators';\nimport { addMinutes, roundToNearestMinutes, isAfter, endOfDay } from 'date-fns';\n\nimport { BaseClass, currentUser, notifyError, unique } from '@placeos/common';\nimport {\n    CalendarEvent,\n    generateEventForm,\n    saveEvent,\n} from '@placeos/events';\nimport { CalendarService } from '@placeos/calendar';\nimport { OrganisationService } from '@placeos/organisation';\nimport { NewUserModalComponent } from '@placeos/users';\nimport { MatDialog } from '@angular/material/dialog';\n\nexport interface EventFormFilters {\n    capacity?: number;\n    zones?: string[];\n}\n\nexport function clearEventFormState(): void {\n    sessionStorage.removeItem('PLACEOS.event');\n    sessionStorage.removeItem('PLACEOS.event_form');\n    localStorage.removeItem('PLACEOS.event_filters');\n}\n\n@Injectable()\nexport class SpaceFlowService extends BaseClass {\n    /** Active event being worked on */\n    private _event = new BehaviorSubject<CalendarEvent>(null);\n    /** Form fields for the current flow */\n    private _form = new BehaviorSubject<FormGroup>(null);\n    /** Form fields for the current flow */\n    private _filters = new BehaviorSubject<EventFormFilters>({});\n    /** Whether space listing is being retrieved */\n    private _loading_spaces = new BehaviorSubject<boolean>(false);\n    /** Whether changes to event are being saved */\n    private _loading_event = new BehaviorSubject<boolean>(false);\n\n    public readonly event = this._event.asObservable();\n    public readonly form = this._form.asObservable();\n    public get event_form() {\n        return this._form.getValue();\n    }\n    public readonly filters = this._filters.asObservable();\n    public readonly loading_spaces = this._loading_spaces.asObservable();\n    public readonly loading_event = this._loading_event.asObservable();\n    public get event_filters() {\n        return this._filters.getValue();\n    }\n    public readonly spaces = this._filters.pipe(\n        switchMap((filters) => {\n            this._loading_spaces.next(true);\n            const form = this._form.getValue().value;\n            if (!form.date) form.date = new Date().valueOf();\n            const period_start = Math.floor(\n                new Date(form.date).valueOf() / 1000\n            );\n            const period_end = Math.floor(\n                addMinutes(new Date(form.date), form.duration || 60).valueOf() /\n                    1000\n            );\n            const zones = filters?.zones?.length\n                ? filters.zones\n                : [this._org.building?.id];\n            return this._calendar\n                .freeBusy({\n                    zone_ids: zones.join(','),\n                    period_start,\n                    period_end,\n                }).toPromise()\n                .then((list) => {\n                    this._loading_spaces.next(false);\n                    return list.filter(\n                        (space) =>\n                            !filters.capacity ||\n                            filters.capacity >= space.capacity\n                    );\n                });\n        }),\n        shareReplay()\n    );\n\n    public get is_future_date() {\n        const date = this._form.getValue()?.controls?.date.value || new Date().valueOf();\n        return isAfter(new Date(date), endOfDay(new Date()));\n    }\n\n    public readonly clearState = () => clearEventFormState();\n\n    constructor(\n        private _calendar: CalendarService,\n        private _org: OrganisationService,\n        private _dialog: MatDialog\n    ) {\n        super();\n        this.setEvent(\n            new CalendarEvent({\n                date: roundToNearestMinutes(addMinutes(new Date(), 2), {\n                    nearestTo: 5,\n                }).valueOf(),\n            })\n        );\n    }\n\n    /** Set the event being worked on */\n    public setEvent(event: CalendarEvent): void {\n        this._event.next(event);\n        const form = generateEventForm(event);\n        this._form.next(form);\n        this.subscription('form_change', () => this.storeState());\n    }\n\n    /** Set the value of the form control */\n    public setValue<T = any>(name: string, value: T): void {\n        const form = this._form.getValue();\n        if (form && form.controls[name]) {\n            form.controls[name].setValue(value);\n        }\n    }\n\n    public newAttendee() {\n        const ref = this._dialog.open<NewUserModalComponent>(\n            NewUserModalComponent,\n            {\n                width: 'auto',\n                height: 'auto',\n                data: {},\n            }\n        );\n        const form = this._form.getValue();\n        ref.componentInstance.event\n            .pipe(first((_) => _.reason === 'done'))\n            .subscribe((event) => {\n                const attendees = form.controls.attendees.value || [];\n                attendees.push(event.metadata);\n                form.controls.attendees.setValue(unique(attendees, 'email'));\n                ref.close();\n            });\n    }\n\n    /** Reset the form fields for the active event */\n    public clearForm(): void {\n        this.setEvent(this._event.getValue());\n        this._filters.next({});\n    }\n\n    /** Update the current form filters */\n    public updateFilters(filters: EventFormFilters) {\n        this._filters.next(filters);\n    }\n\n    /** Store current event details and form values */\n    public storeState(): void {\n        const form = this._form.getValue();\n        sessionStorage.setItem(\n            'PLACEOS.event',\n            JSON.stringify(this._event.getValue().toJSON())\n        );\n        sessionStorage.setItem('PLACEOS.event_form', JSON.stringify(form.value));\n        localStorage.setItem(\n            'PLACEOS.event_filters',\n            JSON.stringify(this._filters.getValue())\n        );\n    }\n\n    /** Load old event details and form values */\n    public loadState(): void {\n        const event_data = sessionStorage.getItem('PLACEOS.event') || '{}';\n        if (event_data) {\n            this._event.next(new CalendarEvent(JSON.parse(event_data)));\n        }\n        const form_data = sessionStorage.getItem('PLACEOS.event_form');\n        if (form_data) {\n            const form = generateEventForm(this._event.getValue());\n            form.patchValue(JSON.parse(form_data));\n            this._form.next(form);\n        }\n        const filter_data = localStorage.getItem('PLACEOS.event_filters');\n        if (filter_data) {\n            this._filters.next(JSON.parse(filter_data));\n        }\n    }\n\n    /** Save changes to event to the server */\n    public save(): Promise<void> {\n        const form = this._form.getValue();\n        form.markAllAsTouched();\n        if (!form.controls.organiser.value || !form.controls.host.value)\n            form.patchValue({\n                organiser: currentUser(),\n                host: currentUser().email,\n            });\n        if (!form.controls.title.value) {\n            form.patchValue({\n                title: currentUser().email\n            });\n        }\n        if (!form.valid) {\n            const list = [];\n            for (const key in form.controls) {\n                if (form.controls[key].invalid) {\n                    list.push(key);\n                }\n            }\n            return Promise.reject(\n                notifyError(\n                    `Some form fields are not valid: [${list.join(', ')}]`\n                )\n            );\n        }\n        this._loading_event.next(true);\n        const values = new CalendarEvent({\n            ...this._event.getValue(),\n            ...this._form.getValue().value,\n        });\n        return saveEvent(values).toPromise().then(\n            () => this._loading_event.next(false),\n            () => this._loading_event.next(false)\n        );\n    }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { SettingsService } from '@placeos/common';\nimport { User } from '@placeos/users';\n\n@Component({\n    selector: 'a-directory-user-list-item',\n    template: `\n        <div\n            class=\"flex flex-wrap items-center sm:space-x-4 bg-white hover:bg-gray-100 overflow-hidden p-4 mb-2\"\n            *ngIf=\"user\"\n            [class.with-image]=\"show_image\"\n        >\n            <a-user-avatar *ngIf=\"show_image\" [user]=\"user\"></a-user-avatar>\n            <div class=\"flex flex-col flex-1 w-1/2 ml-4 sm:ml-0\">\n                <div class=\"name\">{{ user.name }}</div>\n                <a\n                    class=\"text-sm underline\"\n                    name=\"email\"\n                    [href]=\"'mailto:' + user.email | safe: 'url'\"\n                >\n                    {{ user.email }}\n                </a>\n            </div>\n            <div\n                class=\"flex w-full sm:w-auto sm:flex-col items-center space-x-2 sm:space-x-0 sm:space-y-2 mt-4 sm:mt-0\"\n            >\n                <a\n                    mat-button\n                    button\n                    class=\"w-32 flex-1 sm:flex-none\"\n                    name=\"locate\"\n                    [routerLink]=\"['/explore']\"\n                    [queryParams]=\"{ user: user.email }\"\n                    (click)=\"sendLocateEvent()\"\n                >\n                    Locate\n                </a>\n                <a\n                    mat-button\n                    button\n                    class=\"w-32 flex-1 sm:flex-nones\"\n                    name=\"call\"\n                    *ngIf=\"user.phone\"\n                    [href]=\"'tel:' + user.phone | safe: 'url'\"\n                    (click)=\"sendCallEvent()\"\n                >\n                    Call\n                </a>\n            </div>\n        </div>\n    `,\n    styles: [\n        `\n        `,\n    ],\n})\nexport class DirectoryUserListItemComponent {\n    /** Space to display */\n    @Input() public user: User;\n\n    public get show_image() {\n        return this._settings.get('app.directory.show_avatars');\n    }\n\n    public sendLocateEvent() {\n        // this._service.Analytics.event('Locate', `locate_clicked_user_${this.user.name}`);\n    }\n\n    public sendCallEvent() {\n        // this._service.Analytics.event('Call', `call_clicked_user_${this.user.name}`);\n    }\n\n    constructor(private _settings: SettingsService) {}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport {\n    switchMap,\n    debounceTime,\n    distinctUntilChanged,\n    map,\n} from 'rxjs/operators';\n\nimport { BaseClass, SettingsService } from '@placeos/common';\nimport { searchStaff, User } from '@placeos/users';\nimport { clearEventFormState } from '../bookings/space-flow/space-flow.service';\n\nconst LETTERS = `ABCDEFGHIJKLMNOPQRSTUVWXYZ`.split('');\n\n@Component({\n    selector: '[a-directory-user-list]',\n    template: `\n        <a-topbar-header [(menu)]=\"show_menu\"></a-topbar-header>\n        <div class=\"w-full flex items-center justify-center p-2\">\n            <mat-form-field overlay class=\"rounded\" appearance=\"outline\">\n                <app-icon class=\"text-xl\" matPrefix>search</app-icon>\n                <input\n                    matInput\n                    [(ngModel)]=\"search_str\"\n                    (ngModelChange)=\"search$.next($event)\"\n                    placeholder=\"Search for a person...\"\n                />\n                <mat-spinner\n                    matSuffix\n                    class=\"top-2\"\n                    *ngIf=\"loading\"\n                    [diameter]=\"32\"\n                ></mat-spinner>\n            </mat-form-field>\n        </div>\n        <main class=\"flex-1 h-1/2 w-full\">\n            <ng-container\n                *ngIf=\"groupedUsers && user_list.length; else empty_state\"\n            >\n                <ng-container *ngFor=\"let letter of letters\">\n                    <ng-container *ngIf=\"groupedUsers[letter].length\">\n                        <div class=\"py-2 px-4 font-medium\">{{ letter }}</div>\n                        <a-directory-user-list-item\n                            *ngFor=\"let user of groupedUsers[letter]\"\n                            [user]=\"user\"\n                        ></a-directory-user-list-item>\n                    </ng-container>\n                </ng-container>\n            </ng-container>\n        </main>\n        <a-footer-menu></a-footer-menu>\n        <ng-template #empty_state>\n            <div class=\"flex flex-col items-center p-8\">\n                <app-icon class=\"text-5xl\">{{\n                    search_str && search_str.length >= min_search_length\n                        ? 'close'\n                        : 'arrow_upward'\n                }}</app-icon>\n                <div class=\"text\">\n                    {{\n                        search_str && search_str.length >= min_search_length\n                            ? ' No matches for \"' + search_str + '\"'\n                            : 'Type above to search for users'\n                    }}\n                </div>\n            </div>\n        </ng-template>\n        <a-overlay-menu [(show)]=\"show_menu\"></a-overlay-menu>\n    `,\n    styles: [\n        `\n            :host {\n                display: flex;\n                flex-direction: column;\n                height: 100%;\n                width: 100%;\n                background: #f0f0f0;\n            }\n\n            mat-form-field {\n                width: 768px;\n                max-width: calc(100% - 2rem);\n            }\n        `,\n    ],\n})\nexport class DirectoryUserListComponent extends BaseClass implements OnInit {\n    /** List of controllable spaces */\n    public user_list: User[] = [];\n    /** String  */\n    public search_str: string;\n    /** List of users from an API search */\n    public search_results$: Observable<User[]>;\n    /** Whether space list is being filtered */\n    public loading: boolean;\n    /** Subject holding the value of the search */\n    public readonly search$ = new Subject<string>();\n    /** Whether to show menu */\n    public show_menu: boolean;\n\n    public groupedUsers: { [id: string]: User[] } = {};\n\n    /** Minimum length of the search string needed to initial a search */\n    public get min_search_length(): number {\n        const length = this._settings.get('app.directory.min_search_length');\n        return typeof length === 'number' && length >= 0 ? length : 3;\n    }\n\n    constructor(private _settings: SettingsService) {\n        super();\n    }\n\n    public ngOnInit(): void {\n        // Listen for input changes\n        this.search_results$ = this.search$.pipe(\n            debounceTime(400),\n            distinctUntilChanged(),\n            switchMap((query) => {\n                this.loading = true;\n                const retVal =\n                    query.length >= this.min_search_length\n                        ? searchStaff(query)\n                              .toPromise()\n                              .catch(() => [])\n                        : Promise.resolve(this.user_list || []);\n                return retVal;\n            }),\n            map((list: User[]) => {\n                this.loading = false;\n                return list;\n            })\n        );\n        // Process API results\n        this.subscription(\n            'search_results',\n            this.search_results$.subscribe((list) => {\n                this.user_list = list;\n                this.buildGroups(this.user_list);\n            })\n        );\n        this.search$.next('');\n        clearEventFormState();\n    }\n\n    public get letters(): string[] {\n        return LETTERS;\n    }\n\n    private buildGroups(users: User[]) {\n        const sorted = users.sort((a, b) => a.name.localeCompare(b.name));\n        for (const letter of this.letters) {\n            this.groupedUsers[letter] = sorted.filter((f) =>\n                f.name.startsWith(letter)\n            );\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { SharedContentModule } from '../ui/shared.module';\nimport { DirectoryUserListComponent } from './user-list.component';\nimport { DirectoryUserListItemComponent } from './user-details.component';\nimport { FormsModule } from '@angular/forms';\n\nconst ROUTES: Route[] = [{ path: '', component: DirectoryUserListComponent }];\n\n@NgModule({\n    declarations: [DirectoryUserListComponent, DirectoryUserListItemComponent],\n    imports: [\n        CommonModule,\n        FormsModule,\n        RouterModule.forChild(ROUTES),\n        SharedContentModule,\n    ],\n})\nexport class DirectoryModule {}\n"],"sourceRoot":"webpack:///"}